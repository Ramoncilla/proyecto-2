

begin, , , llanta_vacio_llanta_entero

// Asignando atributo valor1
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val
=>, t5, t6, stack; // valor de lo que trae en el stack val
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t11; // pos de val
=>, t11, t12, stack; // valor de lo que trae en el stack val
*, t12, 10, t13;
<=, t10, t13, heap; //guardando en el heap el valor del atributo
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t14; // pos this 
=>, t14, t15, stack; // obtenido apuntador al heap 
=>, t15, t16, heap; // apuntador 
+, t16, 1, t17; // pos de valor2
=>, t17, t18, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t18);

end, , llanta_vacio_llanta_entero




begin, , , llanta_vacio_getValor1


end, , llanta_vacio_getValor1




begin, , , carro_vacio_carro

// ----------- Instancia a un atributo --------------
+, p, 0, t19;// pos this de repuesto
=>, t19, t20, stack; //apuntador del heap de repuesto
=>, t20, t21, heap; //posicion real del heap donde inicia repuesto
+, t21, 4, t22; //pos real del atributo repuesto
<=, t22, h, heap; //guardando la pos real donde inicia el objeto repuesto
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto repuesto

// Guardando la referencia al this del objeto para la llamada al constructor repuesto
+, p, 0, t23;
=>, t23, t24, stack; //apuntador al heap de repuesto
=>, t24, t25, heap; //posicion real donde incia el objeto repuesto
+, t25, 4, t26; // pos real donde incial el objeto repuesto

+, p, t26, t27; // tamanho de la funcion actual carro_vacio_carro
+, t27, 0, t28; // pos del this para la nueva instancia de repuesto
<=, t28, t26, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t29; // size de funcion actual
+, t29, 1, t30; //pos del parametro 1
<=, t30, 15, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t31;// pos this de lla1
=>, t31, t32, stack; //apuntador del heap de lla1
=>, t32, t33, heap; //posicion real del heap donde inicia lla1
+, t33, 0, t34; //pos real del atributo lla1
<=, t34, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t35;
=>, t35, t36, stack; //apuntador al heap de lla1
=>, t36, t37, heap; //posicion real donde incia el objeto lla1
+, t37, 0, t38; // pos real donde incial el objeto lla1

+, p, t38, t39; // tamanho de la funcion actual carro_vacio_carro
+, t39, 0, t40; // pos del this para la nueva instancia de lla1
<=, t40, t38, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t41; // size de funcion actual
+, t41, 1, t42; //pos del parametro 1
<=, t42, 1, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t43;// pos this de lla2
=>, t43, t44, stack; //apuntador del heap de lla2
=>, t44, t45, heap; //posicion real del heap donde inicia lla2
+, t45, 1, t46; //pos real del atributo lla2
<=, t46, h, heap; //guardando la pos real donde inicia el objeto lla2
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla2

// Guardando la referencia al this del objeto para la llamada al constructor lla2
+, p, 0, t47;
=>, t47, t48, stack; //apuntador al heap de lla2
=>, t48, t49, heap; //posicion real donde incia el objeto lla2
+, t49, 1, t50; // pos real donde incial el objeto lla2

+, p, t50, t51; // tamanho de la funcion actual carro_vacio_carro
+, t51, 0, t52; // pos del this para la nueva instancia de lla2
<=, t52, t50, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t53; // size de funcion actual
+, t53, 1, t54; //pos del parametro 1
<=, t54, 2, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t55;// pos this de lla3
=>, t55, t56, stack; //apuntador del heap de lla3
=>, t56, t57, heap; //posicion real del heap donde inicia lla3
+, t57, 2, t58; //pos real del atributo lla3
<=, t58, h, heap; //guardando la pos real donde inicia el objeto lla3
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla3

// Guardando la referencia al this del objeto para la llamada al constructor lla3
+, p, 0, t59;
=>, t59, t60, stack; //apuntador al heap de lla3
=>, t60, t61, heap; //posicion real donde incia el objeto lla3
+, t61, 2, t62; // pos real donde incial el objeto lla3

+, p, t62, t63; // tamanho de la funcion actual carro_vacio_carro
+, t63, 0, t64; // pos del this para la nueva instancia de lla3
<=, t64, t62, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t65; // size de funcion actual
+, t65, 1, t66; //pos del parametro 1
<=, t66, 3, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t67;// pos this de lla4
=>, t67, t68, stack; //apuntador del heap de lla4
=>, t68, t69, heap; //posicion real del heap donde inicia lla4
+, t69, 3, t70; //pos real del atributo lla4
<=, t70, h, heap; //guardando la pos real donde inicia el objeto lla4
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla4

// Guardando la referencia al this del objeto para la llamada al constructor lla4
+, p, 0, t71;
=>, t71, t72, stack; //apuntador al heap de lla4
=>, t72, t73, heap; //posicion real donde incia el objeto lla4
+, t73, 3, t74; // pos real donde incial el objeto lla4

+, p, t74, t75; // tamanho de la funcion actual carro_vacio_carro
+, t75, 0, t76; // pos del this para la nueva instancia de lla4
<=, t76, t74, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t77; // size de funcion actual
+, t77, 1, t78; //pos del parametro 1
<=, t78, 4, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// Asignando atributo color
+, p, 0, t79; //pos this 
=>, t79, t80, stack; // apuntador al heap
=>, t80, t81, heap; // apuntador donde inicia el objeto
+, t81, 5, t82; // pos real  de color
<=, t82, 11, heap; //guardando en el heap el valor del atributo

end, , carro_vacio_carro




begin, , , persona_PRINCIPAL

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t83; // pos de pedrito
<=, t83, 2, stack; // asignando a pedrito
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t84; // pos de alina
*, 2, 2, t85;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t86; // pos de pedrito
=>, t86, t87, stack; // valor de lo que trae en el stack pedrito
-, t85, t87, t88;
+, t88, 26, t89;
<=, t84, t89, stack; // asignando a alina
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t90; // pos de pedrito
=>, t90, t91, stack; // valor de lo que trae en el stack pedrito
print("%d", t91);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t92; // pos de alina
=>, t92, t93, stack; // valor de lo que trae en el stack alina
print("%d", t93);
// ----------- Instancia a una variable local --------------
+, p, 0, t94; // pos de p1
<=, t94, h, stack; //guardando referencia del heap para el objeto p1
+, h, 1, t95; // guardo la posicion donde inicia el objeto 
<=, h, t95, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto p1
//Ingresando referencia al this del objeto p1
+, p, 0, t96; // pos de p1
=>, t96, t97, stack; // obteniendo apuntador de p1
+, p, 4, t98; // simulando cambio de ambito
+, t98, 0, t99; //pos del this de p1
<=, t99, t97, stack; // insertando apuntador del heap al stack del obeto p1
// No posee parametros 
+, p, 4, p; // simulando cambio de ambito
call, , , persona_vacio_persona;
-, p, 4, p; // regresando al ambito acutal

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t100; // pos de pedrito
=>, t100, t101, stack; //obtenidoe el valor de pedrito
+, t101, 19, t102;
<=, t100, t102, stack; // asignando a pedrito
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t103; // pos de pedrito
=>, t103, t104, stack; // valor de lo que trae en el stack pedrito
print("%d", t104);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t105; // pos de pedrito
=>, t105, t106, stack; //obtenidoe el valor de pedrito
-, t106, 10.2, t107;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t108; // pos de pedrito
=>, t108, t109, stack; // valor de lo que trae en el stack pedrito
print("%d", t109);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t110; // pos de pedrito
=>, t110, t111, stack; //obtenidoe el valor de pedrito
-, t111, 5, t112;
<=, t110, t112, stack; // asignando a pedrito
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t113; // pos de pedrito
=>, t113, t114, stack; // valor de lo que trae en el stack pedrito
print("%d", t114);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t115; // pos de pedrito
=>, t115, t116, stack; //obtenidoe el valor de pedrito
*, t116, 2, t117;
<=, t115, t117, stack; // asignando a pedrito
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t118; // pos de pedrito
=>, t118, t119, stack; // valor de lo que trae en el stack pedrito
print("%d", t119);
// ------------------------ Creando arreglo local nombre
+, P, 3, t120; //pos de arreglo nombre
<=, t120, H, stack; // ingrensando al stack apunt del heap para nombre
+, H, 1, t121;
<=, H, t121, heap; //insetnado donde inicia el arreglo nombre
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t122; //calculando el n real
-, t122, 0, t123; //iReal columna 0
<=, H, t123, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, h, t123, h; // reservnado el espacio del arreglo nombre

end, , persona_PRINCIPAL




begin, , , persona_vacio_persona_entero_entero

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t125; // pos de edad
*, 25, 2, t126;
<=, t125, t126, stack; // asignando a edad
// ----------- Instancia a un atributo --------------
+, p, 0, t127;// pos this de c
=>, t127, t128, stack; //apuntador del heap de c
=>, t128, t129, heap; //posicion real del heap donde inicia c
+, t129, 2, t130; //pos real del atributo c
<=, t130, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t131;
=>, t131, t132, stack; //apuntador al heap de c
=>, t132, t133, heap; //posicion real donde incia el objeto c
+, t133, 2, t134; // pos real donde incial el objeto c

+, p, t134, t135; // tamanho de la funcion actual persona_vacio_persona_entero_entero
+, t135, 0, t136; // pos del this para la nueva instancia de c
<=, t136, t134, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 4, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 4, p; // regresando al ambito acutal


end, , persona_vacio_persona_entero_entero




begin, , , persona_vacio_persona

// Asignando atributo edad
+, p, 0, t137; //pos this 
=>, t137, t138, stack; // apuntador al heap
=>, t138, t139, heap; // apuntador donde inicia el objeto
+, t139, 0, t140; // pos real  de edad
*, 25, 2, t141;
<=, t140, t141, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t142;// pos this de c
=>, t142, t143, stack; //apuntador del heap de c
=>, t143, t144, heap; //posicion real del heap donde inicia c
+, t144, 2, t145; //pos real del atributo c
<=, t145, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t146;
=>, t146, t147, stack; //apuntador al heap de c
=>, t147, t148, heap; //posicion real donde incia el objeto c
+, t148, 2, t149; // pos real donde incial el objeto c

+, p, t149, t150; // tamanho de la funcion actual persona_vacio_persona
+, t150, 0, t151; // pos del this para la nueva instancia de c
<=, t151, t149, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 2, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 2, p; // regresando al ambito acutal

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t152; // pos this 
=>, t152, t153, stack; // obtenido apuntador al heap 
=>, t153, t154, heap; // apuntador 
+, t154, 0, t155; // pos de edad
=>, t155, t156, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t156);
// Asignando atributo edad
+, p, 0, t157; //pos this 
=>, t157, t158, stack; // apuntador al heap
=>, t158, t159, heap; // apuntador donde inicia el objeto
+, t159, 0, t160; // pos real  de edad
=>, t160, t161, heap; //obtenidoe el valor de edad
+, t161, 8, t162;
<=, t160, t162, heap; //guardando en el heap el valor del atributo edad
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t163; // pos this 
=>, t163, t164, stack; // obtenido apuntador al heap 
=>, t164, t165, heap; // apuntador 
+, t165, 0, t166; // pos de edad
=>, t166, t167, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t167);

end, , persona_vacio_persona


