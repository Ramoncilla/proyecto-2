

begin, , , hola_PRINCIPAL

+, P, 0, t1;
=>, t1, t2, stack; 
+, P, 0, t3;
+, t2, 0, t4;
<=, t3, t2, stack; 
// Asignando parametros de llamada a funcion  
+, p, 0, t5; // size de funcion actual
+, t5, 1, t6; //pos del parametro 1
<=, t6, 3, stack; // asignado al stack el parametro
+, p, 0, t7; // size de funcion actual
+, t7, 2, t8; //pos del parametro 2
<=, t8, 5, stack; // asignado al stack el parametro
+, P, 0, P;
call, , , hola_entero_suma_entero_entero;
+, P, 3, t9;
=>, t9, t10, stack; // valor del return
-, P, 0, P;
je, t10, 8, L3;
jmp, , , L4;
L3:

print("%d", 123456789);
jmp, , , L2; // salida del if
L4:

print("%d", 252525);
L2:

L1:
end, , hola_PRINCIPAL




begin, , , hola_entero_suma_entero_entero

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t11; // pos de a
=>, t11, t12, stack; // valor de lo que trae en el stack a
*, t12, 2, t13;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t14; // pos de b
=>, t14, t15, stack; // valor de lo que trae en el stack b
+, t13, t15, t16;
+, P, 3, t17; // pos de retorno de a funcion hola_entero_suma_entero_entero
<=, t17, t16, stack; //asignando el retorno con su valor
jmp, , , L5;

L5:
end, , hola_entero_suma_entero_entero


