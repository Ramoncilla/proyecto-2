

begin, , , persona_PRINCIPAL

// ------------------------ Creando arreglo local pedris
+, P, 0, t1; //pos de arreglo pedris
<=, t1, H, stack; // ingrensando al stack apunt del heap para pedris
+, H, 1, t2;
<=, H, t2, heap; //insetnado donde inicia el arreglo pedris
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t3; //calculando el n real
-, t3, 0, t4; //iReal columna 0
+, t4, 1, t4; //size del arreglo pedris
<=, H, t4, heap; // insertando el tamanio del arreglo linealizado pedris
+, H, 1, H;
+, h, t4, h; // reservnado el espacio del arreglo pedris
+, P, 0, t7; // pos del arreglo 
=>, t7, t8, stack; //apuntador al heap del arreglo
=>, t8, t9, heap; // apuntador del heap al heap donde inicia la cadena
=>, t9, t5, heap; // size del arreglo pedris
+, t9, 1, t6; // pos 0 donde inicia el arreglo pedris
// Resolviendo una cadena 
+, H, 0, t10; //apuntaodr a cadena 
+, H, 1, t11; //apu donde inicia la cadena
<=, t10, t11, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 6, heap; //guardando el tamanio de la cadena
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t12; //apuntaodr a cadena 
+, H, 1, t13; //apu donde inicia la cadena
<=, t12, t13, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 6, heap; //guardando el tamanio de la cadena
+, H, 1, H;
<=, H, 85, heap; //guardadndo U
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
//Iniciando a concatnar cadenas 
=>, t10, t14, heap;
=>, t14, t15, heap; // size cadena1
+, t14, 1, t16; // pos 0 de la cadena 1
=>, t12, t17, heap;
=>, t17, t18, heap; // size cadena2
+, t17, 1, t19; // pos 0 de la cadena 2
+, t15, t18, t20; // size de la nueva cadena
=>, t16, t21, heap; // primer caracter de la cadena 1
=>, t19, t22, heap; // primer caracter de la cadena 2
+, H, 0, t23; // posicion de retorno de la cadena
+, H, 1, t24;
<=, t23, t24, heap;
+, H, 1, H;
<=, H, t20, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L1;
L1:
jne, t21, 34, L2;
jmp, , , L3;
jmp, , , L2;
L2:
<=, H, t21, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t16, 1, t16;
=>, t16, t21, heap;
jmp, , , L1;
jmp, , , L3;
L3:
jmp, , , L4;
L4:
jne, t22, 34, L5;
jmp, , , L6;
jmp, , , L5;
L5:
<=, H, t22, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t19, 1, t19;
=>, t19, t22, heap;
jmp, , , L4;
jmp, , , L6;
L6:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
=>, t23, t25, heap; // pos que apunta al size de la cadena
=>, t25, t26, heap; // size de la cadena
+, t25, 1, t27; // Pos 0 de la cadena
=>, t27, t28, heap; // sacandor el caracter del heap cadena
jle, t26, t5, L7;
jmp, , , L8;
jmp, , , L7;
L7:
jne, t28, 34, L9;
jmp, , , L10;
jmp, , , L9;
L9:
<=, t6, t28, heap; // guardando el caracter 
+, t6, 1, t6; // incremnetnado la pos del arreglo
+, t27, 1, t27; // incrementando la pos de la cadena
=>, t27, t28, heap; // sacandor el caracter del heap cadena
jmp, , , L7;
jmp, , , L10;
L10:
jmp, , , L8;
L8:
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t29; // pos de i
<=, t29, 0, stack; // asignando a i
// Resolviendo un repetur mientras
jmp, , ,L11; //regresando a la etiqueral del ciclo repetir- mientras
L11:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t30; // pos de i
=>, t30, t31, stack; // valor de lo que trae en el stack i
jl, t31, 20, L12;
jmp, , , L13;
L12:

+, P, 0, t32; // pos de arreglo pedris
=>, t32, t33, stack; // apunt al heap de arreglo pedris
=>, t33, t34, heap; //apunt al heap donde inicia el arreglo pedris
=>, t34, t35, heap; //obteniendo el tamanio del arreglo pedris
+, t34, 1, t36; // pos 0 del arreglo pedris
// ---- Calculo de valor de las posiciones  
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t37; // pos de i
=>, t37, t38, stack; // valor de lo que trae en el stack i
// -----------(Obteniendo valor) Calculo de iReal para el arreglo pedris
-, t38, 0, t39; //calculando el n real ()
-, t39, 0, t40; //iReal columna 0
+, t36, t40, t41; // pos buscada del arreglo  pedris
=>, t41, t42, heap; //valor que trae el objeto
print("%c", t42);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t43; // pos de i
=>, t43, t44, stack; //obtenidoe el valor de i
+, t44, 1, t45;
<=, t43, t45, stack; // asignando a i
jmp, , ,L11; //regresando a la etiqueral del ciclo repetir mientras
L13:


end, , persona_PRINCIPAL




begin, , , persona_vacio_persona

// ----------------------- Creando arreglo atributo valor
+, P, 0, t46; //pos this del arreglo
=>, t46, t47, stack; //obteniendo apuntador de arreglo en eel heap
=>, t47, t48, heap;//apuntando donde en verdad inicia el arreglo
+, t48, 0, t49; //pos del heap que guarda apuntador del heap para el arreglo valor
<=, t49, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 6, 1, t50; //calculando el n real
-, t50, 0, t51; //iReal columna 0
-, 2, 1, t52; //calculando el n real
*, t51, 2, t53;// multiplicando por n1
+, t53, t52, t54;
-, t54, 0, t55; //i real de columna 1
+, t55, 1, t55; //size del arreglo valor
<=, H, t55, heap; // insertando el tamanio del arreglo linealizado valor
+, H, 1, H;
+, t55, 0, t56; // anhadiendo una posicion mas
+, h, t56, h; // reservnado el espacio del arreglo valor
// Asignar un posicion del arreglo 
//------------- Asignancio posicion de un arreglo Atributo  valor
+, P, 0, t57; // pos this del objeto 
=>, t57, t58, stack; // apunt del heap para le objeto
=>, t58, t59, heap; // apunt donde inicia el objeto
+, t59, 0, t60; // pos del arreglo dentro del heap 
=>, t60, t61, heap; // apuntador donde inicia el arreglo
=>, t61, t62, heap; // size del arreglo valor
+, t61, 1, t63; //pos 0 del arreglo valor
// ----------- Calculo de iReal para el arreglo valor
-, 0, 0, t64; //calculando el n real ()
-, t64, 0, t65; //iReal columna 0
-, 0, 0, t66; //calculando el n real ()
*, t65, 2, t67;// multiplicando por n1
+, t67, t66, t68;
-, t68, 0, t69; //i real de columna 1
+, t63, t69, t70; // pos buscade del arreglo atributo valor
<=, t70, 79, heap; // asignando al heap en la nueva posicion de arreglo valor
// Asignar un posicion del arreglo 
//------------- Asignancio posicion de un arreglo Atributo  valor
+, P, 0, t71; // pos this del objeto 
=>, t71, t72, stack; // apunt del heap para le objeto
=>, t72, t73, heap; // apunt donde inicia el objeto
+, t73, 0, t74; // pos del arreglo dentro del heap 
=>, t74, t75, heap; // apuntador donde inicia el arreglo
=>, t75, t76, heap; // size del arreglo valor
+, t75, 1, t77; //pos 0 del arreglo valor
// ----------- Calculo de iReal para el arreglo valor
-, 3, 0, t78; //calculando el n real ()
-, t78, 0, t79; //iReal columna 0
-, 1, 0, t80; //calculando el n real ()
*, t79, 2, t81;// multiplicando por n1
+, t81, t80, t82;
-, t82, 0, t83; //i real de columna 1
+, t77, t83, t84; // pos buscade del arreglo atributo valor
<=, t84, 112, heap; // asignando al heap en la nueva posicion de arreglo valor
//------------- Asignancio posicion de un arreglo Atributo  valor
+, P, 0, t85; // pos this del objeto 
=>, t85, t86, stack; // apunt del heap para le objeto
=>, t86, t87, heap; // apunt donde inicia el objeto
+, t87, 0, t88; // pos del arreglo dentro del heap 
=>, t88, t89, heap; // apuntador donde inicia el arreglo
=>, t89, t90, heap; // size del arreglo valor
+, t89, 1, t91; //pos 0 del arreglo valor
// ----------- Calculo de iReal para el arreglo valor
-, 0, 0, t92; //calculando el n real ()
-, t92, 0, t93; //iReal columna 0
-, 0, 0, t94; //calculando el n real ()
*, t93, 2, t95;// multiplicando por n1
+, t95, t94, t96;
-, t96, 0, t97; //i real de columna 1
+, t91, t97, t98; // pos buscade del arreglo atributo valor
=>, t98, t99, heap; //valor que trae el objeto
print("%c", t99);
//------------- Asignancio posicion de un arreglo Atributo  valor
+, P, 0, t100; // pos this del objeto 
=>, t100, t101, stack; // apunt del heap para le objeto
=>, t101, t102, heap; // apunt donde inicia el objeto
+, t102, 0, t103; // pos del arreglo dentro del heap 
=>, t103, t104, heap; // apuntador donde inicia el arreglo
=>, t104, t105, heap; // size del arreglo valor
+, t104, 1, t106; //pos 0 del arreglo valor
// ----------- Calculo de iReal para el arreglo valor
-, 1, 0, t107; //calculando el n real ()
-, t107, 0, t108; //iReal columna 0
-, 1, 0, t109; //calculando el n real ()
*, t108, 2, t110;// multiplicando por n1
+, t110, t109, t111;
-, t111, 0, t112; //i real de columna 1
+, t106, t112, t113; // pos buscade del arreglo atributo valor
=>, t113, t114, heap; //valor que trae el objeto
print("%c", t114);
//------------- Asignancio posicion de un arreglo Atributo  valor
+, P, 0, t115; // pos this del objeto 
=>, t115, t116, stack; // apunt del heap para le objeto
=>, t116, t117, heap; // apunt donde inicia el objeto
+, t117, 0, t118; // pos del arreglo dentro del heap 
=>, t118, t119, heap; // apuntador donde inicia el arreglo
=>, t119, t120, heap; // size del arreglo valor
+, t119, 1, t121; //pos 0 del arreglo valor
// ----------- Calculo de iReal para el arreglo valor
-, 3, 0, t122; //calculando el n real ()
-, t122, 0, t123; //iReal columna 0
-, 1, 0, t124; //calculando el n real ()
*, t123, 2, t125;// multiplicando por n1
+, t125, t124, t126;
-, t126, 0, t127; //i real de columna 1
+, t121, t127, t128; // pos buscade del arreglo atributo valor
=>, t128, t129, heap; //valor que trae el objeto
print("%c", t129);
print("%c", 122);

end, , persona_vacio_persona


