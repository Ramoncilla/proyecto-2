

begin, , , llanta_vacio_llanta_entero


end, , llanta_vacio_llanta_entero




begin, , , llanta_vacio_getValor1


end, , llanta_vacio_getValor1




begin, , , carro_vacio_carro

// ----------- Instancia a un atributo --------------
+, p, 0, t1// pos this de repuesto
=>, t1, t2, stack //apuntador del heap de repuesto
=>, t2, t3, heap //posicion real del heap donde inicia repuesto
+, t3, 4, t4 //pos real del atributo repuesto
<=, t4, h, heap //guardando la pos real donde inicia el objeto repuesto
+, h, 2, h // reservando el espacio de memoria para el nuevo objeto repuesto

// Guardando la referencia al this del objeto para la llamada al constructor repuesto
+, p, 0, t5
=>, t5, t6, stack //apuntador al heap de repuesto
=>, t6, t7, heap //posicion real donde incia el objeto repuesto
+, t7, 4, t8 // pos real donde incial el objeto repuesto

+, p, t8, t9 // tamanho de la funcion actual carro_vacio_carro
+, t9, 0, t10 // pos del this para la nueva instancia de repuesto
<=, t10, t8, stack //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t11 // size de funcion actual
+, t11, 1, t12 //pos del parametro 1
<=, 
+, p, 2, p // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero
-, p, 2, p // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t13// pos this de lla1
=>, t13, t14, stack //apuntador del heap de lla1
=>, t14, t15, heap //posicion real del heap donde inicia lla1
+, t15, 0, t16 //pos real del atributo lla1
<=, t16, h, heap //guardando la pos real donde inicia el objeto lla1
+, h, 2, h // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t17
=>, t17, t18, stack //apuntador al heap de lla1
=>, t18, t19, heap //posicion real donde incia el objeto lla1
+, t19, 0, t20 // pos real donde incial el objeto lla1

+, p, t20, t21 // tamanho de la funcion actual carro_vacio_carro
+, t21, 0, t22 // pos del this para la nueva instancia de lla1
<=, t22, t20, stack //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t23 // size de funcion actual
+, t23, 1, t24 //pos del parametro 1
<=, 
+, p, 2, p // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero
-, p, 2, p // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t25// pos this de lla2
=>, t25, t26, stack //apuntador del heap de lla2
=>, t26, t27, heap //posicion real del heap donde inicia lla2
+, t27, 1, t28 //pos real del atributo lla2
<=, t28, h, heap //guardando la pos real donde inicia el objeto lla2
+, h, 2, h // reservando el espacio de memoria para el nuevo objeto lla2

// Guardando la referencia al this del objeto para la llamada al constructor lla2
+, p, 0, t29
=>, t29, t30, stack //apuntador al heap de lla2
=>, t30, t31, heap //posicion real donde incia el objeto lla2
+, t31, 1, t32 // pos real donde incial el objeto lla2

+, p, t32, t33 // tamanho de la funcion actual carro_vacio_carro
+, t33, 0, t34 // pos del this para la nueva instancia de lla2
<=, t34, t32, stack //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t35 // size de funcion actual
+, t35, 1, t36 //pos del parametro 1
<=, 
+, p, 2, p // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero
-, p, 2, p // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t37// pos this de lla3
=>, t37, t38, stack //apuntador del heap de lla3
=>, t38, t39, heap //posicion real del heap donde inicia lla3
+, t39, 2, t40 //pos real del atributo lla3
<=, t40, h, heap //guardando la pos real donde inicia el objeto lla3
+, h, 2, h // reservando el espacio de memoria para el nuevo objeto lla3

// Guardando la referencia al this del objeto para la llamada al constructor lla3
+, p, 0, t41
=>, t41, t42, stack //apuntador al heap de lla3
=>, t42, t43, heap //posicion real donde incia el objeto lla3
+, t43, 2, t44 // pos real donde incial el objeto lla3

+, p, t44, t45 // tamanho de la funcion actual carro_vacio_carro
+, t45, 0, t46 // pos del this para la nueva instancia de lla3
<=, t46, t44, stack //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t47 // size de funcion actual
+, t47, 1, t48 //pos del parametro 1
<=, 
+, p, 2, p // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero
-, p, 2, p // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t49// pos this de lla4
=>, t49, t50, stack //apuntador del heap de lla4
=>, t50, t51, heap //posicion real del heap donde inicia lla4
+, t51, 3, t52 //pos real del atributo lla4
<=, t52, h, heap //guardando la pos real donde inicia el objeto lla4
+, h, 2, h // reservando el espacio de memoria para el nuevo objeto lla4

// Guardando la referencia al this del objeto para la llamada al constructor lla4
+, p, 0, t53
=>, t53, t54, stack //apuntador al heap de lla4
=>, t54, t55, heap //posicion real donde incia el objeto lla4
+, t55, 3, t56 // pos real donde incial el objeto lla4

+, p, t56, t57 // tamanho de la funcion actual carro_vacio_carro
+, t57, 0, t58 // pos del this para la nueva instancia de lla4
<=, t58, t56, stack //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t59 // size de funcion actual
+, t59, 1, t60 //pos del parametro 1
<=, 
+, p, 2, p // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero
-, p, 2, p // regresando al ambito acutal


end, , carro_vacio_carro




begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t61 // pos de p1
<=, t61, h, stack //guardando referencia del heap para el objeto p1
+, h, 1, t62 // guardo la posicion donde inicia el objeto 
<=, h, t62, heap // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h // sumando al heap la posicion que usamos extra para el doble apuntador 
+, t65, 0, t66 //pos del this de p1

<=, t66, t64, stack // insertando apuntador del heap al stack del obeto p1

// No posee parametros 
+, p, 1, p // simulando cambio de ambito
call, , , persona_vacio_persona
-, p, 1, p // regresando al ambito acutal


end, , persona_PRINCIPAL




begin, , , persona_vacio_persona_entero_entero

*, 25, 2, t71
// Asignando atributo edad
+, p, 0, t67 //Pos del this del objeto persona
=>, t67, t68, stack // obteniendo el apuntador  del heap 
=>, t68, t69, heap // recupenrado del heap el apuntdor al heap de donde inicia el objeto
+, t69, 0, t70 // obteniendo la posicion real del atributo edad
<=, t70, t71, heap //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t72// pos this de c
=>, t72, t73, stack //apuntador del heap de c
=>, t73, t74, heap //posicion real del heap donde inicia c
+, t74, 2, t75 //pos real del atributo c
<=, t75, h, heap //guardando la pos real donde inicia el objeto c
+, h, 6, h // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t76
=>, t76, t77, stack //apuntador al heap de c
=>, t77, t78, heap //posicion real donde incia el objeto c
+, t78, 2, t79 // pos real donde incial el objeto c

+, p, t79, t80 // tamanho de la funcion actual persona_vacio_persona_entero_entero
+, t80, 0, t81 // pos del this para la nueva instancia de c
<=, t81, t79, stack //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 4, p // simulando cambio de ambito
call, , , carro_vacio_carro
-, p, 4, p // regresando al ambito acutal


end, , persona_vacio_persona_entero_entero




begin, , , persona_vacio_persona

*, 25, 2, t86
// Asignando atributo edad
+, p, 0, t82 //Pos del this del objeto persona
=>, t82, t83, stack // obteniendo el apuntador  del heap 
=>, t83, t84, heap // recupenrado del heap el apuntdor al heap de donde inicia el objeto
+, t84, 0, t85 // obteniendo la posicion real del atributo edad
<=, t85, t86, heap //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t87// pos this de c
=>, t87, t88, stack //apuntador del heap de c
=>, t88, t89, heap //posicion real del heap donde inicia c
+, t89, 2, t90 //pos real del atributo c
<=, t90, h, heap //guardando la pos real donde inicia el objeto c
+, h, 6, h // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t91
=>, t91, t92, stack //apuntador al heap de c
=>, t92, t93, heap //posicion real donde incia el objeto c
+, t93, 2, t94 // pos real donde incial el objeto c

+, p, t94, t95 // tamanho de la funcion actual persona_vacio_persona
+, t95, 0, t96 // pos del this para la nueva instancia de c
<=, t96, t94, stack //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 2, p // simulando cambio de ambito
call, , , carro_vacio_carro
-, p, 2, p // regresando al ambito acutal


end, , persona_vacio_persona


