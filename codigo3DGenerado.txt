

begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t1; // pos de p
<=, t1, h, stack; //guardando referencia del heap para el objeto p
+, h, 1, t2; // guardo la posicion donde inicia el objeto 
<=, h, t2, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 1, h; // reservando espacio para el objeto p
//Ingresando referencia al this del objeto p
+, p, 0, t3; // pos de p
=>, t3, t4, stack; // obteniendo apuntador de p
+, p, 1, t5; // simulando cambio de ambito
+, t5, 0, t6; //pos del this de p
<=, t6, t4, stack; // insertando apuntador del heap al stack del obeto p
// No posee parametros 
+, p, 1, p; // simulando cambio de ambito
call, , , persona_vacio_persona;
-, p, 1, p; // regresando al ambito acutal


end, , persona_PRINCIPAL




begin, , , persona_vacio_persona

// ------------------------ Instanciando una nueva lista atributo --------------------
+, P, 0, t7; //pos this
=>, t7, t8, stack; // obtenienido apuntador al heap para la lista
=>, t8, t9, heap; //apauntador al heap para el objeto
+, t9, 0, t10; // pos donde inicia la lista
<=, t10, H, heap;
<=, H, -1, heap; // ingresando el size de la lista
+, H, 1, H;
<=, H, -1, heap; // ingresando el apuntador nulo a la lista
+, H, 3, H;

end, , persona_vacio_persona


