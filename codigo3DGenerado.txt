

begin, , , llanta_vacio_llanta_entero_entero

// Asignando atributo valor1Llanta
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val1
=>, t5, t6, stack; // valor de lo que trae en el stack val1
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2Llanta
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t11; // pos de val2
=>, t11, t12, stack; // valor de lo que trae en el stack val2
<=, t10, t12, heap; //guardando en el heap el valor del atributo

L1:
end, , llanta_vacio_llanta_entero_entero




begin, , , llanta_vacio_mostrarVAlor1

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t13; // pos this 
=>, t13, t14, stack; // obtenido apuntador al heap 
=>, t14, t15, heap; // apuntador 
+, t15, 0, t16; // pos de valor1Llanta
=>, t16, t17, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t17);

L2:
end, , llanta_vacio_mostrarVAlor1




begin, , , llanta_vacio_mostrarVAlor2

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t18; // pos this 
=>, t18, t19, stack; // obtenido apuntador al heap 
=>, t19, t20, heap; // apuntador 
+, t20, 1, t21; // pos de valor2Llanta
=>, t21, t22, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t22);

L3:
end, , llanta_vacio_mostrarVAlor2




begin, , , carro_vacio_carro_caracter_entero

// Asignando atributo col
+, p, 0, t23; //pos this 
=>, t23, t24, stack; // apuntador al heap
=>, t24, t25, heap; // apuntador donde inicia el objeto
+, t25, 0, t26; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t27; // pos de color
=>, t27, t28, stack; // valor de lo que trae en el stack color
<=, t26, t28, heap; //guardando en el heap el valor del atributo
print("%c", 89);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t29; // pos de rinLlanta
=>, t29, t30, stack; // valor de lo que trae en el stack rinLlanta
print("%d", t30);
// Asignando atributo valorCarro
+, p, 0, t31; //pos this 
=>, t31, t32, stack; // apuntador al heap
=>, t32, t33, heap; // apuntador donde inicia el objeto
+, t33, 2, t34; // pos real  de valorCarro
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t35; // pos de rinLlanta
=>, t35, t36, stack; // valor de lo que trae en el stack rinLlanta
<=, t34, t36, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t37;// pos this de lla1
=>, t37, t38, stack; //apuntador del heap de lla1
=>, t38, t39, heap; //posicion real del heap donde inicia lla1
+, t39, 1, t40; //pos real del atributo lla1
<=, t40, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t41;
=>, t41, t42, stack; //apuntador al heap de lla1
=>, t42, t43, heap; //posicion real donde incia el objeto lla1
+, t43, 1, t44; // pos real donde incial el objeto lla1

+, p, 4, t45; // tamanho de la funcion actual carro_vacio_carro_caracter_entero
+, t45, 0, t46; // pos del this para la nueva instancia de lla1
<=, t46, t44, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t47; // size de funcion actual
+, t47, 1, t48; //pos del parametro 1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t49; // pos de rinLlanta
=>, t49, t50, stack; // valor de lo que trae en el stack rinLlanta
*, t50, 2, t51;
<=, t48, t51, stack; // asignado al stack el parametro
+, p, 4, t52; // size de funcion actual
+, t52, 2, t53; //pos del parametro 2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t54; // pos de rinLlanta
=>, t54, t55, stack; // valor de lo que trae en el stack rinLlanta
*, t55, 3, t56;
<=, t53, t56, stack; // asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 4, p; // regresando al ambito acutal

print("%c", 77);
// Resolviendo un acceso para un atrinuto
+, P, 0, t57; 
=>, t57, t58, stack; // apuntador al heap
=>, t58, t59, heap;
+, t59, 1, t61; 
=>, t61, t62, heap; // recuperando pos incial del objeto
+, t62, 0, t61;
=>, t61, t63, heap; // valor a retoranar del acceso
print("%d", t63);
// Resolviendo un acceso para un atrinuto
+, P, 0, t64; 
=>, t64, t65, stack; // apuntador al heap
=>, t65, t66, heap;
+, t66, 1, t68; 
=>, t68, t69, heap; // recuperando pos incial del objeto
+, t69, 0, t68;
=>, t68, t70, heap; // valor a retoranar del acceso
=>, t68, t71, heap; //obtenidoe el valor la vairable 
*, t71, 8, t72;
<=, t68, t72, heap; // asignando vairble  
// Resolviendo un acceso para un atrinuto
+, P, 0, t73; 
=>, t73, t74, stack; // apuntador al heap
=>, t74, t75, heap;
+, t75, 1, t77; 
=>, t77, t78, heap; // recuperando pos incial del objeto
+, t78, 0, t77;
=>, t77, t79, heap; // valor a retoranar del acceso
print("%d", t79);

L4:
end, , carro_vacio_carro_caracter_entero




begin, , , carro_caracter_obtenerNombreCarro

// ------------------------ Creando arreglo local h
+, P, 1, t80; //pos de arreglo h
<=, t80, H, stack; // ingrensando al stack apunt del heap para h
+, H, 1, t81;
<=, H, t81, heap; //insetnado donde inicia el arreglo h
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t82; //calculando el n real
-, t82, 0, t83; //iReal columna 0
+, t83, 1, t83; //size del arreglo h
<=, H, t83, heap; // insertando el tamanio del arreglo linealizado h
+, H, 1, H;
+, h, t83, h; // reservnado el espacio del arreglo h
// Resolviendo una cadena 
+, H, 0, t84; //apuntaodr a cadena 
+, H, 1, t85; //apu donde inicia la cadena
<=, t84, t85, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 12, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t86; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 1, t89; // pos del arreglo 
=>, t89, t90, stack; //apuntador al heap del arreglo
=>, t90, t91, heap; // apuntador del heap al heap donde inicia la cadena
=>, t91, t87, heap; // size del arreglo h
+, t91, 1, t88; // pos 0 donde inicia el arreglo h
=>, t84, t92, heap; // pos que apunta al size de la cadena
=>, t92, t93, heap; // size de la cadena
+, t92, 1, t94; // Pos 0 de la cadena
=>, t94, t95, heap; // sacandor el caracter del heap cadena
jle, t93, t87, L6;
jmp, , , L7;
jmp, , , L6;
L6:
jne, t95, 34, L8;
jmp, , , L9;
jmp, , , L8;
L8:
<=, t88, t95, heap; // guardando el caracter 
+, t88, 1, t88; // incremnetnado la pos del arreglo
+, t94, 1, t94; // incrementando la pos de la cadena
=>, t94, t95, heap; // sacandor el caracter del heap cadena
jmp, , , L6;
jmp, , , L9;
L9:
jmp, , , L7;
L7:
+, P, 1, t96; // pos de arreglo h
=>, t96, t97, stack; // apunt al heap de arreglo h
=>, t97, t98, heap; //apunt al heap donde inicia el arreglo h
=>, t98, t99, heap; //obteniendo el tamanio del arreglo h
+, t98, 1, t100; // pos 0 del arreglo h
// ---- Calculo de valor de las posiciones  
// -----------(Obteniendo valor) Calculo de iReal para el arreglo h
-, 4, 0, t101; //calculando el n real ()
-, t101, 0, t102; //iReal columna 0
+, t100, t102, t103; // pos buscada del arreglo  h
=>, t103, t104, heap; //valor que trae el objeto
print("%c", t104);
// RESOLVIENDO UN RETORNO
+, P, 1, t105; // pos de arreglo h
=>, t105, t106, stack; // apunt al heap de arreglo h
=>, t106, t107, heap; //apunt al heap donde inicia el arreglo h
=>, t107, t108, heap; //obteniendo el tamanio del arreglo h
+, t107, 1, t109; // pos 0 del arreglo h
// ---- Calculo de valor de las posiciones  
// -----------(Obteniendo valor) Calculo de iReal para el arreglo h
-, 8, 0, t110; //calculando el n real ()
-, t110, 0, t111; //iReal columna 0
+, t109, t111, t112; // pos buscada del arreglo  h
=>, t112, t113, heap; //valor que trae el objeto
+, P, 2, t114; // pos de retorno de a funcion carro_caracter_obtenerNombreCarro
<=, t114, t113, stack; //asignando el retorno con su valor
jmp, , , L5;

L5:
end, , carro_caracter_obtenerNombreCarro




begin, , , carro_caracter_obtenerColor

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t115; // pos this 
=>, t115, t116, stack; // obtenido apuntador al heap 
=>, t116, t117, heap; // apuntador 
+, t117, 0, t118; // pos de col
=>, t118, t119, heap; // obtengo el valor que se encuentre en el heap 
+, P, 1, t120; // pos de retorno de a funcion carro_caracter_obtenerColor
<=, t120, t119, stack; //asignando el retorno con su valor
jmp, , , L10;

L10:
end, , carro_caracter_obtenerColor




begin, , , carro_entero_obtenerValor

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t121; // pos this 
=>, t121, t122, stack; // obtenido apuntador al heap 
=>, t122, t123, heap; // apuntador 
+, t123, 2, t124; // pos de valorCarro
=>, t124, t125, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t125);
print("%c", 76);
// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t126; // pos this 
=>, t126, t127, stack; // obtenido apuntador al heap 
=>, t127, t128, heap; // apuntador 
+, t128, 2, t129; // pos de valorCarro
=>, t129, t130, heap; // obtengo el valor que se encuentre en el heap 
*, t130, 5, t131;
+, P, 1, t132; // pos de retorno de a funcion carro_entero_obtenerValor
<=, t132, t131, stack; //asignando el retorno con su valor
jmp, , , L11;

L11:
end, , carro_entero_obtenerValor




begin, , , carro_vacio_carro_caracter

// Asignando atributo col
+, p, 0, t133; //pos this 
=>, t133, t134, stack; // apuntador al heap
=>, t134, t135, heap; // apuntador donde inicia el objeto
+, t135, 0, t136; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t137; // pos de n
=>, t137, t138, stack; // valor de lo que trae en el stack n
<=, t136, t138, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t139;// pos this de lla1
=>, t139, t140, stack; //apuntador del heap de lla1
=>, t140, t141, heap; //posicion real del heap donde inicia lla1
+, t141, 1, t142; //pos real del atributo lla1
<=, t142, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t143;
=>, t143, t144, stack; //apuntador al heap de lla1
=>, t144, t145, heap; //posicion real donde incia el objeto lla1
+, t145, 1, t146; // pos real donde incial el objeto lla1

+, p, 3, t147; // tamanho de la funcion actual carro_vacio_carro_caracter
+, t147, 0, t148; // pos del this para la nueva instancia de lla1
<=, t148, t146, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 3, t149; // size de funcion actual
+, t149, 1, t150; //pos del parametro 1
<=, t150, 10, stack; // asignado al stack el parametro
+, p, 3, t151; // size de funcion actual
+, t151, 2, t152; //pos del parametro 2
<=, t152, 20, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 3, p; // regresando al ambito acutal


L12:
end, , carro_vacio_carro_caracter




begin, , , carro_vacio_imprimir_Color

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t153; // pos this 
=>, t153, t154, stack; // obtenido apuntador al heap 
=>, t154, t155, heap; // apuntador 
+, t155, 0, t156; // pos de col
=>, t156, t157, heap; // obtengo el valor que se encuentre en el heap 
print("%c", t157);

L13:
end, , carro_vacio_imprimir_Color




begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t158; // pos de p1
<=, t158, h, stack; //guardando referencia del heap para el objeto p1
+, h, 1, t159; // guardo la posicion donde inicia el objeto 
<=, h, t159, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto p1
//Ingresando referencia al this del objeto p1
+, p, 0, t160; // pos de p1
=>, t160, t161, stack; // obteniendo apuntador de p1
+, p, 1, t162; // simulando cambio de ambito
+, t162, 0, t163; //pos del this de p1
<=, t163, t161, stack; // insertando apuntador del heap al stack del obeto p1
// Asignando parametros  
+, p, 1, t164; // size de funcion actual
+, t164, 1, t165; //pos del parametro 1
<=, t165, 25, stack; // asignado al stack el parametro
+, p, 1, t166; // size de funcion actual
+, t166, 2, t167; //pos del parametro 2
<=, t167, 80, stack; // asignado al stack el parametro
+, p, 1, p; // simulando cambio de ambito
call, , , persona_vacio_persona_entero_caracter;
-, p, 1, p; // regresando al ambito acutal


L14:
end, , persona_PRINCIPAL




begin, , , persona_vacio_molestar

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t168; // pos this 
=>, t168, t169, stack; // obtenido apuntador al heap 
=>, t169, t170, heap; // apuntador 
+, t170, 0, t171; // pos de edad
=>, t171, t172, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t172);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t173; // pos de a
<=, t173, 189, stack; // asignando a a
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t174; // pos de a
=>, t174, t175, stack; // valor de lo que trae en el stack a
print("%d", t175);
// RESOLVIENDO UN RETORNO
jmp, , , L15;
print("%c", 84);

L15:
end, , persona_vacio_molestar




begin, , , persona_carro_obtenerCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t176; // pos de c
<=, t176, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t177; // guardo la posicion donde inicia el objeto 
<=, h, t177, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t178; // pos de c
=>, t178, t179, stack; // obteniendo apuntador de c
+, p, 3, t180; // simulando cambio de ambito
+, t180, 0, t181; //pos del this de c
<=, t181, t179, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t182; // size de funcion actual
+, t182, 1, t183; //pos del parametro 1
<=, t183, 72, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t184; // pos de c
=>, t184, t185, stack; // valor de lo que trae en el stack c
+, P, 2, t186; // pos de retorno de a funcion persona_carro_obtenerCarro
<=, t186, t185, stack; //asignando el retorno con su valor
jmp, , , L16;

L16:
end, , persona_carro_obtenerCarro




begin, , , persona_entero_obtenernUmero

// RESOLVIENDO UN RETORNO
*, 5, 8, t187;
+, P, 1, t188; // pos de retorno de a funcion persona_entero_obtenernUmero
<=, t188, t187, stack; //asignando el retorno con su valor
jmp, , , L17;

L17:
end, , persona_entero_obtenernUmero




begin, , , persona_vacio_persona_entero_caracter

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t189; //pos this del arreglo
=>, t189, t190, stack; //obteniendo apuntador de arreglo en eel heap
=>, t190, t191, heap;//apuntando donde en verdad inicia el arreglo
+, t191, 2, t192; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t192, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t193; //calculando el n real
-, t193, 0, t194; //iReal columna 0
+, t194, 1, t194; //size del arreglo nombre
<=, H, t194, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t194, 0, t195; // anhadiendo una posicion mas
+, h, t195, h; // reservnado el espacio del arreglo nombre
+, P, 0, t198; // pos this del objeto 
=>, t198, t199, stack; // apuntador al heap del objeto 
=>, t199, t200, heap; // apunt al heap donde inica el objeto
+, t200, 2, t201; //apuntador a posicion donde incia el arreglo
=>, t201, t202, heap; // inicia el arreglo
=>, t202, t196, heap; // size del arreglo nombre
+, t202, 1, t197; //Pos 0 del arreglo
// Resolviendo una cadena 
+, H, 0, t203; //apuntaodr a cadena 
+, H, 1, t204; //apu donde inicia la cadena
<=, t203, t204, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 20, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t205; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 80, heap; //guardadndo P
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 85, heap; //guardadndo U
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
=>, t203, t206, heap; // pos que apunta al size de la cadena
=>, t206, t207, heap; // size de la cadena
+, t206, 1, t208; // Pos 0 de la cadena
=>, t208, t209, heap; // sacandor el caracter del heap cadena
jle, t207, t196, L19;
jmp, , , L20;
jmp, , , L19;
L19:
jne, t209, 34, L21;
jmp, , , L22;
jmp, , , L21;
L21:
<=, t197, t209, heap; // guardando el caracter 
+, t197, 1, t197; // incremnetnado la pos del arreglo
+, t208, 1, t208; // incrementando la pos de la cadena
=>, t208, t209, heap; // sacandor el caracter del heap cadena
jmp, , , L19;
jmp, , , L22;
L22:
jmp, , , L20;
L20:
// Asignando atributo edad
+, p, 0, t210; //pos this 
=>, t210, t211, stack; // apuntador al heap
=>, t211, t212, heap; // apuntador donde inicia el objeto
+, t212, 0, t213; // pos real  de edad
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t214; // pos de val
=>, t214, t215, stack; // valor de lo que trae en el stack val
<=, t213, t215, heap; //guardando en el heap el valor del atributo
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t216; // pos this 
=>, t216, t217, stack; // obtenido apuntador al heap 
=>, t217, t218, heap; // apuntador 
+, t218, 0, t219; // pos de edad
=>, t219, t220, heap; // obtengo el valor que se encuentre en el heap 
+, t220, 10, t221;
print("%d", t221);
// ----------- Instancia a un atributo --------------
+, p, 0, t222;// pos this de car
=>, t222, t223, stack; //apuntador del heap de car
=>, t223, t224, heap; //posicion real del heap donde inicia car
+, t224, 1, t225; //pos real del atributo car
<=, t225, h, heap; //guardando la pos real donde inicia el objeto car
+, h, 3, h; // reservando el espacio de memoria para el nuevo objeto car

// Guardando la referencia al this del objeto para la llamada al constructor car
+, p, 0, t226;
=>, t226, t227, stack; //apuntador al heap de car
=>, t227, t228, heap; //posicion real donde incia el objeto car
+, t228, 1, t229; // pos real donde incial el objeto car

+, p, 7, t230; // tamanho de la funcion actual persona_vacio_persona_entero_caracter
+, t230, 0, t231; // pos del this para la nueva instancia de car
<=, t231, t229, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 7, t232; // size de funcion actual
+, t232, 1, t233; //pos del parametro 1
<=, t233, 70, stack; // asignado al stack el parametro
+, p, 7, t234; // size de funcion actual
+, t234, 2, t235; //pos del parametro 2
<=, t235, 126, stack; // asignado al stack el parametro
+, p, 7, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter_entero;
-, p, 7, p; // regresando al ambito acutal

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t236; // pos de color
// Resolviendo un acceso para un atrinuto
+, P, 0, t237; 
=>, t237, t238, stack; // apuntador al heap
=>, t238, t239, heap;
+, t239, 1, t241; 
+, P, 2, t242;
+, t242, 0, t243;
<=, t243, t241, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , carro_caracter_obtenerColor;
+, P, 1, t244;
=>, t244, t245, stack; // valor del return
-, P, 2, P;
=>, t244, t246, stack; // valor a retoranar del acceso
<=, t236, t246, stack; // asignando a color
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t247; // pos de color
=>, t247, t248, stack; // valor de lo que trae en el stack color
print("%c", t248);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t249; // pos de i
<=, t249, 0, stack; // asignando a i
// Resolviendo un repetur mientras
jmp, , ,L23; //regresando a la etiqueral del ciclo repetir- mientras
L23:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t250; // pos de i
=>, t250, t251, stack; // valor de lo que trae en el stack i
// Resolviendo un acceso para un atrinuto
+, P, 0, t252; 
=>, t252, t253, stack; // apuntador al heap
=>, t253, t254, heap;
+, t254, 2, t256; 
=>, t256, t257, heap; // recuperando pos incial del objeto
=>, t257, t258, heap; // obteneindio el size del arreglo 
jl, t251, t258, L24;
jmp, , , L25;
L24:

//------------- Asignancio posicion de un arreglo Atributo  nombre
+, P, 0, t260; // pos this del objeto 
=>, t260, t261, stack; // apunt del heap para le objeto
=>, t261, t262, heap; // apunt donde inicia el objeto
+, t262, 2, t259; // pos del arreglo dentro del heap 
=>, t259, t263, heap; // apuntador donde inicia el arreglo
=>, t263, t264, heap; // size del arreglo nombre
+, t263, 1, t265; //pos 0 del arreglo nombre
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t266; // pos de i
=>, t266, t267, stack; // valor de lo que trae en el stack i
// ----------- Calculo de iReal para el arreglo nombre
-, t267, 0, t268; //calculando el n real ()
-, t268, 0, t269; //iReal columna 0
+, t265, t269, t270; // pos buscade del arreglo atributo nombre
=>, t270, t271, heap; //valor que trae el objeto
print("%c", t271);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t272; // pos de i
=>, t272, t273, stack; //obtenidoe el valor de i
+, t273, 1, t274;
<=, t272, t274, stack; // asignando a i
jmp, , ,L23; //regresando a la etiqueral del ciclo repetir mientras
L25:

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 5, t275; // pos de g
+, P, 0, t276;
=>, t276, t277, stack; 
+, P, 7, t278;
+, t277, 0, t279;
<=, t278, t277, stack; 
+, P, 7, P;
call, , , persona_caracter_obtenerChar;
+, P, 1, t280;
=>, t280, t281, stack; // valor del return
-, P, 7, P;
<=, t275, t281, stack; // asignando a g
// -------------- Resolviendo para un ID (var local) ------------
+, p, 5, t282; // pos de g
=>, t282, t283, stack; // valor de lo que trae en el stack g
print("%c", t283);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t284; // pos this 
=>, t284, t285, stack; // obtenido apuntador al heap 
=>, t285, t286, heap; // apuntador 
+, t286, 0, t287; // pos de edad
=>, t287, t288, heap; // obtengo el valor que se encuentre en el heap 
*, 1024, 2, t289;
<=, t287, t289, HEAP; // asignando variable 
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t290; // pos this 
=>, t290, t291, stack; // obtenido apuntador al heap 
=>, t291, t292, heap; // apuntador 
+, t292, 0, t293; // pos de edad
=>, t293, t294, heap; // obtengo el valor que se encuentre en el heap 
=>, t293, t295, HEAP; //obtenidoe el valor la vairable 
*, t295, 3, t296;
<=, t293, t296, HEAP; // asignando vairble  
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t297; // pos this 
=>, t297, t298, stack; // obtenido apuntador al heap 
=>, t298, t299, heap; // apuntador 
+, t299, 0, t300; // pos de edad
=>, t300, t301, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t301);
print("%c", 69);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t302; // pos this 
=>, t302, t303, stack; // obtenido apuntador al heap 
=>, t303, t304, heap; // apuntador 
+, t304, 0, t305; // pos de edad
=>, t305, t306, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t306);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t307; // pos this 
=>, t307, t308, stack; // obtenido apuntador al heap 
=>, t308, t309, heap; // apuntador 
+, t309, 0, t310; // pos de edad
=>, t310, t311, heap; // obtengo el valor que se encuentre en el heap 
-, t311, 1, t312;
<=, t310, t312, HEAP; // asignando operaicon con unario
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t313; // pos this 
=>, t313, t314, stack; // obtenido apuntador al heap 
=>, t314, t315, heap; // apuntador 
+, t315, 0, t316; // pos de edad
=>, t316, t317, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t317);
print("%c", 67);
// Resolviendo un acceso para un atrinuto
+, P, 0, t318; 
=>, t318, t319, stack; // apuntador al heap
=>, t319, t320, heap;
+, t320, 1, t322; 
=>, t322, t323, heap; // recuperando pos incial del objeto
+, t323, 2, t322;
=>, t322, t324, heap; // valor a retoranar del acceso
print("%d", t324);
// Resolviendo un acceso para un atrinuto
+, P, 0, t325; 
=>, t325, t326, stack; // apuntador al heap
=>, t326, t327, heap;
+, t327, 1, t329; 
=>, t329, t330, heap; // recuperando pos incial del objeto
+, t330, 2, t329;
=>, t329, t331, heap; // valor a retoranar del acceso
-, t331, 1, t332;
<=, t329, t332, heap; // asignando operaicon con unario
// Resolviendo un acceso para un atrinuto
+, P, 0, t333; 
=>, t333, t334, stack; // apuntador al heap
=>, t334, t335, heap;
+, t335, 1, t337; 
=>, t337, t338, heap; // recuperando pos incial del objeto
+, t338, 2, t337;
=>, t337, t339, heap; // valor a retoranar del acceso
print("%d", t339);
print("%c", 76);
// Resolviendo un acceso para un atrinuto
+, P, 0, t340; 
=>, t340, t341, stack; // apuntador al heap
=>, t341, t342, heap;
+, t342, 1, t344; 
=>, t344, t345, heap; // recuperando pos incial del objeto
+, t345, 1, t344;
=>, t344, t346, heap; // recuperando pos incial del objeto
+, t346, 0, t344;
=>, t344, t347, heap; // valor a retoranar del acceso
print("%d", t347);
// Resolviendo un acceso para un atrinuto
+, P, 0, t348; 
=>, t348, t349, stack; // apuntador al heap
=>, t349, t350, heap;
+, t350, 1, t352; 
=>, t352, t353, heap; // recuperando pos incial del objeto
+, t353, 1, t352;
=>, t352, t354, heap; // recuperando pos incial del objeto
+, t354, 0, t352;
=>, t352, t355, heap; // valor a retoranar del acceso
-, t355, 1, t356;
<=, t352, t356, heap; // asignando operaicon con unario
// Resolviendo un acceso para un atrinuto
+, P, 0, t357; 
=>, t357, t358, stack; // apuntador al heap
=>, t358, t359, heap;
+, t359, 1, t361; 
=>, t361, t362, heap; // recuperando pos incial del objeto
+, t362, 1, t361;
=>, t361, t363, heap; // recuperando pos incial del objeto
+, t363, 0, t361;
=>, t361, t364, heap; // valor a retoranar del acceso
print("%d", t364);
// Resolviendo un acceso para un atrinuto
+, P, 0, t365; 
=>, t365, t366, stack; // apuntador al heap
=>, t366, t367, heap;
+, t367, 1, t369; 
=>, t369, t370, heap; // recuperando pos incial del objeto
+, t370, 1, t369;
=>, t369, t371, heap; // recuperando pos incial del objeto
+, t371, 0, t369;
=>, t369, t372, heap; // valor a retoranar del acceso
print("%d", t372);

L18:
end, , persona_vacio_persona_entero_caracter




begin, , , persona_caracter_obtenerChar

// RESOLVIENDO UN RETORNO
+, P, 1, t373; // pos de retorno de a funcion persona_caracter_obtenerChar
<=, t373, 75, stack; //asignando el retorno con su valor
jmp, , , L26;

L26:
end, , persona_caracter_obtenerChar




begin, , , persona_carro_retornoCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t374; // pos de c
<=, t374, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t375; // guardo la posicion donde inicia el objeto 
<=, h, t375, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t376; // pos de c
=>, t376, t377, stack; // obteniendo apuntador de c
+, p, 3, t378; // simulando cambio de ambito
+, t378, 0, t379; //pos del this de c
<=, t379, t377, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t380; // size de funcion actual
+, t380, 1, t381; //pos del parametro 1
<=, t381, 82, stack; // asignado al stack el parametro
+, 5, 5, t384;
*, t384, 2, t385;
+, p, 3, t382; // size de funcion actual
+, t382, 2, t383; //pos del parametro 2
<=, t383, t385, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter_entero;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t386; // pos de c
=>, t386, t387, stack; // valor de lo que trae en el stack c
+, P, 2, t388; // pos de retorno de a funcion persona_carro_retornoCarro
<=, t388, t387, stack; //asignando el retorno con su valor
jmp, , , L27;

L27:
end, , persona_carro_retornoCarro




begin, , , persona_entero_incrementarEdad

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t389; // pos this 
=>, t389, t390, stack; // obtenido apuntador al heap 
=>, t390, t391, heap; // apuntador 
+, t391, 0, t392; // pos de edad
=>, t392, t393, heap; // obtengo el valor que se encuentre en el heap 
+, t393, 1, t394;
+, P, 1, t395; // pos de retorno de a funcion persona_entero_incrementarEdad
<=, t395, t394, stack; //asignando el retorno con su valor
jmp, , , L28;

L28:
end, , persona_entero_incrementarEdad


