

begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t1; // pos de p
<=, t1, h, stack; //guardando referencia del heap para el objeto p
+, h, 1, t2; // guardo la posicion donde inicia el objeto 
<=, h, t2, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 1, h; // reservando espacio para el objeto p
//Ingresando referencia al this del objeto p
+, p, 0, t3; // pos de p
=>, t3, t4, stack; // obteniendo apuntador de p
+, p, 1, t5; // simulando cambio de ambito
+, t5, 0, t6; //pos del this de p
<=, t6, t4, stack; // insertando apuntador del heap al stack del obeto p
// No posee parametros 
+, p, 1, p; // simulando cambio de ambito
call, , , persona_vacio_persona;
-, p, 1, p; // regresando al ambito acutal


end, , persona_PRINCIPAL




begin, , , persona_vacio_persona

// ---------------- Creando un puntero atributp nulo ---------
+, P, 0, t7;// pos del this
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; 
+, t9, 0, t10; // pos donde inicia el puntero
<=, t10, H, heap; // guarandod pntero donde inicia el puntero 
<=, H, 110, heap; //guardano una n de null en el heap
+, H, 1, H; // incrementando uno en h
<=, H, 12500, heap; // guarando una posicion que no existe indica nulo
+, H, 1, H; // incrementando uno en h
// ---------- Fin decla de puntero -------------
// Asignar un posicion del arreglo 
// Asignar un posicion del arreglo 
print("%c", 122);

end, , persona_vacio_persona


