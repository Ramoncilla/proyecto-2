

begin, , , llanta_vacio_llanta_entero_entero

// Asignando atributo valor1Llanta
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val1
=>, t5, t6, stack; // valor de lo que trae en el stack val1
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2Llanta
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t11; // pos de val2
=>, t11, t12, stack; // valor de lo que trae en el stack val2
<=, t10, t12, heap; //guardando en el heap el valor del atributo

L1:
end, , llanta_vacio_llanta_entero_entero




begin, , , llanta_vacio_mostrarVAlor1

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t13; // pos this 
=>, t13, t14, stack; // obtenido apuntador al heap 
=>, t14, t15, heap; // apuntador 
+, t15, 0, t16; // pos de valor1Llanta
=>, t16, t17, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t17);

L2:
end, , llanta_vacio_mostrarVAlor1




begin, , , llanta_vacio_mostrarVAlor2

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t18; // pos this 
=>, t18, t19, stack; // obtenido apuntador al heap 
=>, t19, t20, heap; // apuntador 
+, t20, 1, t21; // pos de valor2Llanta
=>, t21, t22, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t22);

L3:
end, , llanta_vacio_mostrarVAlor2




begin, , , carro_vacio_carro_caracter_entero

// Asignando atributo col
+, p, 0, t23; //pos this 
=>, t23, t24, stack; // apuntador al heap
=>, t24, t25, heap; // apuntador donde inicia el objeto
+, t25, 0, t26; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t27; // pos de color
=>, t27, t28, stack; // valor de lo que trae en el stack color
<=, t26, t28, heap; //guardando en el heap el valor del atributo
print("%c", 89);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t29; // pos de rinLlanta
=>, t29, t30, stack; // valor de lo que trae en el stack rinLlanta
print("%d", t30);
// Asignando atributo valorCarro
+, p, 0, t31; //pos this 
=>, t31, t32, stack; // apuntador al heap
=>, t32, t33, heap; // apuntador donde inicia el objeto
+, t33, 2, t34; // pos real  de valorCarro
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t35; // pos de rinLlanta
=>, t35, t36, stack; // valor de lo que trae en el stack rinLlanta
<=, t34, t36, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t37;// pos this de lla1
=>, t37, t38, stack; //apuntador del heap de lla1
=>, t38, t39, heap; //posicion real del heap donde inicia lla1
+, t39, 1, t40; //pos real del atributo lla1
<=, t40, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t41;
=>, t41, t42, stack; //apuntador al heap de lla1
=>, t42, t43, heap; //posicion real donde incia el objeto lla1
+, t43, 1, t44; // pos real donde incial el objeto lla1

+, p, 4, t45; // tamanho de la funcion actual carro_vacio_carro_caracter_entero
+, t45, 0, t46; // pos del this para la nueva instancia de lla1
<=, t46, t44, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t47; // size de funcion actual
+, t47, 1, t48; //pos del parametro 1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t49; // pos de rinLlanta
=>, t49, t50, stack; // valor de lo que trae en el stack rinLlanta
*, t50, 2, t51;
<=, t48, t51, stack; // asignado al stack el parametro
+, p, 4, t52; // size de funcion actual
+, t52, 2, t53; //pos del parametro 2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t54; // pos de rinLlanta
=>, t54, t55, stack; // valor de lo que trae en el stack rinLlanta
*, t55, 3, t56;
<=, t53, t56, stack; // asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 4, p; // regresando al ambito acutal


L4:
end, , carro_vacio_carro_caracter_entero




begin, , , carro_vacio_carro_caracter

// Asignando atributo col
+, p, 0, t57; //pos this 
=>, t57, t58, stack; // apuntador al heap
=>, t58, t59, heap; // apuntador donde inicia el objeto
+, t59, 0, t60; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t61; // pos de n
=>, t61, t62, stack; // valor de lo que trae en el stack n
<=, t60, t62, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t63;// pos this de lla1
=>, t63, t64, stack; //apuntador del heap de lla1
=>, t64, t65, heap; //posicion real del heap donde inicia lla1
+, t65, 1, t66; //pos real del atributo lla1
<=, t66, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t67;
=>, t67, t68, stack; //apuntador al heap de lla1
=>, t68, t69, heap; //posicion real donde incia el objeto lla1
+, t69, 1, t70; // pos real donde incial el objeto lla1

+, p, 3, t71; // tamanho de la funcion actual carro_vacio_carro_caracter
+, t71, 0, t72; // pos del this para la nueva instancia de lla1
<=, t72, t70, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 3, t73; // size de funcion actual
+, t73, 1, t74; //pos del parametro 1
<=, t74, 10, stack; // asignado al stack el parametro
+, p, 3, t75; // size de funcion actual
+, t75, 2, t76; //pos del parametro 2
<=, t76, 20, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 3, p; // regresando al ambito acutal


L5:
end, , carro_vacio_carro_caracter




begin, , , carro_caracter_obtenerColor

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t77; // pos this 
=>, t77, t78, stack; // obtenido apuntador al heap 
=>, t78, t79, heap; // apuntador 
+, t79, 0, t80; // pos de col
=>, t80, t81, heap; // obtengo el valor que se encuentre en el heap 
+, P, 1, t82; // pos de retorno de a funcion carro_caracter_obtenerColor
<=, t82, t81, stack; //asignando el retorno con su valor
jmp, , , L6;

L6:
end, , carro_caracter_obtenerColor




begin, , , carro_vacio_imprimir_Color

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t83; // pos this 
=>, t83, t84, stack; // obtenido apuntador al heap 
=>, t84, t85, heap; // apuntador 
+, t85, 0, t86; // pos de col
=>, t86, t87, heap; // obtengo el valor que se encuentre en el heap 
print("%c", t87);

L7:
end, , carro_vacio_imprimir_Color




begin, , , persona_PRINCIPAL

// ----------------  Inicio Repetir Contando ----------------------
 // ------------------ Inicio ciclo repetir contando -----------------
+, P, 0, t88; // pos de i
<=, t88, 10, stack; // asignando con el valor de desde la vairable i
=>, t88, t89, stack; // obteniendo el valor de  desde i
jne, t89, 20, L9;
jmp, , , L10;
L9:
jl, t89, 20, L11;
jmp, , , L12;
L11:
+, 1, 0, t90;
jmp, , , L13;
L12:
+, -1, 0, t90;
jmp, , , L13;
L13:
-, 20, t89, t91;
*, t91, t90, t91;
+, 0, 0, t92; // iniciando la viairrble pivote del ciclo repetir contando
L14:
jle, t92, t91, L15;
jmp, , , L16;
L15:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t93; // pos de i
=>, t93, t94, stack; // valor de lo que trae en el stack i
je, t94, 13, L20;
jmp, , , L21;
L20:

jmp, , , L17; // haciendo un continuar 
jmp, , , L19; // salida del if
L21:

L19:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t95; // pos de i
=>, t95, t96, stack; // valor de lo que trae en el stack i
je, t96, 18, L23;
jmp, , , L24;
L23:

jmp, , , L18; // haciendo un romper 
jmp, , , L22; // salida del if
L24:

L22:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t97; // pos de i
=>, t97, t98, stack; // valor de lo que trae en el stack i
print("%d", t98);
L17:
+, t89, t90, t89; // nuevo valor de la variable del ciclo i
+, t92, 1, t92;
<=, t88, t89, stack; // asignando a i
jmp, , , L14;
L16:
L10:
L18:
 // ------------------ Fin ciclo repetir contando-----------------
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t99; // pos de i
<=, t99, 8, stack; // asignando a i
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t100; // pos de c
<=, t100, 0, stack; // asignando a c
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t101; // pos de i
=>, t101, t102, stack; // valor de lo que trae en el stack i
 // ------------------ Inicio ciclo contador -----------------
+, 0, 0, t103; // variable de control para el ciclo contador
jg, t102, 0, L25;
jmp, , , L26;
L25:
jl, t103, t102, L27;
jmp, , , L28;
L27:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t104; // pos de c
=>, t104, t105, stack; // valor de lo que trae en el stack c
print("%d", t105);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t106; // pos de c
=>, t106, t107, stack; //obtenidoe el valor de c
+, t107, 1, t108;
<=, t106, t108, stack; // asignando a c
L29:
+, t103, 1, t103; // incrementando en uno la vairable del ciclo contador
jmp, , , L25; // retornando al ciclo continuar
L28:
L26:
L30:
 // ------------------ Fin ciclo contador -----------------

L8:
end, , persona_PRINCIPAL




begin, , , persona_vacio_molestar

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t109; // pos this 
=>, t109, t110, stack; // obtenido apuntador al heap 
=>, t110, t111, heap; // apuntador 
+, t111, 0, t112; // pos de edad
=>, t112, t113, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t113);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t114; // pos de a
<=, t114, 189, stack; // asignando a a
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t115; // pos de a
=>, t115, t116, stack; // valor de lo que trae en el stack a
print("%d", t116);
// RESOLVIENDO UN RETORNO
jmp, , , L31;
print("%c", 84);

L31:
end, , persona_vacio_molestar




begin, , , persona_carro_obtenerCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t117; // pos de c
<=, t117, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t118; // guardo la posicion donde inicia el objeto 
<=, h, t118, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t119; // pos de c
=>, t119, t120, stack; // obteniendo apuntador de c
+, p, 3, t121; // simulando cambio de ambito
+, t121, 0, t122; //pos del this de c
<=, t122, t120, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t123; // size de funcion actual
+, t123, 1, t124; //pos del parametro 1
<=, t124, 72, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t125; // pos de c
=>, t125, t126, stack; // valor de lo que trae en el stack c
+, P, 2, t127; // pos de retorno de a funcion persona_carro_obtenerCarro
<=, t127, t126, stack; //asignando el retorno con su valor
jmp, , , L32;

L32:
end, , persona_carro_obtenerCarro




begin, , , persona_entero_obtenernUmero

// RESOLVIENDO UN RETORNO
*, 5, 8, t128;
+, P, 1, t129; // pos de retorno de a funcion persona_entero_obtenernUmero
<=, t129, t128, stack; //asignando el retorno con su valor
jmp, , , L33;

L33:
end, , persona_entero_obtenernUmero




begin, , , persona_vacio_persona_entero_caracter

// Asignando atributo edad
+, p, 0, t130; //pos this 
=>, t130, t131, stack; // apuntador al heap
=>, t131, t132, heap; // apuntador donde inicia el objeto
+, t132, 0, t133; // pos real  de edad
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t134; // pos de val
=>, t134, t135, stack; // valor de lo que trae en el stack val
<=, t133, t135, heap; //guardando en el heap el valor del atributo

L34:
end, , persona_vacio_persona_entero_caracter




begin, , , persona_caracter_obtenerChar

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t136; // pos de c
<=, t136, 85, stack; // asignando a c
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t137; // pos de c
=>, t137, t138, stack; // valor de lo que trae en el stack c
print("%c", t138);
// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t139; // pos de c
=>, t139, t140, stack; // valor de lo que trae en el stack c
+, P, 2, t141; // pos de retorno de a funcion persona_caracter_obtenerChar
<=, t141, t140, stack; //asignando el retorno con su valor
jmp, , , L35;
print("%c", 65);
print("%c", 65);

L35:
end, , persona_caracter_obtenerChar


