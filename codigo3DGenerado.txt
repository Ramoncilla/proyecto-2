

begin, , , llanta_vacio_llanta_entero_entero

// Asignando atributo valor1Llanta
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val1
=>, t5, t6, stack; // valor de lo que trae en el stack val1
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2Llanta
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t11; // pos de val2
=>, t11, t12, stack; // valor de lo que trae en el stack val2
<=, t10, t12, heap; //guardando en el heap el valor del atributo

L1:
end, , llanta_vacio_llanta_entero_entero




begin, , , llanta_vacio_mostrarVAlor1

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t13; // pos this 
=>, t13, t14, stack; // obtenido apuntador al heap 
=>, t14, t15, heap; // apuntador 
+, t15, 0, t16; // pos de valor1Llanta
=>, t16, t17, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t17);

L2:
end, , llanta_vacio_mostrarVAlor1




begin, , , llanta_vacio_mostrarVAlor2

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t18; // pos this 
=>, t18, t19, stack; // obtenido apuntador al heap 
=>, t19, t20, heap; // apuntador 
+, t20, 1, t21; // pos de valor2Llanta
=>, t21, t22, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t22);

L3:
end, , llanta_vacio_mostrarVAlor2




begin, , , carro_vacio_carro_caracter_entero

// Asignando atributo col
+, p, 0, t23; //pos this 
=>, t23, t24, stack; // apuntador al heap
=>, t24, t25, heap; // apuntador donde inicia el objeto
+, t25, 0, t26; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t27; // pos de color
=>, t27, t28, stack; // valor de lo que trae en el stack color
<=, t26, t28, heap; //guardando en el heap el valor del atributo
print("%c", 89);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t29; // pos de rinLlanta
=>, t29, t30, stack; // valor de lo que trae en el stack rinLlanta
print("%d", t30);
// Asignando atributo valorCarro
+, p, 0, t31; //pos this 
=>, t31, t32, stack; // apuntador al heap
=>, t32, t33, heap; // apuntador donde inicia el objeto
+, t33, 2, t34; // pos real  de valorCarro
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t35; // pos de rinLlanta
=>, t35, t36, stack; // valor de lo que trae en el stack rinLlanta
<=, t34, t36, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t37;// pos this de lla1
=>, t37, t38, stack; //apuntador del heap de lla1
=>, t38, t39, heap; //posicion real del heap donde inicia lla1
+, t39, 1, t40; //pos real del atributo lla1
<=, t40, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t41;
=>, t41, t42, stack; //apuntador al heap de lla1
=>, t42, t43, heap; //posicion real donde incia el objeto lla1
+, t43, 1, t44; // pos real donde incial el objeto lla1

+, p, 4, t45; // tamanho de la funcion actual carro_vacio_carro_caracter_entero
+, t45, 0, t46; // pos del this para la nueva instancia de lla1
<=, t46, t44, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t47; // size de funcion actual
+, t47, 1, t48; //pos del parametro 1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t49; // pos de rinLlanta
=>, t49, t50, stack; // valor de lo que trae en el stack rinLlanta
*, t50, 2, t51;
<=, t48, t51, stack; // asignado al stack el parametro
+, p, 4, t52; // size de funcion actual
+, t52, 2, t53; //pos del parametro 2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t54; // pos de rinLlanta
=>, t54, t55, stack; // valor de lo que trae en el stack rinLlanta
*, t55, 3, t56;
<=, t53, t56, stack; // asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 4, p; // regresando al ambito acutal

print("%c", 77);
// Resolviendo un acceso para un atrinuto
+, P, 0, t57; 
=>, t57, t58, stack; // apuntador al heap
=>, t58, t59, heap;
+, t59, 1, t61; 
=>, t61, t62, heap; // recuperando pos incial del objeto
+, t62, 0, t61;
=>, t61, t63, heap; // valor a retoranar del acceso
print("%d", t63);
// Resolviendo un acceso para un atrinuto
+, P, 0, t64; 
=>, t64, t65, stack; // apuntador al heap
=>, t65, t66, heap;
+, t66, 1, t68; 
=>, t68, t69, heap; // recuperando pos incial del objeto
+, t69, 0, t68;
=>, t68, t70, heap; // valor a retoranar del acceso
=>, t68, t71, heap; //obtenidoe el valor la vairable 
*, t71, 8, t72;
<=, t68, t72, heap; // asignando vairble  
// Resolviendo un acceso para un atrinuto
+, P, 0, t73; 
=>, t73, t74, stack; // apuntador al heap
=>, t74, t75, heap;
+, t75, 1, t77; 
=>, t77, t78, heap; // recuperando pos incial del objeto
+, t78, 0, t77;
=>, t77, t79, heap; // valor a retoranar del acceso
print("%d", t79);

L4:
end, , carro_vacio_carro_caracter_entero




begin, , , carro_caracter_obtenerNombreCarro

// ------------------------ Creando arreglo local h
+, P, 1, t80; //pos de arreglo h
<=, t80, H, stack; // ingrensando al stack apunt del heap para h
+, H, 1, t81;
<=, H, t81, heap; //insetnado donde inicia el arreglo h
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t82; //calculando el n real
-, t82, 0, t83; //iReal columna 0
+, t83, 1, t83; //size del arreglo h
<=, H, t83, heap; // insertando el tamanio del arreglo linealizado h
+, H, 1, H;
+, h, t83, h; // reservnado el espacio del arreglo h
// Resolviendo una cadena 
+, H, 0, t84; //apuntaodr a cadena 
+, H, 1, t85; //apu donde inicia la cadena
<=, t84, t85, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 12, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t86; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 1, t89; // pos del arreglo 
=>, t89, t90, stack; //apuntador al heap del arreglo
=>, t90, t91, heap; // apuntador del heap al heap donde inicia la cadena
=>, t91, t87, heap; // size del arreglo h
+, t91, 1, t88; // pos 0 donde inicia el arreglo h
=>, t84, t92, heap; // pos que apunta al size de la cadena
=>, t92, t93, heap; // size de la cadena
+, t92, 1, t94; // Pos 0 de la cadena
=>, t94, t95, heap; // sacandor el caracter del heap cadena
jle, t93, t87, L6;
jmp, , , L7;
jmp, , , L6;
L6:
jne, t95, 34, L8;
jmp, , , L9;
jmp, , , L8;
L8:
<=, t88, t95, heap; // guardando el caracter 
+, t88, 1, t88; // incremnetnado la pos del arreglo
+, t94, 1, t94; // incrementando la pos de la cadena
=>, t94, t95, heap; // sacandor el caracter del heap cadena
jmp, , , L6;
jmp, , , L9;
L9:
jmp, , , L7;
L7:
+, P, 1, t96; // pos de arreglo h
=>, t96, t97, stack; // apunt al heap de arreglo h
=>, t97, t98, heap; //apunt al heap donde inicia el arreglo h
=>, t98, t99, heap; //obteniendo el tamanio del arreglo h
+, t98, 1, t100; // pos 0 del arreglo h
// ---- Calculo de valor de las posiciones  
// -----------(Obteniendo valor) Calculo de iReal para el arreglo h
-, 4, 0, t101; //calculando el n real ()
-, t101, 0, t102; //iReal columna 0
+, t100, t102, t103; // pos buscada del arreglo  h
=>, t103, t104, heap; //valor que trae el objeto
print("%c", t104);
// RESOLVIENDO UN RETORNO
+, P, 1, t105; // pos de arreglo h
=>, t105, t106, stack; // apunt al heap de arreglo h
=>, t106, t107, heap; //apunt al heap donde inicia el arreglo h
=>, t107, t108, heap; //obteniendo el tamanio del arreglo h
+, t107, 1, t109; // pos 0 del arreglo h
// ---- Calculo de valor de las posiciones  
// -----------(Obteniendo valor) Calculo de iReal para el arreglo h
-, 8, 0, t110; //calculando el n real ()
-, t110, 0, t111; //iReal columna 0
+, t109, t111, t112; // pos buscada del arreglo  h
=>, t112, t113, heap; //valor que trae el objeto
+, P, 2, t114; // pos de retorno de a funcion carro_caracter_obtenerNombreCarro
<=, t114, t113, stack; //asignando el retorno con su valor
jmp, , , L5;

L5:
end, , carro_caracter_obtenerNombreCarro




begin, , , carro_caracter_obtenerColor

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t115; // pos this 
=>, t115, t116, stack; // obtenido apuntador al heap 
=>, t116, t117, heap; // apuntador 
+, t117, 0, t118; // pos de col
=>, t118, t119, heap; // obtengo el valor que se encuentre en el heap 
+, P, 1, t120; // pos de retorno de a funcion carro_caracter_obtenerColor
<=, t120, t119, stack; //asignando el retorno con su valor
jmp, , , L10;

L10:
end, , carro_caracter_obtenerColor




begin, , , carro_entero_obtenerValor

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t121; // pos this 
=>, t121, t122, stack; // obtenido apuntador al heap 
=>, t122, t123, heap; // apuntador 
+, t123, 2, t124; // pos de valorCarro
=>, t124, t125, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t125);
print("%c", 76);
// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t126; // pos this 
=>, t126, t127, stack; // obtenido apuntador al heap 
=>, t127, t128, heap; // apuntador 
+, t128, 2, t129; // pos de valorCarro
=>, t129, t130, heap; // obtengo el valor que se encuentre en el heap 
*, t130, 5, t131;
+, P, 1, t132; // pos de retorno de a funcion carro_entero_obtenerValor
<=, t132, t131, stack; //asignando el retorno con su valor
jmp, , , L11;

L11:
end, , carro_entero_obtenerValor




begin, , , carro_vacio_carro_caracter

// Asignando atributo col
+, p, 0, t133; //pos this 
=>, t133, t134, stack; // apuntador al heap
=>, t134, t135, heap; // apuntador donde inicia el objeto
+, t135, 0, t136; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t137; // pos de n
=>, t137, t138, stack; // valor de lo que trae en el stack n
<=, t136, t138, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t139;// pos this de lla1
=>, t139, t140, stack; //apuntador del heap de lla1
=>, t140, t141, heap; //posicion real del heap donde inicia lla1
+, t141, 1, t142; //pos real del atributo lla1
<=, t142, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t143;
=>, t143, t144, stack; //apuntador al heap de lla1
=>, t144, t145, heap; //posicion real donde incia el objeto lla1
+, t145, 1, t146; // pos real donde incial el objeto lla1

+, p, 3, t147; // tamanho de la funcion actual carro_vacio_carro_caracter
+, t147, 0, t148; // pos del this para la nueva instancia de lla1
<=, t148, t146, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 3, t149; // size de funcion actual
+, t149, 1, t150; //pos del parametro 1
<=, t150, 10, stack; // asignado al stack el parametro
+, p, 3, t151; // size de funcion actual
+, t151, 2, t152; //pos del parametro 2
<=, t152, 20, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 3, p; // regresando al ambito acutal


L12:
end, , carro_vacio_carro_caracter




begin, , , carro_vacio_imprimir_Color

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t153; // pos this 
=>, t153, t154, stack; // obtenido apuntador al heap 
=>, t154, t155, heap; // apuntador 
+, t155, 0, t156; // pos de col
=>, t156, t157, heap; // obtengo el valor que se encuentre en el heap 
print("%c", t157);

L13:
end, , carro_vacio_imprimir_Color




begin, , , persona_PRINCIPAL

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 0, t158; // pos de a
*, 50, -1, t159;
<=, t158, t159, stack; // asignando a a
*, 25, -1, t160;
print("%d", t160);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t161; // pos de a
=>, t161, t162, stack; // valor de lo que trae en el stack a
print("%d", t162);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t163; // pos de a
=>, t163, t164, stack; // valor de lo que trae en el stack a
+, t164, 1, t165;
print("%d", t165);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t166; // pos de a
=>, t166, t167, stack; // valor de lo que trae en el stack a
-, t167, 1, t168;
print("%d", t168);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t169; // pos de a
=>, t169, t170, stack; // valor de lo que trae en el stack a
+, t170, 1, t171;
<=, t169, t171, STACK; // asignando operaicon con unario
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t172; // pos de a
=>, t172, t173, stack; // valor de lo que trae en el stack a
print("%d", t173);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t174; // pos de a
=>, t174, t175, stack; // valor de lo que trae en el stack a
-, t175, 1, t176;
<=, t174, t176, STACK; // asignando operaicon con unario
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t177; // pos de a
=>, t177, t178, stack; // valor de lo que trae en el stack a
print("%d", t178);
// ----------- Instancia a una variable local --------------
+, p, 1, t179; // pos de p1
<=, t179, h, stack; //guardando referencia del heap para el objeto p1
+, h, 1, t180; // guardo la posicion donde inicia el objeto 
<=, h, t180, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto p1
//Ingresando referencia al this del objeto p1
+, p, 1, t181; // pos de p1
=>, t181, t182, stack; // obteniendo apuntador de p1
+, p, 2, t183; // simulando cambio de ambito
+, t183, 0, t184; //pos del this de p1
<=, t184, t182, stack; // insertando apuntador del heap al stack del obeto p1
// Asignando parametros  
+, p, 2, t185; // size de funcion actual
+, t185, 1, t186; //pos del parametro 1
<=, t186, 25, stack; // asignado al stack el parametro
+, p, 2, t187; // size de funcion actual
+, t187, 2, t188; //pos del parametro 2
<=, t188, 80, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , persona_vacio_persona_entero_caracter;
-, p, 2, p; // regresando al ambito acutal

print("%c", 72);
// ----------------- Resolviendo acceso local 
+, P, 1, t189; // pos del objeto
=>, t189, t191, stack; //apuntador al heap del obejto
=>, t191, t192, heap; // recuperando pos incial del objeto
+, t192, 1, t191;
=>, t191, t193, heap; // recuperando pos incial del objeto
+, t193, 1, t191;
=>, t191, t194, heap; // recuperando pos incial del objeto
+, t194, 0, t191;
=>, t191, t195, heap; // valor a retoranar del acceso
print("%d", t195);
// ----------------- Resolviendo acceso local 
+, P, 1, t196; // pos del objeto
=>, t196, t198, stack; //apuntador al heap del obejto
=>, t198, t199, heap; // recuperando pos incial del objeto
+, t199, 1, t198;
=>, t198, t200, heap; // recuperando pos incial del objeto
+, t200, 1, t198;
=>, t198, t201, heap; // recuperando pos incial del objeto
+, t201, 0, t198;
=>, t198, t202, heap; // valor a retoranar del acceso
+, t202, 1, t203;
print("%d", t203);
// ----------------- Resolviendo acceso local 
+, P, 1, t204; // pos del objeto
=>, t204, t206, stack; //apuntador al heap del obejto
=>, t206, t207, heap; // recuperando pos incial del objeto
+, t207, 1, t206;
=>, t206, t208, heap; // recuperando pos incial del objeto
+, t208, 1, t206;
=>, t206, t209, heap; // recuperando pos incial del objeto
+, t209, 0, t206;
=>, t206, t210, heap; // valor a retoranar del acceso
-, t210, 1, t211;
print("%d", t211);
// ----------------- Resolviendo acceso local 
+, P, 1, t212; // pos del objeto
=>, t212, t214, stack; //apuntador al heap del obejto
=>, t214, t215, heap; // recuperando pos incial del objeto
+, t215, 1, t214;
=>, t214, t216, heap; // recuperando pos incial del objeto
+, t216, 1, t214;
=>, t214, t217, heap; // recuperando pos incial del objeto
+, t217, 0, t214;
=>, t214, t218, heap; // valor a retoranar del acceso
print("%d", t218);

L14:
end, , persona_PRINCIPAL




begin, , , persona_vacio_molestar

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t219; // pos this 
=>, t219, t220, stack; // obtenido apuntador al heap 
=>, t220, t221, heap; // apuntador 
+, t221, 0, t222; // pos de edad
=>, t222, t223, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t223);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t224; // pos de a
<=, t224, 189, stack; // asignando a a
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t225; // pos de a
=>, t225, t226, stack; // valor de lo que trae en el stack a
print("%d", t226);
// RESOLVIENDO UN RETORNO
jmp, , , L15;
print("%c", 84);

L15:
end, , persona_vacio_molestar




begin, , , persona_carro_obtenerCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t227; // pos de c
<=, t227, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t228; // guardo la posicion donde inicia el objeto 
<=, h, t228, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t229; // pos de c
=>, t229, t230, stack; // obteniendo apuntador de c
+, p, 3, t231; // simulando cambio de ambito
+, t231, 0, t232; //pos del this de c
<=, t232, t230, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t233; // size de funcion actual
+, t233, 1, t234; //pos del parametro 1
<=, t234, 72, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t235; // pos de c
=>, t235, t236, stack; // valor de lo que trae en el stack c
+, P, 2, t237; // pos de retorno de a funcion persona_carro_obtenerCarro
<=, t237, t236, stack; //asignando el retorno con su valor
jmp, , , L16;

L16:
end, , persona_carro_obtenerCarro




begin, , , persona_entero_obtenernUmero

// RESOLVIENDO UN RETORNO
*, 5, 8, t238;
+, P, 1, t239; // pos de retorno de a funcion persona_entero_obtenernUmero
<=, t239, t238, stack; //asignando el retorno con su valor
jmp, , , L17;

L17:
end, , persona_entero_obtenernUmero




begin, , , persona_vacio_persona_entero_caracter

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t240; //pos this del arreglo
=>, t240, t241, stack; //obteniendo apuntador de arreglo en eel heap
=>, t241, t242, heap;//apuntando donde en verdad inicia el arreglo
+, t242, 2, t243; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t243, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t244; //calculando el n real
-, t244, 0, t245; //iReal columna 0
+, t245, 1, t245; //size del arreglo nombre
<=, H, t245, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t245, 0, t246; // anhadiendo una posicion mas
+, h, t246, h; // reservnado el espacio del arreglo nombre
+, P, 0, t249; // pos this del objeto 
=>, t249, t250, stack; // apuntador al heap del objeto 
=>, t250, t251, heap; // apunt al heap donde inica el objeto
+, t251, 2, t252; //apuntador a posicion donde incia el arreglo
=>, t252, t253, heap; // inicia el arreglo
=>, t253, t247, heap; // size del arreglo nombre
+, t253, 1, t248; //Pos 0 del arreglo
// Resolviendo una cadena 
+, H, 0, t254; //apuntaodr a cadena 
+, H, 1, t255; //apu donde inicia la cadena
<=, t254, t255, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 20, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t256; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 80, heap; //guardadndo P
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 85, heap; //guardadndo U
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
=>, t254, t257, heap; // pos que apunta al size de la cadena
=>, t257, t258, heap; // size de la cadena
+, t257, 1, t259; // Pos 0 de la cadena
=>, t259, t260, heap; // sacandor el caracter del heap cadena
jle, t258, t247, L19;
jmp, , , L20;
jmp, , , L19;
L19:
jne, t260, 34, L21;
jmp, , , L22;
jmp, , , L21;
L21:
<=, t248, t260, heap; // guardando el caracter 
+, t248, 1, t248; // incremnetnado la pos del arreglo
+, t259, 1, t259; // incrementando la pos de la cadena
=>, t259, t260, heap; // sacandor el caracter del heap cadena
jmp, , , L19;
jmp, , , L22;
L22:
jmp, , , L20;
L20:
// Asignando atributo edad
+, p, 0, t261; //pos this 
=>, t261, t262, stack; // apuntador al heap
=>, t262, t263, heap; // apuntador donde inicia el objeto
+, t263, 0, t264; // pos real  de edad
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t265; // pos de val
=>, t265, t266, stack; // valor de lo que trae en el stack val
<=, t264, t266, heap; //guardando en el heap el valor del atributo
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t267; // pos this 
=>, t267, t268, stack; // obtenido apuntador al heap 
=>, t268, t269, heap; // apuntador 
+, t269, 0, t270; // pos de edad
=>, t270, t271, heap; // obtengo el valor que se encuentre en el heap 
+, t271, 10, t272;
print("%d", t272);
// ----------- Instancia a un atributo --------------
+, p, 0, t273;// pos this de car
=>, t273, t274, stack; //apuntador del heap de car
=>, t274, t275, heap; //posicion real del heap donde inicia car
+, t275, 1, t276; //pos real del atributo car
<=, t276, h, heap; //guardando la pos real donde inicia el objeto car
+, h, 3, h; // reservando el espacio de memoria para el nuevo objeto car

// Guardando la referencia al this del objeto para la llamada al constructor car
+, p, 0, t277;
=>, t277, t278, stack; //apuntador al heap de car
=>, t278, t279, heap; //posicion real donde incia el objeto car
+, t279, 1, t280; // pos real donde incial el objeto car

+, p, 7, t281; // tamanho de la funcion actual persona_vacio_persona_entero_caracter
+, t281, 0, t282; // pos del this para la nueva instancia de car
<=, t282, t280, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 7, t283; // size de funcion actual
+, t283, 1, t284; //pos del parametro 1
<=, t284, 70, stack; // asignado al stack el parametro
+, p, 7, t285; // size de funcion actual
+, t285, 2, t286; //pos del parametro 2
<=, t286, 126, stack; // asignado al stack el parametro
+, p, 7, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter_entero;
-, p, 7, p; // regresando al ambito acutal

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t287; // pos de color
// Resolviendo un acceso para un atrinuto
+, P, 0, t288; 
=>, t288, t289, stack; // apuntador al heap
=>, t289, t290, heap;
+, t290, 1, t292; 
+, P, 2, t293;
+, t293, 0, t294;
<=, t294, t292, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , carro_caracter_obtenerColor;
+, P, 1, t295;
=>, t295, t296, stack; // valor del return
-, P, 2, P;
=>, t295, t297, stack; // valor a retoranar del acceso
<=, t287, t297, stack; // asignando a color
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t298; // pos de color
=>, t298, t299, stack; // valor de lo que trae en el stack color
print("%c", t299);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t300; // pos de i
<=, t300, 0, stack; // asignando a i
// Resolviendo un repetur mientras
jmp, , ,L23; //regresando a la etiqueral del ciclo repetir- mientras
L23:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t301; // pos de i
=>, t301, t302, stack; // valor de lo que trae en el stack i
// Resolviendo un acceso para un atrinuto
+, P, 0, t303; 
=>, t303, t304, stack; // apuntador al heap
=>, t304, t305, heap;
+, t305, 2, t307; 
=>, t307, t308, heap; // recuperando pos incial del objeto
=>, t308, t309, heap; // obteneindio el size del arreglo 
jl, t302, t309, L24;
jmp, , , L25;
L24:

//------------- Asignancio posicion de un arreglo Atributo  nombre
+, P, 0, t311; // pos this del objeto 
=>, t311, t312, stack; // apunt del heap para le objeto
=>, t312, t313, heap; // apunt donde inicia el objeto
+, t313, 2, t310; // pos del arreglo dentro del heap 
=>, t310, t314, heap; // apuntador donde inicia el arreglo
=>, t314, t315, heap; // size del arreglo nombre
+, t314, 1, t316; //pos 0 del arreglo nombre
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t317; // pos de i
=>, t317, t318, stack; // valor de lo que trae en el stack i
// ----------- Calculo de iReal para el arreglo nombre
-, t318, 0, t319; //calculando el n real ()
-, t319, 0, t320; //iReal columna 0
+, t316, t320, t321; // pos buscade del arreglo atributo nombre
=>, t321, t322, heap; //valor que trae el objeto
print("%c", t322);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t323; // pos de i
=>, t323, t324, stack; //obtenidoe el valor de i
+, t324, 1, t325;
<=, t323, t325, stack; // asignando a i
jmp, , ,L23; //regresando a la etiqueral del ciclo repetir mientras
L25:

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 5, t326; // pos de g
+, P, 0, t327;
=>, t327, t328, stack; 
+, P, 7, t329;
+, t328, 0, t330;
<=, t329, t328, stack; 
+, P, 7, P;
call, , , persona_caracter_obtenerChar;
+, P, 1, t331;
=>, t331, t332, stack; // valor del return
-, P, 7, P;
<=, t326, t332, stack; // asignando a g
// -------------- Resolviendo para un ID (var local) ------------
+, p, 5, t333; // pos de g
=>, t333, t334, stack; // valor de lo que trae en el stack g
print("%c", t334);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t335; // pos this 
=>, t335, t336, stack; // obtenido apuntador al heap 
=>, t336, t337, heap; // apuntador 
+, t337, 0, t338; // pos de edad
=>, t338, t339, heap; // obtengo el valor que se encuentre en el heap 
*, 1024, 2, t340;
<=, t338, t340, HEAP; // asignando variable 
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t341; // pos this 
=>, t341, t342, stack; // obtenido apuntador al heap 
=>, t342, t343, heap; // apuntador 
+, t343, 0, t344; // pos de edad
=>, t344, t345, heap; // obtengo el valor que se encuentre en el heap 
=>, t344, t346, HEAP; //obtenidoe el valor la vairable 
*, t346, 3, t347;
<=, t344, t347, HEAP; // asignando vairble  
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t348; // pos this 
=>, t348, t349, stack; // obtenido apuntador al heap 
=>, t349, t350, heap; // apuntador 
+, t350, 0, t351; // pos de edad
=>, t351, t352, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t352);
print("%c", 69);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t353; // pos this 
=>, t353, t354, stack; // obtenido apuntador al heap 
=>, t354, t355, heap; // apuntador 
+, t355, 0, t356; // pos de edad
=>, t356, t357, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t357);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t358; // pos this 
=>, t358, t359, stack; // obtenido apuntador al heap 
=>, t359, t360, heap; // apuntador 
+, t360, 0, t361; // pos de edad
=>, t361, t362, heap; // obtengo el valor que se encuentre en el heap 
-, t362, 1, t363;
<=, t361, t363, HEAP; // asignando operaicon con unario
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t364; // pos this 
=>, t364, t365, stack; // obtenido apuntador al heap 
=>, t365, t366, heap; // apuntador 
+, t366, 0, t367; // pos de edad
=>, t367, t368, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t368);
print("%c", 67);
// Resolviendo un acceso para un atrinuto
+, P, 0, t369; 
=>, t369, t370, stack; // apuntador al heap
=>, t370, t371, heap;
+, t371, 1, t373; 
=>, t373, t374, heap; // recuperando pos incial del objeto
+, t374, 2, t373;
=>, t373, t375, heap; // valor a retoranar del acceso
print("%d", t375);
// Resolviendo un acceso para un atrinuto
+, P, 0, t376; 
=>, t376, t377, stack; // apuntador al heap
=>, t377, t378, heap;
+, t378, 1, t380; 
=>, t380, t381, heap; // recuperando pos incial del objeto
+, t381, 2, t380;
=>, t380, t382, heap; // valor a retoranar del acceso
-, t382, 1, t383;
<=, t380, t383, heap; // asignando operaicon con unario
// Resolviendo un acceso para un atrinuto
+, P, 0, t384; 
=>, t384, t385, stack; // apuntador al heap
=>, t385, t386, heap;
+, t386, 1, t388; 
=>, t388, t389, heap; // recuperando pos incial del objeto
+, t389, 2, t388;
=>, t388, t390, heap; // valor a retoranar del acceso
print("%d", t390);
print("%c", 76);
// Resolviendo un acceso para un atrinuto
+, P, 0, t391; 
=>, t391, t392, stack; // apuntador al heap
=>, t392, t393, heap;
+, t393, 1, t395; 
=>, t395, t396, heap; // recuperando pos incial del objeto
+, t396, 1, t395;
=>, t395, t397, heap; // recuperando pos incial del objeto
+, t397, 0, t395;
=>, t395, t398, heap; // valor a retoranar del acceso
print("%d", t398);
// Resolviendo un acceso para un atrinuto
+, P, 0, t399; 
=>, t399, t400, stack; // apuntador al heap
=>, t400, t401, heap;
+, t401, 1, t403; 
=>, t403, t404, heap; // recuperando pos incial del objeto
+, t404, 1, t403;
=>, t403, t405, heap; // recuperando pos incial del objeto
+, t405, 0, t403;
=>, t403, t406, heap; // valor a retoranar del acceso
-, t406, 1, t407;
<=, t403, t407, heap; // asignando operaicon con unario
// Resolviendo un acceso para un atrinuto
+, P, 0, t408; 
=>, t408, t409, stack; // apuntador al heap
=>, t409, t410, heap;
+, t410, 1, t412; 
=>, t412, t413, heap; // recuperando pos incial del objeto
+, t413, 1, t412;
=>, t412, t414, heap; // recuperando pos incial del objeto
+, t414, 0, t412;
=>, t412, t415, heap; // valor a retoranar del acceso
print("%d", t415);
// Resolviendo un acceso para un atrinuto
+, P, 0, t416; 
=>, t416, t417, stack; // apuntador al heap
=>, t417, t418, heap;
+, t418, 1, t420; 
=>, t420, t421, heap; // recuperando pos incial del objeto
+, t421, 1, t420;
=>, t420, t422, heap; // recuperando pos incial del objeto
+, t422, 0, t420;
=>, t420, t423, heap; // valor a retoranar del acceso
print("%d", t423);

L18:
end, , persona_vacio_persona_entero_caracter




begin, , , persona_caracter_obtenerChar

// RESOLVIENDO UN RETORNO
+, P, 1, t424; // pos de retorno de a funcion persona_caracter_obtenerChar
<=, t424, 75, stack; //asignando el retorno con su valor
jmp, , , L26;

L26:
end, , persona_caracter_obtenerChar




begin, , , persona_carro_retornoCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t425; // pos de c
<=, t425, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t426; // guardo la posicion donde inicia el objeto 
<=, h, t426, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t427; // pos de c
=>, t427, t428, stack; // obteniendo apuntador de c
+, p, 3, t429; // simulando cambio de ambito
+, t429, 0, t430; //pos del this de c
<=, t430, t428, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t431; // size de funcion actual
+, t431, 1, t432; //pos del parametro 1
<=, t432, 82, stack; // asignado al stack el parametro
+, 5, 5, t435;
*, t435, 2, t436;
+, p, 3, t433; // size de funcion actual
+, t433, 2, t434; //pos del parametro 2
<=, t434, t436, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter_entero;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t437; // pos de c
=>, t437, t438, stack; // valor de lo que trae en el stack c
+, P, 2, t439; // pos de retorno de a funcion persona_carro_retornoCarro
<=, t439, t438, stack; //asignando el retorno con su valor
jmp, , , L27;

L27:
end, , persona_carro_retornoCarro




begin, , , persona_entero_incrementarEdad

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t440; // pos this 
=>, t440, t441, stack; // obtenido apuntador al heap 
=>, t441, t442, heap; // apuntador 
+, t442, 0, t443; // pos de edad
=>, t443, t444, heap; // obtengo el valor que se encuentre en el heap 
+, t444, 1, t445;
+, P, 1, t446; // pos de retorno de a funcion persona_entero_incrementarEdad
<=, t446, t445, stack; //asignando el retorno con su valor
jmp, , , L28;

L28:
end, , persona_entero_incrementarEdad


