

begin, , , persona_PRINCIPAL

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 0, t1; // pos de i
<=, t1, 0, stack; // asignando a i
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t2; // pos de A
<=, t2, 1, stack; // asignando a A
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t3; // pos de B
<=, t3, 1, stack; // asignando a B
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t4; // pos de C
<=, t4, 1, stack; // asignando a C
// Resolviendo un repetur mientras
jmp, , ,L1; //regresando a la etiqueral del ciclo repetir- mientras
L1:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de A
=>, t5, t6, stack; // valor de lo que trae en el stack A
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t7; // pos de B
=>, t7, t8, stack; // valor de lo que trae en el stack B
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t9; // pos de A
=>, t9, t10, stack; // valor de lo que trae en el stack A
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t11; // pos de C
=>, t11, t12, stack; // valor de lo que trae en el stack C
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t13; // pos de A
=>, t13, t14, stack; // valor de lo que trae en el stack A
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t15; // pos de C
=>, t15, t16, stack; // valor de lo que trae en el stack C
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t17; // pos de B
=>, t17, t18, stack; // valor de lo que trae en el stack B
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t19; // pos de C
=>, t19, t20, stack; // valor de lo que trae en el stack C
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t21; // pos de B
=>, t21, t22, stack; // valor de lo que trae en el stack B
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t23; // pos de A
=>, t23, t24, stack; // valor de lo que trae en el stack A
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t25; // pos de C
=>, t25, t26, stack; // valor de lo que trae en el stack C
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t27; // pos de A
=>, t27, t28, stack; // valor de lo que trae en el stack A
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t29; // pos de i
=>, t29, t30, stack; // valor de lo que trae en el stack i
je, 1, t6, L2; 
jmp, , , L3;

L3:

je, 1, t8, L4; 
jmp, , , L5;


L2:
L4:

je, 1, t10, L6; 
jmp, , , L7;

L7:

je, 1, t12, L8; 
jmp, , , L9;



L6:
L9:

je, 1, t14, L12; 
jmp, , , L13;

L12:

je, 1, t16, L10; 
jmp, , , L11;



L5:
L8:
L11:

+, 1, 0, t31;
jmp, , , L29;
L13:
L10:

+, 0, 0, t31;
jmp, , , L29;
jmp, , , L29;
L29:
je, 1, t18, L14; 
jmp, , , L15;

L15:

je, 1, t20, L18; 
jmp, , , L19;

L19:

je, 1, t22, L16; 
jmp, , , L17;



L14:
L16:

je, 1, t24, L24; 
jmp, , , L25;

L24:

je, 1, t26, L20; 
jmp, , , L21;

L21:

je, 1, t28, L22; 
jmp, , , L23;




L20:
L23:

jl, t30, 1, L26;
jmp, , , L27;

L26:

+, 1, 0, t32;
jmp, , , L30;
L18:
L17:
L25:
L22:
L27:

+, 0, 0, t32;
jmp, , , L30;
jmp, , , L30;
L30:
jne, t31, t32, L31;jmp, , , L32;
L31:

print("%c", 90);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 0, t33; // pos de i
=>, t33, t34, stack; //obtenidoe el valor de i
+, t34, 1, t35;
<=, t33, t35, stack; // asignando a i
jmp, , ,L1; //regresando a la etiqueral del ciclo repetir mientras
L32:


end, , persona_PRINCIPAL


