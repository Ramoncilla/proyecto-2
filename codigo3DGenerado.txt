

begin, , , llanta_vacio_llanta_entero

// Asignando atributo valor1
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val
=>, t5, t6, stack; // valor de lo que trae en el stack val
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t11; // pos de val
=>, t11, t12, stack; // valor de lo que trae en el stack val
*, t12, 10, t13;
<=, t10, t13, heap; //guardando en el heap el valor del atributo

end, , llanta_vacio_llanta_entero




begin, , , llanta_vacio_getValor1


end, , llanta_vacio_getValor1




begin, , , carro_vacio_carro

// ----------- Instancia a un atributo --------------
+, p, 0, t14;// pos this de repuesto
=>, t14, t15, stack; //apuntador del heap de repuesto
=>, t15, t16, heap; //posicion real del heap donde inicia repuesto
+, t16, 4, t17; //pos real del atributo repuesto
<=, t17, h, heap; //guardando la pos real donde inicia el objeto repuesto
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto repuesto

// Guardando la referencia al this del objeto para la llamada al constructor repuesto
+, p, 0, t18;
=>, t18, t19, stack; //apuntador al heap de repuesto
=>, t19, t20, heap; //posicion real donde incia el objeto repuesto
+, t20, 4, t21; // pos real donde incial el objeto repuesto

+, p, t21, t22; // tamanho de la funcion actual carro_vacio_carro
+, t22, 0, t23; // pos del this para la nueva instancia de repuesto
<=, t23, t21, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t24; // size de funcion actual
+, t24, 1, t25; //pos del parametro 1
<=, t25, 15, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t26;// pos this de lla1
=>, t26, t27, stack; //apuntador del heap de lla1
=>, t27, t28, heap; //posicion real del heap donde inicia lla1
+, t28, 0, t29; //pos real del atributo lla1
<=, t29, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t30;
=>, t30, t31, stack; //apuntador al heap de lla1
=>, t31, t32, heap; //posicion real donde incia el objeto lla1
+, t32, 0, t33; // pos real donde incial el objeto lla1

+, p, t33, t34; // tamanho de la funcion actual carro_vacio_carro
+, t34, 0, t35; // pos del this para la nueva instancia de lla1
<=, t35, t33, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t36; // size de funcion actual
+, t36, 1, t37; //pos del parametro 1
<=, t37, 1, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t38;// pos this de lla2
=>, t38, t39, stack; //apuntador del heap de lla2
=>, t39, t40, heap; //posicion real del heap donde inicia lla2
+, t40, 1, t41; //pos real del atributo lla2
<=, t41, h, heap; //guardando la pos real donde inicia el objeto lla2
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla2

// Guardando la referencia al this del objeto para la llamada al constructor lla2
+, p, 0, t42;
=>, t42, t43, stack; //apuntador al heap de lla2
=>, t43, t44, heap; //posicion real donde incia el objeto lla2
+, t44, 1, t45; // pos real donde incial el objeto lla2

+, p, t45, t46; // tamanho de la funcion actual carro_vacio_carro
+, t46, 0, t47; // pos del this para la nueva instancia de lla2
<=, t47, t45, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t48; // size de funcion actual
+, t48, 1, t49; //pos del parametro 1
<=, t49, 2, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t50;// pos this de lla3
=>, t50, t51, stack; //apuntador del heap de lla3
=>, t51, t52, heap; //posicion real del heap donde inicia lla3
+, t52, 2, t53; //pos real del atributo lla3
<=, t53, h, heap; //guardando la pos real donde inicia el objeto lla3
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla3

// Guardando la referencia al this del objeto para la llamada al constructor lla3
+, p, 0, t54;
=>, t54, t55, stack; //apuntador al heap de lla3
=>, t55, t56, heap; //posicion real donde incia el objeto lla3
+, t56, 2, t57; // pos real donde incial el objeto lla3

+, p, t57, t58; // tamanho de la funcion actual carro_vacio_carro
+, t58, 0, t59; // pos del this para la nueva instancia de lla3
<=, t59, t57, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t60; // size de funcion actual
+, t60, 1, t61; //pos del parametro 1
<=, t61, 3, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t62;// pos this de lla4
=>, t62, t63, stack; //apuntador del heap de lla4
=>, t63, t64, heap; //posicion real del heap donde inicia lla4
+, t64, 3, t65; //pos real del atributo lla4
<=, t65, h, heap; //guardando la pos real donde inicia el objeto lla4
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla4

// Guardando la referencia al this del objeto para la llamada al constructor lla4
+, p, 0, t66;
=>, t66, t67, stack; //apuntador al heap de lla4
=>, t67, t68, heap; //posicion real donde incia el objeto lla4
+, t68, 3, t69; // pos real donde incial el objeto lla4

+, p, t69, t70; // tamanho de la funcion actual carro_vacio_carro
+, t70, 0, t71; // pos del this para la nueva instancia de lla4
<=, t71, t69, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t72; // size de funcion actual
+, t72, 1, t73; //pos del parametro 1
<=, t73, 4, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// Asignando atributo color
+, p, 0, t74; //pos this 
=>, t74, t75, stack; // apuntador al heap
=>, t75, t76, heap; // apuntador donde inicia el objeto
+, t76, 5, t77; // pos real  de color
<=, t77, 11, heap; //guardando en el heap el valor del atributo

end, , carro_vacio_carro





begin, , , persona_PRINCIPAL

// ------------------------ Creando arreglo local apellido
+, P, 0, t78; //pos de arreglo apellido
<=, t78, H, stack; // ingrensando al stack apunt del heap para apellido
+, H, 1, t79;
<=, H, t79, heap; //insetnado donde inicia el arreglo apellido
+, H, 1, H;
// calculando el tamanho del arreglo
*, 2, 5, t80;
+, t80, 1, t81;
*, 3, 3, t82;
*, 2, 1, t83;
-, t81, 1, t84; //calculando el n real
-, t84, 0, t85; //iReal columna 0
-, t82, 1, t86; //calculando el n real
*, t85, t82, t87;// multiplicando por n1
+, t87, t86, t88;
-, t88, 0, t89; //i real de columna 1
-, t83, 1, t90; //calculando el n real
*, t89, t83, t91;// multiplicando por n2
+, t91, t90, t92;
-, t92, 0, t93; //i real de columna 2
<=, H, t93, heap; // insertando el tamanio del arreglo linealizado apellido
+, H, 1, H;
+, h, t93, h; // reservnado el espacio del arreglo apellido

end, , persona_PRINCIPAL




begin, , , persona_vacio_persona_entero_entero

// Asignando atributo edad
+, p, 0, t95; //Pos del this del objeto persona
=>, t95, t96, stack; // obteniendo el apuntador  del heap 
=>, t96, t97, heap;// recupenrado del heap el apuntdor al heap de donde inicia el objeto
+, t97, 0, t98; // obteniendo la posicion real del atributo edad
*, 25, 2, t99;
<=, t98, t99, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t100;// pos this de c
=>, t100, t101, stack; //apuntador del heap de c
=>, t101, t102, heap; //posicion real del heap donde inicia c
+, t102, 2, t103; //pos real del atributo c
<=, t103, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t104;
=>, t104, t105, stack; //apuntador al heap de c
=>, t105, t106, heap; //posicion real donde incia el objeto c
+, t106, 2, t107; // pos real donde incial el objeto c

+, p, t107, t108; // tamanho de la funcion actual persona_vacio_persona_entero_entero
+, t108, 0, t109; // pos del this para la nueva instancia de c
<=, t109, t107, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 4, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 4, p; // regresando al ambito acutal


end, , persona_vacio_persona_entero_entero




begin, , , persona_vacio_persona

// Asignando atributo edad
+, p, 0, t110; //Pos del this del objeto persona
=>, t110, t111, stack; // obteniendo el apuntador  del heap 
=>, t111, t112, heap;// recupenrado del heap el apuntdor al heap de donde inicia el objeto
+, t112, 0, t113; // obteniendo la posicion real del atributo edad
*, 25, 2, t114;
<=, t113, t114, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t115;// pos this de c
=>, t115, t116, stack; //apuntador del heap de c
=>, t116, t117, heap; //posicion real del heap donde inicia c
+, t117, 2, t118; //pos real del atributo c
<=, t118, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t119;
=>, t119, t120, stack; //apuntador al heap de c
=>, t120, t121, heap; //posicion real donde incia el objeto c
+, t121, 2, t122; // pos real donde incial el objeto c

+, p, t122, t123; // tamanho de la funcion actual persona_vacio_persona
+, t123, 0, t124; // pos del this para la nueva instancia de c
<=, t124, t122, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 6, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 6, p; // regresando al ambito acutal

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t125; // pos this 
=>, t125, t126, stack; // obtenido apuntador al heap 
=>, t126, t127, heap; // apuntador 
+, t127, 0, t128; // pos de edad
=>, t128, t129, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t129);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t130; // pos de pedrito
<=, t130, 2, stack; // asignando a pedrito
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t132; // pos de alina
*, 2, 2, t134;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t135; // pos de pedrito
=>, t135, t136, stack; // valor de lo que trae en el stack pedrito
-, t134, t136, t137;
<=, t132, t137, stack; // asignando a alina
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t138; // pos de pedrito
=>, t138, t139, stack; // valor de lo que trae en el stack pedrito
print("%d", t139);
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t140; // pos de alina
=>, t140, t141, stack; // valor de lo que trae en el stack alina
print("%d", t141);
// ----------- Instancia a una variable local --------------
+, p, 1, t142; // pos de p1
<=, t142, h, stack; //guardando referencia del heap para el objeto p1
+, h, 1, t143; // guardo la posicion donde inicia el objeto 
<=, h, t143, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 3, h; // reservando espacio para el objeto p1
//Ingresando referencia al this del objeto p1
+, p, 1, t144; // pos de p1
=>, t144, t145, stack; // obteniendo apuntador de p1
+, p, 6, t146; // simulando cambio de ambito
+, t146, 0, t147; //pos del this de p1
<=, t147, t145, stack; // insertando apuntador del heap al stack del obeto p1
// No posee parametros 
+, p, 6, p; // simulando cambio de ambito
call, , , persona_vacio_persona;
-, p, 6, p; // regresando al ambito acutal


end, , persona_vacio_persona


