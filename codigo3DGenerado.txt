

begin, , , llanta_vacio_llanta_entero_entero

// Asignando atributo valor1Llanta
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val1
=>, t5, t6, stack; // valor de lo que trae en el stack val1
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2Llanta
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2Llanta
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t11; // pos de val2
=>, t11, t12, stack; // valor de lo que trae en el stack val2
<=, t10, t12, heap; //guardando en el heap el valor del atributo

end, , llanta_vacio_llanta_entero_entero




begin, , , llanta_vacio_mostrarVAlor1

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t13; // pos this 
=>, t13, t14, stack; // obtenido apuntador al heap 
=>, t14, t15, heap; // apuntador 
+, t15, 0, t16; // pos de valor1Llanta
=>, t16, t17, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t17);

end, , llanta_vacio_mostrarVAlor1




begin, , , llanta_vacio_mostrarVAlor2

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t18; // pos this 
=>, t18, t19, stack; // obtenido apuntador al heap 
=>, t19, t20, heap; // apuntador 
+, t20, 1, t21; // pos de valor2Llanta
=>, t21, t22, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t22);

end, , llanta_vacio_mostrarVAlor2




begin, , , carro_vacio_carro_caracter_entero

// Asignando atributo col
+, p, 0, t23; //pos this 
=>, t23, t24, stack; // apuntador al heap
=>, t24, t25, heap; // apuntador donde inicia el objeto
+, t25, 0, t26; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t27; // pos de color
=>, t27, t28, stack; // valor de lo que trae en el stack color
<=, t26, t28, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t29;// pos this de lla1
=>, t29, t30, stack; //apuntador del heap de lla1
=>, t30, t31, heap; //posicion real del heap donde inicia lla1
+, t31, 1, t32; //pos real del atributo lla1
<=, t32, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t33;
=>, t33, t34, stack; //apuntador al heap de lla1
=>, t34, t35, heap; //posicion real donde incia el objeto lla1
+, t35, 1, t36; // pos real donde incial el objeto lla1

+, p, 4, t37; // tamanho de la funcion actual carro_vacio_carro_caracter_entero
+, t37, 0, t38; // pos del this para la nueva instancia de lla1
<=, t38, t36, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t39; // size de funcion actual
+, t39, 1, t40; //pos del parametro 1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t41; // pos de rinLlanta
=>, t41, t42, stack; // valor de lo que trae en el stack rinLlanta
*, t42, 2, t43;
<=, t40, t43, stack; // asignado al stack el parametro
+, p, 4, t44; // size de funcion actual
+, t44, 2, t45; //pos del parametro 2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t46; // pos de rinLlanta
=>, t46, t47, stack; // valor de lo que trae en el stack rinLlanta
*, t47, 3, t48;
<=, t45, t48, stack; // asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 4, p; // regresando al ambito acutal


end, , carro_vacio_carro_caracter_entero




begin, , , carro_vacio_carro_caracter

// Asignando atributo col
+, p, 0, t49; //pos this 
=>, t49, t50, stack; // apuntador al heap
=>, t50, t51, heap; // apuntador donde inicia el objeto
+, t51, 0, t52; // pos real  de col
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t53; // pos de n
=>, t53, t54, stack; // valor de lo que trae en el stack n
<=, t52, t54, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t55;// pos this de lla1
=>, t55, t56, stack; //apuntador del heap de lla1
=>, t56, t57, heap; //posicion real del heap donde inicia lla1
+, t57, 1, t58; //pos real del atributo lla1
<=, t58, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t59;
=>, t59, t60, stack; //apuntador al heap de lla1
=>, t60, t61, heap; //posicion real donde incia el objeto lla1
+, t61, 1, t62; // pos real donde incial el objeto lla1

+, p, 3, t63; // tamanho de la funcion actual carro_vacio_carro_caracter
+, t63, 0, t64; // pos del this para la nueva instancia de lla1
<=, t64, t62, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 3, t65; // size de funcion actual
+, t65, 1, t66; //pos del parametro 1
<=, t66, 10, stack; // asignado al stack el parametro
+, p, 3, t67; // size de funcion actual
+, t67, 2, t68; //pos del parametro 2
<=, t68, 20, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero_entero;
-, p, 3, p; // regresando al ambito acutal


end, , carro_vacio_carro_caracter




begin, , , carro_caracter_obtenerColor

// RESOLVIENDO UN RETORNO
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t69; // pos this 
=>, t69, t70, stack; // obtenido apuntador al heap 
=>, t70, t71, heap; // apuntador 
+, t71, 0, t72; // pos de col
=>, t72, t73, heap; // obtengo el valor que se encuentre en el heap 
+, P, 1, t74; // pos de retorno de a funcion carro_caracter_obtenerColor
<=, t74, t73, stack; //asignando el retorno con su valor

end, , carro_caracter_obtenerColor




begin, , , carro_vacio_imprimir_Color

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t75; // pos this 
=>, t75, t76, stack; // obtenido apuntador al heap 
=>, t76, t77, heap; // apuntador 
+, t77, 0, t78; // pos de col
=>, t78, t79, heap; // obtengo el valor que se encuentre en el heap 
print("%c", t79);

end, , carro_vacio_imprimir_Color




begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t80; // pos de p1
<=, t80, h, stack; //guardando referencia del heap para el objeto p1
+, h, 1, t81; // guardo la posicion donde inicia el objeto 
<=, h, t81, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 2, h; // reservando espacio para el objeto p1
//Ingresando referencia al this del objeto p1
+, p, 0, t82; // pos de p1
=>, t82, t83, stack; // obteniendo apuntador de p1
+, p, 3, t84; // simulando cambio de ambito
+, t84, 0, t85; //pos del this de p1
<=, t85, t83, stack; // insertando apuntador del heap al stack del obeto p1
// Asignando parametros  
+, p, 3, t86; // size de funcion actual
+, t86, 1, t87; //pos del parametro 1
<=, t87, 888, stack; // asignado al stack el parametro
+, p, 3, t88; // size de funcion actual
+, t88, 2, t89; //pos del parametro 2
<=, t89, 65, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , persona_vacio_persona_entero_caracter;
-, p, 3, p; // regresando al ambito acutal

// ----------------- Resolviendo acceso local 
+, P, 0, t90; // pos del objeto
=>, t90, t92, stack; //apuntador al heap del obejto
+, P, 2, t93;
+, t93, 0, t94;
<=, t94, t92, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , persona_vacio_molestar;
+, P, 1, t95;
=>, t95, t96, stack; // valor del return
-, P, 2, P;
=>, t95, t97, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t98; // pos del objeto
=>, t98, t100, stack; //apuntador al heap del obejto
=>, t100, t101, heap; // recuperando pos incial del objeto
+, t101, 1, t100;
=>, t100, t102, heap; // recuperando pos incial del objeto
+, t102, 0, t100;
=>, t100, t103, heap; // valor a retoranar del acceso
print("%c", t103);
// ----------------- Resolviendo acceso local 
+, P, 0, t104; // pos del objeto
=>, t104, t106, stack; //apuntador al heap del obejto
=>, t106, t107, heap; // recuperando pos incial del objeto
+, t107, 1, t106;
+, P, 2, t108;
+, t108, 0, t109;
<=, t109, t106, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , carro_vacio_imprimir_Color;
+, P, 1, t110;
=>, t110, t111, stack; // valor del return
-, P, 2, P;
=>, t110, t112, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t113; // pos del objeto
=>, t113, t115, stack; //apuntador al heap del obejto
=>, t115, t116, heap; // recuperando pos incial del objeto
+, t116, 1, t115;
=>, t115, t117, heap; // recuperando pos incial del objeto
+, t117, 1, t115;
+, P, 2, t118;
+, t118, 0, t119;
<=, t119, t115, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , llanta_vacio_mostrarVAlor1;
+, P, 1, t120;
=>, t120, t121, stack; // valor del return
-, P, 2, P;
=>, t120, t122, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t123; // pos del objeto
=>, t123, t125, stack; //apuntador al heap del obejto
=>, t125, t126, heap; // recuperando pos incial del objeto
+, t126, 1, t125;
=>, t125, t127, heap; // recuperando pos incial del objeto
+, t127, 1, t125;
+, P, 2, t128;
+, t128, 0, t129;
<=, t129, t125, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , llanta_vacio_mostrarVAlor2;
+, P, 1, t130;
=>, t130, t131, stack; // valor del return
-, P, 2, P;
=>, t130, t132, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t133; // pos del objeto
=>, t133, t135, stack; //apuntador al heap del obejto
=>, t135, t136, heap; // recuperando pos incial del objeto
+, t136, 1, t135;
=>, t135, t137, heap; // recuperando pos incial del objeto
+, t137, 1, t135;
=>, t135, t138, heap; // recuperando pos incial del objeto
+, t138, 1, t135;
=>, t135, t139, heap; // valor a retoranar del acceso
print("%d", t139);
// ----------------- Resolviendo acceso local 
+, P, 0, t140; // pos del objeto
=>, t140, t142, stack; //apuntador al heap del obejto
=>, t142, t143, heap; // recuperando pos incial del objeto
+, t143, 1, t142;
=>, t142, t144, heap; // recuperando pos incial del objeto
+, t144, 1, t142;
=>, t142, t145, heap; // recuperando pos incial del objeto
+, t145, 0, t142;
=>, t142, t146, heap; // valor a retoranar del acceso
print("%d", t146);
print("%c", 88);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t147; // pos de c
// ----------------- Resolviendo acceso local 
+, P, 0, t148; // pos del objeto
=>, t148, t150, stack; //apuntador al heap del obejto
+, P, 3, t151;
+, t151, 0, t152;
<=, t152, t150, stack; // pasadon como refeenria el valor del this
+, P, 3, P;
call, , , persona_carro_obtenerCarro;
+, P, 2, t153;
=>, t153, t154, stack; // valor del return
-, P, 3, P;
=>, t153, t155, stack; // recuperando pos incial del objeto
=>, t155, t155, heap; // apuntador inciail del objeto 
+, t155, 1, t153;
=>, t153, t156, heap; // recuperando pos incial del objeto
+, t156, 0, t153;
=>, t153, t157, heap; // valor a retoranar del acceso
<=, t147, t157, stack; // asignando a c
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t158; // pos de c
=>, t158, t159, stack; // valor de lo que trae en el stack c
print("%d", t159);
// ----------- Instancia a una variable local --------------
+, p, 2, t160; // pos de p2
<=, t160, h, stack; //guardando referencia del heap para el objeto p2
+, h, 1, t161; // guardo la posicion donde inicia el objeto 
<=, h, t161, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 2, h; // reservando espacio para el objeto p2
//Ingresando referencia al this del objeto p2
+, p, 2, t162; // pos de p2
=>, t162, t163, stack; // obteniendo apuntador de p2
+, p, 3, t164; // simulando cambio de ambito
+, t164, 0, t165; //pos del this de p2
<=, t165, t163, stack; // insertando apuntador del heap al stack del obeto p2
// Asignando parametros  
+, p, 3, t166; // size de funcion actual
+, t166, 1, t167; //pos del parametro 1
<=, t167, 999, stack; // asignado al stack el parametro
+, p, 3, t168; // size de funcion actual
+, t168, 2, t169; //pos del parametro 2
<=, t169, 66, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , persona_vacio_persona_entero_caracter;
-, p, 3, p; // regresando al ambito acutal

// ----------------- Resolviendo acceso local 
+, P, 2, t170; // pos del objeto
=>, t170, t172, stack; //apuntador al heap del obejto
+, P, 2, t173;
+, t173, 0, t174;
<=, t174, t172, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , persona_vacio_molestar;
+, P, 1, t175;
=>, t175, t176, stack; // valor del return
-, P, 2, P;
=>, t175, t177, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 2, t178; // pos del objeto
=>, t178, t180, stack; //apuntador al heap del obejto
+, P, 3, t181;
+, t181, 0, t182;
<=, t182, t180, stack; // pasadon como refeenria el valor del this
+, P, 3, P;
call, , , persona_carro_obtenerCarro;
+, P, 2, t183;
=>, t183, t184, stack; // valor del return
-, P, 3, P;
=>, t183, t185, stack; // recuperando pos incial del objeto
=>, t185, t185, heap; // apuntador inciail del objeto 
+, t185, 0, t183;
=>, t183, t186, heap; // valor a retoranar del acceso
print("%c", t186);

end, , persona_PRINCIPAL




begin, , , persona_vacio_molestar

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t187; // pos this 
=>, t187, t188, stack; // obtenido apuntador al heap 
=>, t188, t189, heap; // apuntador 
+, t189, 0, t190; // pos de edad
=>, t190, t191, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t191);

end, , persona_vacio_molestar




begin, , , persona_carro_obtenerCarro

// ----------- Instancia a una variable local --------------
+, p, 1, t192; // pos de c
<=, t192, h, stack; //guardando referencia del heap para el objeto c
+, h, 1, t193; // guardo la posicion donde inicia el objeto 
<=, h, t193, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 2, h; // reservando espacio para el objeto c
//Ingresando referencia al this del objeto c
+, p, 1, t194; // pos de c
=>, t194, t195, stack; // obteniendo apuntador de c
+, p, 3, t196; // simulando cambio de ambito
+, t196, 0, t197; //pos del this de c
<=, t197, t195, stack; // insertando apuntador del heap al stack del obeto c
// Asignando parametros  
+, p, 3, t198; // size de funcion actual
+, t198, 1, t199; //pos del parametro 1
<=, t199, 72, stack; // asignado al stack el parametro
+, p, 3, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter;
-, p, 3, p; // regresando al ambito acutal

// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t200; // pos de c
=>, t200, t201, stack; // valor de lo que trae en el stack c
+, P, 2, t202; // pos de retorno de a funcion persona_carro_obtenerCarro
<=, t202, t201, stack; //asignando el retorno con su valor

end, , persona_carro_obtenerCarro




begin, , , persona_vacio_persona_entero_caracter

// ----------- Instancia a un atributo --------------
+, p, 0, t203;// pos this de car
=>, t203, t204, stack; //apuntador del heap de car
=>, t204, t205, heap; //posicion real del heap donde inicia car
+, t205, 1, t206; //pos real del atributo car
<=, t206, h, heap; //guardando la pos real donde inicia el objeto car
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto car

// Guardando la referencia al this del objeto para la llamada al constructor car
+, p, 0, t207;
=>, t207, t208, stack; //apuntador al heap de car
=>, t208, t209, heap; //posicion real donde incia el objeto car
+, t209, 1, t210; // pos real donde incial el objeto car

+, p, 4, t211; // tamanho de la funcion actual persona_vacio_persona_entero_caracter
+, t211, 0, t212; // pos del this para la nueva instancia de car
<=, t212, t210, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t213; // size de funcion actual
+, t213, 1, t214; //pos del parametro 1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t215; // pos de val2
=>, t215, t216, stack; // valor de lo que trae en el stack val2
<=, t214, t216, stack; // asignado al stack el parametro
+, p, 4, t217; // size de funcion actual
+, t217, 2, t218; //pos del parametro 2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t219; // pos de val2
=>, t219, t220, stack; // valor de lo que trae en el stack val2
+, t220, 3, t221;
<=, t218, t221, stack; // asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , carro_vacio_carro_caracter_entero;
-, p, 4, p; // regresando al ambito acutal

// Asignando atributo edad
+, p, 0, t222; //pos this 
=>, t222, t223, stack; // apuntador al heap
=>, t223, t224, heap; // apuntador donde inicia el objeto
+, t224, 0, t225; // pos real  de edad
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t226; // pos de val
=>, t226, t227, stack; // valor de lo que trae en el stack val
+, t227, 1, t228;
<=, t225, t228, heap; //guardando en el heap el valor del atributo

end, , persona_vacio_persona_entero_caracter




begin, , , persona_caracter_obtenerChar

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t229; // pos de c
<=, t229, 85, stack; // asignando a c
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t230; // pos de c
=>, t230, t231, stack; // valor de lo que trae en el stack c
print("%c", t231);
// RESOLVIENDO UN RETORNO
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t232; // pos de c
=>, t232, t233, stack; // valor de lo que trae en el stack c
+, P, 2, t234; // pos de retorno de a funcion persona_caracter_obtenerChar
<=, t234, t233, stack; //asignando el retorno con su valor

end, , persona_caracter_obtenerChar


