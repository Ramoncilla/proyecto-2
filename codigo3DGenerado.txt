

begin, , , persona_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t1; // pos de p
<=, t1, h, stack; //guardando referencia del heap para el objeto p
+, h, 1, t2; // guardo la posicion donde inicia el objeto 
<=, h, t2, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 0, h; // reservando espacio para el objeto p
//Ingresando referencia al this del objeto p
+, p, 0, t3; // pos de p
=>, t3, t4, stack; // obteniendo apuntador de p
+, p, 1, t5; // simulando cambio de ambito
+, t5, 0, t6; //pos del this de p
<=, t6, t4, stack; // insertando apuntador del heap al stack del obeto p
// No posee parametros 
+, p, 1, p; // simulando cambio de ambito
call, , , persona_vacio_persona;
-, p, 1, p; // regresando al ambito acutal


end, , persona_PRINCIPAL




begin, , , persona_vacio_molestar

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t7; // pos de numero
*, 10, 1, t8;
<=, t7, t8, stack; // asignando a numero
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t9; // pos de i
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t10; // pos de numero
=>, t10, t11, stack; // valor de lo que trae en el stack numero
*, 5, t11, t12;
<=, t9, t12, stack; // asignando a i
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t13; // pos de i
=>, t13, t14, stack; // valor de lo que trae en el stack i
print("%d", t14);
print("%c", 83);

end, , persona_vacio_molestar




begin, , , persona_vacio_persona

+, P, 0, t15;
=>, t15, t16, stack; 
+, P, 2, t17;
+, t16, 0, t18;
<=, t17, t16, stack; 
+, P, 2, P;
call, , , persona_vacio_molestar;
+, P, 3, t19;
=>, t19, t20, stack; // valor del return
-, P, 2, P;

end, , persona_vacio_persona


