

begin, , , Operaciones_vacio_cantar

// Resolviendo una cadena 
+, H, 0, t1; //apuntaodr a cadena 
+, H, 1, t2; //apu donde inicia la cadena
<=, t1, t2, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 9, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t3; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1);

L1:
end, , Operaciones_vacio_cantar




begin, , , Operaciones_vacio_operaciones


L2:
end, , Operaciones_vacio_operaciones




begin, , , Operaciones_vacio_aritmeticas

// Resolviendo una cadena 
+, H, 0, t4; //apuntaodr a cadena 
+, H, 1, t5; //apu donde inicia la cadena
<=, t4, t5, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 36, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t6; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 118, heap; //guardadndo v
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t4);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t7; // pos de temp1
*, 3, 7, t8;
/, 8, 2, t9;
-, t8, t9, t10;
-, 5, 10, t11;
*, 8, t11, t12;
-, t10, t12, t13;
<=, t7, t13, stack; // asignando a temp1
// ------------------------ Creando arreglo local texto
+, P, 2, t14; //pos de arreglo texto
<=, t14, H, stack; // ingrensando al stack apunt del heap para texto
+, H, 1, t15;
<=, H, t15, heap; //insetnado donde inicia el arreglo texto
+, H, 1, H;
// calculando el tamanho del arreglo
-, 50, 1, t16; //calculando el n real
-, t16, 0, t17; //iReal columna 0
+, t17, 1, t17; //size del arreglo texto
<=, H, t17, heap; // insertando el tamanio del arreglo linealizado texto
+, H, 1, H;
+, h, t17, h; // reservnado el espacio del arreglo texto
+, P, 2, t20; // pos del arreglo 
=>, t20, t21, stack; //apuntador al heap del arreglo
=>, t21, t22, heap; // apuntador del heap al heap donde inicia la cadena
=>, t22, t18, heap; // size del arreglo texto
+, t22, 1, t19; // pos 0 donde inicia el arreglo texto
// Resolviendo una cadena 
+, H, 0, t23; //apuntaodr a cadena 
+, H, 1, t24; //apu donde inicia la cadena
<=, t23, t24, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t25; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 46, heap; //guardadndo .
+, H, 1, H;
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 51, heap; //guardadndo 3
+, H, 1, H;
<=, H, 48, heap; //guardadndo 0
+, H, 1, H;
<=, H, 37, heap; //guardadndo %
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
=>, t23, t26, heap; // pos que apunta al size de la cadena
=>, t26, t27, heap; // size de la cadena
+, t26, 1, t28; // Pos 0 de la cadena
=>, t28, t29, heap; // sacandor el caracter del heap cadena
jle, t27, t18, L4;
jmp, , , L5;
jmp, , , L4;
L4:
jne, t29, 34, L6;
jmp, , , L7;
jmp, , , L6;
L6:
<=, t19, t29, heap; // guardando el caracter 
+, t19, 1, t19; // incremnetnado la pos del arreglo
+, t28, 1, t28; // incrementando la pos de la cadena
=>, t28, t29, heap; // sacandor el caracter del heap cadena
jmp, , , L4;
jmp, , , L7;
L7:
jmp, , , L5;
L5:
+, P, 2, t30;
=>, t30, t31, stack; 
=>, t31, t32, heap; 
=>, t32, t33, heap; // valor de size del arreglo texto
+, t32, 1, t34; // apuntador donde inicia el arreglo texto
=>, t34, t35, heap; // primer caracter del arreglo texto
+, H, 0, t36;
+, H, 1, t37;
<=, t36, t37, heap; 
+, H, 1, H;
+, 0, 0, t38;
<=, H, t38, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L8:
jne, t35, 36, L9;
jmp, , , L10;
L9:
<=, H, t35, heap; // ingresando el caracter 
+, H, 1, H;
+, t38, 1, t38; // incrementando en uno el size de la nueva cadena
+, t34, 1, t34;
=>, t34, t35, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L8;
L10:
<=, t37, t38, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t39; // pos de temp1
=>, t39, t40, stack; // valor de lo que trae en el stack temp1
// Resolviendo una cadena 
+, H, 0, t41; //apuntaodr a cadena 
+, H, 1, t42; //apu donde inicia la cadena
<=, t41, t42, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t43; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t44; //apuntaodr a cadena 
+, H, 1, t45; //apu donde inicia la cadena
<=, t44, t45, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t46; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// ---------------------------  Convertir a caden aun decimal ----
%#, t40, 0, t47; // parte entera del numero t40
!#, t40, 0, t48; // parte decimal del numero t40
// ---------------------------- Convertir parte entera a cadena ----------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t49; // inicio cad1 (inversa)
+, H, 1, t50;
<=, t49, t50, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t47, 0, t51;
+, 0, 0, t52;
+, 0, 0, t53;
+, 0, 0, t54;
+, t47, 0, t55;
L11:
jl, t52, t51, L12;
jmp, , , L13;
L12:
%%, t55, 0, t53;
+, t53, 48, t56;
<=, H, t56, heap;
+, H, 1, H; 
##, t55, 0, t55;
+, t52, 1, t52;
jmp, , , L11;
L13:
<=, H, 34, heap; 
+, H, 1, H;
<=, t50, t51, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t51, 0, t57;
+, t57, 0, t58;
+, t50, t57, t59; // pos inicial del primero caracter de la cadena
=>, t59, t60, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t61;
+, H, 1, t62;
<=, t61, t62, heap; 
+, H, 1, H;
+, H, 1, H;
L14:
jl, 0, t58, L15;
jmp, , , L16;
L15:
<=, H, t60, heap; // guardando caracterr actual
+, H, 1, H;
-, t59, 1, t59;
=>, t59, t60, heap;
-, t58, 1, t58;
jmp, , , L14;
L16:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t62, t57, heap;
// ----------------------  Crear cadena para el punto ------------------
+, H, 0, t63; //apuntador de cadena
+, H, 1, t64; // posicion donde iniciara la cadena
<=, t63, t64, heap; //insertando apuntador del heap donde incia la cadena
+, H, 1, H; // incrementando h
<=, H, 1, heap; //ingrensado el tamanho de la cadena nueva 
+, H, 1, H; // incrementando h
<=, H, 46, heap; // ingresnado caracter al heap
+, H, 1, H; // incrementando h
<=, H, 34, heap; //caracter de escape de la nueva cadena
+, H, 1, H; // incrementando h
// ----------------------- Concatenar parte entera con punto -----------------------
//Iniciando a concatnar cadenas 
=>, t61, t65, heap;
=>, t65, t66, heap; // size cadena1
+, t65, 1, t67; // pos 0 de la cadena 1
=>, t63, t68, heap;
=>, t68, t69, heap; // size cadena2
+, t68, 1, t70; // pos 0 de la cadena 2
+, t66, t69, t71; // size de la nueva cadena
=>, t67, t72, heap; // primer caracter de la cadena 1
=>, t70, t73, heap; // primer caracter de la cadena 2
+, H, 0, t74; // posicion de retorno de la cadena
+, H, 1, t75;
<=, t74, t75, heap;
+, H, 1, H;
<=, H, t71, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L17;
L17:
jne, t72, 34, L18;
jmp, , , L19;
jmp, , , L18;
L18:
<=, H, t72, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t67, 1, t67;
=>, t67, t72, heap;
jmp, , , L17;
jmp, , , L19;
L19:
jmp, , , L20;
L20:
jne, t73, 34, L21;
jmp, , , L22;
jmp, , , L21;
L21:
<=, H, t73, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t70, 1, t70;
=>, t70, t73, heap;
jmp, , , L20;
jmp, , , L22;
L22:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
// ------------------------------ Crear Cadena para parte decimal -------------------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t76; // inicio cad1 (inversa)
+, H, 1, t77;
<=, t76, t77, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t48, 0, t78;
+, 0, 0, t79;
+, 0, 0, t80;
+, 0, 0, t81;
+, t48, 0, t82;
L23:
jl, t79, t78, L24;
jmp, , , L25;
L24:
%%, t82, 0, t80;
+, t80, 48, t83;
<=, H, t83, heap;
+, H, 1, H; 
##, t82, 0, t82;
+, t79, 1, t79;
jmp, , , L23;
L25:
<=, H, 34, heap; 
+, H, 1, H;
<=, t77, t78, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t78, 0, t84;
+, t84, 0, t85;
+, t77, t84, t86; // pos inicial del primero caracter de la cadena
=>, t86, t87, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t88;
+, H, 1, t89;
<=, t88, t89, heap; 
+, H, 1, H;
+, H, 1, H;
L26:
jl, 0, t85, L27;
jmp, , , L28;
L27:
<=, H, t87, heap; // guardando caracterr actual
+, H, 1, H;
-, t86, 1, t86;
=>, t86, t87, heap;
-, t85, 1, t85;
jmp, , , L26;
L28:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t89, t84, heap;
// -------------------------- Concatenar parte entera con punto y parte decimal --------------------
//Iniciando a concatnar cadenas 
=>, t74, t90, heap;
=>, t90, t91, heap; // size cadena1
+, t90, 1, t92; // pos 0 de la cadena 1
=>, t88, t93, heap;
=>, t93, t94, heap; // size cadena2
+, t93, 1, t95; // pos 0 de la cadena 2
+, t91, t94, t96; // size de la nueva cadena
=>, t92, t97, heap; // primer caracter de la cadena 1
=>, t95, t98, heap; // primer caracter de la cadena 2
+, H, 0, t99; // posicion de retorno de la cadena
+, H, 1, t100;
<=, t99, t100, heap;
+, H, 1, H;
<=, H, t96, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L29;
L29:
jne, t97, 34, L30;
jmp, , , L31;
jmp, , , L30;
L30:
<=, H, t97, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t92, 1, t92;
=>, t92, t97, heap;
jmp, , , L29;
jmp, , , L31;
L31:
jmp, , , L32;
L32:
jne, t98, 34, L33;
jmp, , , L34;
jmp, , , L33;
L33:
<=, H, t98, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t95, 1, t95;
=>, t95, t98, heap;
jmp, , , L32;
jmp, , , L34;
L34:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t41, t101, heap;
=>, t101, t102, heap; // size cadena1
+, t101, 1, t103; // pos 0 de la cadena 1
=>, t99, t104, heap;
=>, t104, t105, heap; // size cadena2
+, t104, 1, t106; // pos 0 de la cadena 2
+, t102, t105, t107; // size de la nueva cadena
=>, t103, t108, heap; // primer caracter de la cadena 1
=>, t106, t109, heap; // primer caracter de la cadena 2
+, H, 0, t110; // posicion de retorno de la cadena
+, H, 1, t111;
<=, t110, t111, heap;
+, H, 1, H;
<=, H, t107, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L35;
L35:
jne, t108, 34, L36;
jmp, , , L37;
jmp, , , L36;
L36:
<=, H, t108, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t103, 1, t103;
=>, t103, t108, heap;
jmp, , , L35;
jmp, , , L37;
L37:
jmp, , , L38;
L38:
jne, t109, 34, L39;
jmp, , , L40;
jmp, , , L39;
L39:
<=, H, t109, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t106, 1, t106;
=>, t106, t109, heap;
jmp, , , L38;
jmp, , , L40;
L40:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t110, t112, heap;
=>, t112, t113, heap; // size cadena1
+, t112, 1, t114; // pos 0 de la cadena 1
=>, t44, t115, heap;
=>, t115, t116, heap; // size cadena2
+, t115, 1, t117; // pos 0 de la cadena 2
+, t113, t116, t118; // size de la nueva cadena
=>, t114, t119, heap; // primer caracter de la cadena 1
=>, t117, t120, heap; // primer caracter de la cadena 2
+, H, 0, t121; // posicion de retorno de la cadena
+, H, 1, t122;
<=, t121, t122, heap;
+, H, 1, H;
<=, H, t118, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L41;
L41:
jne, t119, 34, L42;
jmp, , , L43;
jmp, , , L42;
L42:
<=, H, t119, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t114, 1, t114;
=>, t114, t119, heap;
jmp, , , L41;
jmp, , , L43;
L43:
jmp, , , L44;
L44:
jne, t120, 34, L45;
jmp, , , L46;
jmp, , , L45;
L45:
<=, H, t120, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t117, 1, t117;
=>, t117, t120, heap;
jmp, , , L44;
jmp, , , L46;
L46:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t36, t123, heap;
=>, t123, t124, heap; // size cadena1
+, t123, 1, t125; // pos 0 de la cadena 1
=>, t121, t126, heap;
=>, t126, t127, heap; // size cadena2
+, t126, 1, t128; // pos 0 de la cadena 2
+, t124, t127, t129; // size de la nueva cadena
=>, t125, t130, heap; // primer caracter de la cadena 1
=>, t128, t131, heap; // primer caracter de la cadena 2
+, H, 0, t132; // posicion de retorno de la cadena
+, H, 1, t133;
<=, t132, t133, heap;
+, H, 1, H;
<=, H, t129, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L47;
L47:
jne, t130, 34, L48;
jmp, , , L49;
jmp, , , L48;
L48:
<=, H, t130, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t125, 1, t125;
=>, t125, t130, heap;
jmp, , , L47;
jmp, , , L49;
L49:
jmp, , , L50;
L50:
jne, t131, 34, L51;
jmp, , , L52;
jmp, , , L51;
L51:
<=, H, t131, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t128, 1, t128;
=>, t128, t131, heap;
jmp, , , L50;
jmp, , , L52;
L52:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 2, t136; // pos del arreglo 
=>, t136, t137, stack; //apuntador al heap del arreglo
=>, t137, t138, heap; // apuntador del heap al heap donde inicia la cadena
=>, t138, t134, heap; // size del arreglo texto
+, t138, 1, t135; // pos 0 donde inicia el arreglo texto
=>, t132, t139, heap; // pos que apunta al size de la cadena
=>, t139, t140, heap; // size de la cadena
+, t139, 1, t141; // Pos 0 de la cadena
=>, t141, t142, heap; // sacandor el caracter del heap cadena
jle, t140, t134, L53;
jmp, , , L54;
jmp, , , L53;
L53:
jne, t142, 34, L55;
jmp, , , L56;
jmp, , , L55;
L55:
<=, t135, t142, heap; // guardando el caracter 
+, t135, 1, t135; // incremnetnado la pos del arreglo
+, t141, 1, t141; // incrementando la pos de la cadena
=>, t141, t142, heap; // sacandor el caracter del heap cadena
jmp, , , L53;
jmp, , , L56;
L56:
jmp, , , L54;
L54:
+, P, 2, t143;
=>, t143, t144, stack; 
=>, t144, t145, heap; 
=>, t145, t146, heap; // valor de size del arreglo texto
+, t145, 1, t147; // apuntador donde inicia el arreglo texto
=>, t147, t148, heap; // primer caracter del arreglo texto
+, H, 0, t149;
+, H, 1, t150;
<=, t149, t150, heap; 
+, H, 1, H;
+, 0, 0, t151;
<=, H, t151, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L57:
jne, t148, 36, L58;
jmp, , , L59;
L58:
<=, H, t148, heap; // ingresando el caracter 
+, H, 1, H;
+, t151, 1, t151; // incrementando en uno el size de la nueva cadena
+, t147, 1, t147;
=>, t147, t148, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L57;
L59:
<=, t150, t151, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t149);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t152; // pos de temp2
*, 3, 9, t153;
+, 0, t153, t154;
-, t154, 18, t155;
^, 3, 3, t156;
+, t155, t156, t157;
<=, t152, t157, stack; // asignando a temp2
// Resolviendo una cadena 
+, H, 0, t158; //apuntaodr a cadena 
+, H, 1, t159; //apu donde inicia la cadena
<=, t158, t159, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t160; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 46, heap; //guardadndo .
+, H, 1, H;
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 51, heap; //guardadndo 3
+, H, 1, H;
<=, H, 48, heap; //guardadndo 0
+, H, 1, H;
<=, H, 37, heap; //guardadndo %
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 2, t163; // pos del arreglo 
=>, t163, t164, stack; //apuntador al heap del arreglo
=>, t164, t165, heap; // apuntador del heap al heap donde inicia la cadena
=>, t165, t161, heap; // size del arreglo texto
+, t165, 1, t162; // pos 0 donde inicia el arreglo texto
=>, t158, t166, heap; // pos que apunta al size de la cadena
=>, t166, t167, heap; // size de la cadena
+, t166, 1, t168; // Pos 0 de la cadena
=>, t168, t169, heap; // sacandor el caracter del heap cadena
jle, t167, t161, L60;
jmp, , , L61;
jmp, , , L60;
L60:
jne, t169, 34, L62;
jmp, , , L63;
jmp, , , L62;
L62:
<=, t162, t169, heap; // guardando el caracter 
+, t162, 1, t162; // incremnetnado la pos del arreglo
+, t168, 1, t168; // incrementando la pos de la cadena
=>, t168, t169, heap; // sacandor el caracter del heap cadena
jmp, , , L60;
jmp, , , L63;
L63:
jmp, , , L61;
L61:
+, P, 2, t170;
=>, t170, t171, stack; 
=>, t171, t172, heap; 
=>, t172, t173, heap; // valor de size del arreglo texto
+, t172, 1, t174; // apuntador donde inicia el arreglo texto
=>, t174, t175, heap; // primer caracter del arreglo texto
+, H, 0, t176;
+, H, 1, t177;
<=, t176, t177, heap; 
+, H, 1, H;
+, 0, 0, t178;
<=, H, t178, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L64:
jne, t175, 36, L65;
jmp, , , L66;
L65:
<=, H, t175, heap; // ingresando el caracter 
+, H, 1, H;
+, t178, 1, t178; // incrementando en uno el size de la nueva cadena
+, t174, 1, t174;
=>, t174, t175, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L64;
L66:
<=, t177, t178, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 3, t179; // pos de temp2
=>, t179, t180, stack; // valor de lo que trae en el stack temp2
// Resolviendo una cadena 
+, H, 0, t181; //apuntaodr a cadena 
+, H, 1, t182; //apu donde inicia la cadena
<=, t181, t182, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t183; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t184; //apuntaodr a cadena 
+, H, 1, t185; //apu donde inicia la cadena
<=, t184, t185, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t186; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t187; // inicio cad1 (inversa)
+, H, 1, t188;
<=, t187, t188, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t180, 0, t189;
+, 0, 0, t190;
+, 0, 0, t191;
+, 0, 0, t192;
+, t180, 0, t193;
L67:
jl, t190, t189, L68;
jmp, , , L69;
L68:
%%, t193, 0, t191;
+, t191, 48, t194;
<=, H, t194, heap;
+, H, 1, H; 
##, t193, 0, t193;
+, t190, 1, t190;
jmp, , , L67;
L69:
<=, H, 34, heap; 
+, H, 1, H;
<=, t188, t189, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t189, 0, t195;
+, t195, 0, t196;
+, t188, t195, t197; // pos inicial del primero caracter de la cadena
=>, t197, t198, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t199;
+, H, 1, t200;
<=, t199, t200, heap; 
+, H, 1, H;
+, H, 1, H;
L70:
jl, 0, t196, L71;
jmp, , , L72;
L71:
<=, H, t198, heap; // guardando caracterr actual
+, H, 1, H;
-, t197, 1, t197;
=>, t197, t198, heap;
-, t196, 1, t196;
jmp, , , L70;
L72:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t200, t195, heap;
//Iniciando a concatnar cadenas 
=>, t181, t201, heap;
=>, t201, t202, heap; // size cadena1
+, t201, 1, t203; // pos 0 de la cadena 1
=>, t199, t204, heap;
=>, t204, t205, heap; // size cadena2
+, t204, 1, t206; // pos 0 de la cadena 2
+, t202, t205, t207; // size de la nueva cadena
=>, t203, t208, heap; // primer caracter de la cadena 1
=>, t206, t209, heap; // primer caracter de la cadena 2
+, H, 0, t210; // posicion de retorno de la cadena
+, H, 1, t211;
<=, t210, t211, heap;
+, H, 1, H;
<=, H, t207, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L73;
L73:
jne, t208, 34, L74;
jmp, , , L75;
jmp, , , L74;
L74:
<=, H, t208, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t203, 1, t203;
=>, t203, t208, heap;
jmp, , , L73;
jmp, , , L75;
L75:
jmp, , , L76;
L76:
jne, t209, 34, L77;
jmp, , , L78;
jmp, , , L77;
L77:
<=, H, t209, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t206, 1, t206;
=>, t206, t209, heap;
jmp, , , L76;
jmp, , , L78;
L78:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t210, t212, heap;
=>, t212, t213, heap; // size cadena1
+, t212, 1, t214; // pos 0 de la cadena 1
=>, t184, t215, heap;
=>, t215, t216, heap; // size cadena2
+, t215, 1, t217; // pos 0 de la cadena 2
+, t213, t216, t218; // size de la nueva cadena
=>, t214, t219, heap; // primer caracter de la cadena 1
=>, t217, t220, heap; // primer caracter de la cadena 2
+, H, 0, t221; // posicion de retorno de la cadena
+, H, 1, t222;
<=, t221, t222, heap;
+, H, 1, H;
<=, H, t218, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L79;
L79:
jne, t219, 34, L80;
jmp, , , L81;
jmp, , , L80;
L80:
<=, H, t219, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t214, 1, t214;
=>, t214, t219, heap;
jmp, , , L79;
jmp, , , L81;
L81:
jmp, , , L82;
L82:
jne, t220, 34, L83;
jmp, , , L84;
jmp, , , L83;
L83:
<=, H, t220, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t217, 1, t217;
=>, t217, t220, heap;
jmp, , , L82;
jmp, , , L84;
L84:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t176, t223, heap;
=>, t223, t224, heap; // size cadena1
+, t223, 1, t225; // pos 0 de la cadena 1
=>, t221, t226, heap;
=>, t226, t227, heap; // size cadena2
+, t226, 1, t228; // pos 0 de la cadena 2
+, t224, t227, t229; // size de la nueva cadena
=>, t225, t230, heap; // primer caracter de la cadena 1
=>, t228, t231, heap; // primer caracter de la cadena 2
+, H, 0, t232; // posicion de retorno de la cadena
+, H, 1, t233;
<=, t232, t233, heap;
+, H, 1, H;
<=, H, t229, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L85;
L85:
jne, t230, 34, L86;
jmp, , , L87;
jmp, , , L86;
L86:
<=, H, t230, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t225, 1, t225;
=>, t225, t230, heap;
jmp, , , L85;
jmp, , , L87;
L87:
jmp, , , L88;
L88:
jne, t231, 34, L89;
jmp, , , L90;
jmp, , , L89;
L89:
<=, H, t231, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t228, 1, t228;
=>, t228, t231, heap;
jmp, , , L88;
jmp, , , L90;
L90:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 2, t236; // pos del arreglo 
=>, t236, t237, stack; //apuntador al heap del arreglo
=>, t237, t238, heap; // apuntador del heap al heap donde inicia la cadena
=>, t238, t234, heap; // size del arreglo texto
+, t238, 1, t235; // pos 0 donde inicia el arreglo texto
=>, t232, t239, heap; // pos que apunta al size de la cadena
=>, t239, t240, heap; // size de la cadena
+, t239, 1, t241; // Pos 0 de la cadena
=>, t241, t242, heap; // sacandor el caracter del heap cadena
jle, t240, t234, L91;
jmp, , , L92;
jmp, , , L91;
L91:
jne, t242, 34, L93;
jmp, , , L94;
jmp, , , L93;
L93:
<=, t235, t242, heap; // guardando el caracter 
+, t235, 1, t235; // incremnetnado la pos del arreglo
+, t241, 1, t241; // incrementando la pos de la cadena
=>, t241, t242, heap; // sacandor el caracter del heap cadena
jmp, , , L91;
jmp, , , L94;
L94:
jmp, , , L92;
L92:
+, P, 2, t243;
=>, t243, t244, stack; 
=>, t244, t245, heap; 
=>, t245, t246, heap; // valor de size del arreglo texto
+, t245, 1, t247; // apuntador donde inicia el arreglo texto
=>, t247, t248, heap; // primer caracter del arreglo texto
+, H, 0, t249;
+, H, 1, t250;
<=, t249, t250, heap; 
+, H, 1, H;
+, 0, 0, t251;
<=, H, t251, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L95:
jne, t248, 36, L96;
jmp, , , L97;
L96:
<=, H, t248, heap; // ingresando el caracter 
+, H, 1, H;
+, t251, 1, t251; // incrementando en uno el size de la nueva cadena
+, t247, 1, t247;
=>, t247, t248, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L95;
L97:
<=, t250, t251, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t249);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t252; // pos de temp3
-, 8, 8, t253;
^, 2, 3, t254;
/, t254, 4, t255;
+, t253, t255, t256;
*, t256, 4, t257;
<=, t252, t257, stack; // asignando a temp3
// Resolviendo una cadena 
+, H, 0, t258; //apuntaodr a cadena 
+, H, 1, t259; //apu donde inicia la cadena
<=, t258, t259, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t260; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 46, heap; //guardadndo .
+, H, 1, H;
<=, H, 51, heap; //guardadndo 3
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 48, heap; //guardadndo 0
+, H, 1, H;
<=, H, 37, heap; //guardadndo %
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 2, t263; // pos del arreglo 
=>, t263, t264, stack; //apuntador al heap del arreglo
=>, t264, t265, heap; // apuntador del heap al heap donde inicia la cadena
=>, t265, t261, heap; // size del arreglo texto
+, t265, 1, t262; // pos 0 donde inicia el arreglo texto
=>, t258, t266, heap; // pos que apunta al size de la cadena
=>, t266, t267, heap; // size de la cadena
+, t266, 1, t268; // Pos 0 de la cadena
=>, t268, t269, heap; // sacandor el caracter del heap cadena
jle, t267, t261, L98;
jmp, , , L99;
jmp, , , L98;
L98:
jne, t269, 34, L100;
jmp, , , L101;
jmp, , , L100;
L100:
<=, t262, t269, heap; // guardando el caracter 
+, t262, 1, t262; // incremnetnado la pos del arreglo
+, t268, 1, t268; // incrementando la pos de la cadena
=>, t268, t269, heap; // sacandor el caracter del heap cadena
jmp, , , L98;
jmp, , , L101;
L101:
jmp, , , L99;
L99:
+, P, 2, t270;
=>, t270, t271, stack; 
=>, t271, t272, heap; 
=>, t272, t273, heap; // valor de size del arreglo texto
+, t272, 1, t274; // apuntador donde inicia el arreglo texto
=>, t274, t275, heap; // primer caracter del arreglo texto
+, H, 0, t276;
+, H, 1, t277;
<=, t276, t277, heap; 
+, H, 1, H;
+, 0, 0, t278;
<=, H, t278, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L102:
jne, t275, 36, L103;
jmp, , , L104;
L103:
<=, H, t275, heap; // ingresando el caracter 
+, H, 1, H;
+, t278, 1, t278; // incrementando en uno el size de la nueva cadena
+, t274, 1, t274;
=>, t274, t275, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L102;
L104:
<=, t277, t278, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t279; // pos de temp3
=>, t279, t280, stack; // valor de lo que trae en el stack temp3
// Resolviendo una cadena 
+, H, 0, t281; //apuntaodr a cadena 
+, H, 1, t282; //apu donde inicia la cadena
<=, t281, t282, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t283; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t284; //apuntaodr a cadena 
+, H, 1, t285; //apu donde inicia la cadena
<=, t284, t285, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t286; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// ---------------------------  Convertir a caden aun decimal ----
%#, t280, 0, t287; // parte entera del numero t280
!#, t280, 0, t288; // parte decimal del numero t280
// ---------------------------- Convertir parte entera a cadena ----------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t289; // inicio cad1 (inversa)
+, H, 1, t290;
<=, t289, t290, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t287, 0, t291;
+, 0, 0, t292;
+, 0, 0, t293;
+, 0, 0, t294;
+, t287, 0, t295;
L105:
jl, t292, t291, L106;
jmp, , , L107;
L106:
%%, t295, 0, t293;
+, t293, 48, t296;
<=, H, t296, heap;
+, H, 1, H; 
##, t295, 0, t295;
+, t292, 1, t292;
jmp, , , L105;
L107:
<=, H, 34, heap; 
+, H, 1, H;
<=, t290, t291, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t291, 0, t297;
+, t297, 0, t298;
+, t290, t297, t299; // pos inicial del primero caracter de la cadena
=>, t299, t300, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t301;
+, H, 1, t302;
<=, t301, t302, heap; 
+, H, 1, H;
+, H, 1, H;
L108:
jl, 0, t298, L109;
jmp, , , L110;
L109:
<=, H, t300, heap; // guardando caracterr actual
+, H, 1, H;
-, t299, 1, t299;
=>, t299, t300, heap;
-, t298, 1, t298;
jmp, , , L108;
L110:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t302, t297, heap;
// ----------------------  Crear cadena para el punto ------------------
+, H, 0, t303; //apuntador de cadena
+, H, 1, t304; // posicion donde iniciara la cadena
<=, t303, t304, heap; //insertando apuntador del heap donde incia la cadena
+, H, 1, H; // incrementando h
<=, H, 1, heap; //ingrensado el tamanho de la cadena nueva 
+, H, 1, H; // incrementando h
<=, H, 46, heap; // ingresnado caracter al heap
+, H, 1, H; // incrementando h
<=, H, 34, heap; //caracter de escape de la nueva cadena
+, H, 1, H; // incrementando h
// ----------------------- Concatenar parte entera con punto -----------------------
//Iniciando a concatnar cadenas 
=>, t301, t305, heap;
=>, t305, t306, heap; // size cadena1
+, t305, 1, t307; // pos 0 de la cadena 1
=>, t303, t308, heap;
=>, t308, t309, heap; // size cadena2
+, t308, 1, t310; // pos 0 de la cadena 2
+, t306, t309, t311; // size de la nueva cadena
=>, t307, t312, heap; // primer caracter de la cadena 1
=>, t310, t313, heap; // primer caracter de la cadena 2
+, H, 0, t314; // posicion de retorno de la cadena
+, H, 1, t315;
<=, t314, t315, heap;
+, H, 1, H;
<=, H, t311, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L111;
L111:
jne, t312, 34, L112;
jmp, , , L113;
jmp, , , L112;
L112:
<=, H, t312, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t307, 1, t307;
=>, t307, t312, heap;
jmp, , , L111;
jmp, , , L113;
L113:
jmp, , , L114;
L114:
jne, t313, 34, L115;
jmp, , , L116;
jmp, , , L115;
L115:
<=, H, t313, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t310, 1, t310;
=>, t310, t313, heap;
jmp, , , L114;
jmp, , , L116;
L116:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
// ------------------------------ Crear Cadena para parte decimal -------------------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t316; // inicio cad1 (inversa)
+, H, 1, t317;
<=, t316, t317, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t288, 0, t318;
+, 0, 0, t319;
+, 0, 0, t320;
+, 0, 0, t321;
+, t288, 0, t322;
L117:
jl, t319, t318, L118;
jmp, , , L119;
L118:
%%, t322, 0, t320;
+, t320, 48, t323;
<=, H, t323, heap;
+, H, 1, H; 
##, t322, 0, t322;
+, t319, 1, t319;
jmp, , , L117;
L119:
<=, H, 34, heap; 
+, H, 1, H;
<=, t317, t318, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t318, 0, t324;
+, t324, 0, t325;
+, t317, t324, t326; // pos inicial del primero caracter de la cadena
=>, t326, t327, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t328;
+, H, 1, t329;
<=, t328, t329, heap; 
+, H, 1, H;
+, H, 1, H;
L120:
jl, 0, t325, L121;
jmp, , , L122;
L121:
<=, H, t327, heap; // guardando caracterr actual
+, H, 1, H;
-, t326, 1, t326;
=>, t326, t327, heap;
-, t325, 1, t325;
jmp, , , L120;
L122:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t329, t324, heap;
// -------------------------- Concatenar parte entera con punto y parte decimal --------------------
//Iniciando a concatnar cadenas 
=>, t314, t330, heap;
=>, t330, t331, heap; // size cadena1
+, t330, 1, t332; // pos 0 de la cadena 1
=>, t328, t333, heap;
=>, t333, t334, heap; // size cadena2
+, t333, 1, t335; // pos 0 de la cadena 2
+, t331, t334, t336; // size de la nueva cadena
=>, t332, t337, heap; // primer caracter de la cadena 1
=>, t335, t338, heap; // primer caracter de la cadena 2
+, H, 0, t339; // posicion de retorno de la cadena
+, H, 1, t340;
<=, t339, t340, heap;
+, H, 1, H;
<=, H, t336, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L123;
L123:
jne, t337, 34, L124;
jmp, , , L125;
jmp, , , L124;
L124:
<=, H, t337, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t332, 1, t332;
=>, t332, t337, heap;
jmp, , , L123;
jmp, , , L125;
L125:
jmp, , , L126;
L126:
jne, t338, 34, L127;
jmp, , , L128;
jmp, , , L127;
L127:
<=, H, t338, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t335, 1, t335;
=>, t335, t338, heap;
jmp, , , L126;
jmp, , , L128;
L128:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t281, t341, heap;
=>, t341, t342, heap; // size cadena1
+, t341, 1, t343; // pos 0 de la cadena 1
=>, t339, t344, heap;
=>, t344, t345, heap; // size cadena2
+, t344, 1, t346; // pos 0 de la cadena 2
+, t342, t345, t347; // size de la nueva cadena
=>, t343, t348, heap; // primer caracter de la cadena 1
=>, t346, t349, heap; // primer caracter de la cadena 2
+, H, 0, t350; // posicion de retorno de la cadena
+, H, 1, t351;
<=, t350, t351, heap;
+, H, 1, H;
<=, H, t347, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L129;
L129:
jne, t348, 34, L130;
jmp, , , L131;
jmp, , , L130;
L130:
<=, H, t348, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t343, 1, t343;
=>, t343, t348, heap;
jmp, , , L129;
jmp, , , L131;
L131:
jmp, , , L132;
L132:
jne, t349, 34, L133;
jmp, , , L134;
jmp, , , L133;
L133:
<=, H, t349, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t346, 1, t346;
=>, t346, t349, heap;
jmp, , , L132;
jmp, , , L134;
L134:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t350, t352, heap;
=>, t352, t353, heap; // size cadena1
+, t352, 1, t354; // pos 0 de la cadena 1
=>, t284, t355, heap;
=>, t355, t356, heap; // size cadena2
+, t355, 1, t357; // pos 0 de la cadena 2
+, t353, t356, t358; // size de la nueva cadena
=>, t354, t359, heap; // primer caracter de la cadena 1
=>, t357, t360, heap; // primer caracter de la cadena 2
+, H, 0, t361; // posicion de retorno de la cadena
+, H, 1, t362;
<=, t361, t362, heap;
+, H, 1, H;
<=, H, t358, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L135;
L135:
jne, t359, 34, L136;
jmp, , , L137;
jmp, , , L136;
L136:
<=, H, t359, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t354, 1, t354;
=>, t354, t359, heap;
jmp, , , L135;
jmp, , , L137;
L137:
jmp, , , L138;
L138:
jne, t360, 34, L139;
jmp, , , L140;
jmp, , , L139;
L139:
<=, H, t360, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t357, 1, t357;
=>, t357, t360, heap;
jmp, , , L138;
jmp, , , L140;
L140:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t276, t363, heap;
=>, t363, t364, heap; // size cadena1
+, t363, 1, t365; // pos 0 de la cadena 1
=>, t361, t366, heap;
=>, t366, t367, heap; // size cadena2
+, t366, 1, t368; // pos 0 de la cadena 2
+, t364, t367, t369; // size de la nueva cadena
=>, t365, t370, heap; // primer caracter de la cadena 1
=>, t368, t371, heap; // primer caracter de la cadena 2
+, H, 0, t372; // posicion de retorno de la cadena
+, H, 1, t373;
<=, t372, t373, heap;
+, H, 1, H;
<=, H, t369, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L141;
L141:
jne, t370, 34, L142;
jmp, , , L143;
jmp, , , L142;
L142:
<=, H, t370, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t365, 1, t365;
=>, t365, t370, heap;
jmp, , , L141;
jmp, , , L143;
L143:
jmp, , , L144;
L144:
jne, t371, 34, L145;
jmp, , , L146;
jmp, , , L145;
L145:
<=, H, t371, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t368, 1, t368;
=>, t368, t371, heap;
jmp, , , L144;
jmp, , , L146;
L146:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 2, t376; // pos del arreglo 
=>, t376, t377, stack; //apuntador al heap del arreglo
=>, t377, t378, heap; // apuntador del heap al heap donde inicia la cadena
=>, t378, t374, heap; // size del arreglo texto
+, t378, 1, t375; // pos 0 donde inicia el arreglo texto
=>, t372, t379, heap; // pos que apunta al size de la cadena
=>, t379, t380, heap; // size de la cadena
+, t379, 1, t381; // Pos 0 de la cadena
=>, t381, t382, heap; // sacandor el caracter del heap cadena
jle, t380, t374, L147;
jmp, , , L148;
jmp, , , L147;
L147:
jne, t382, 34, L149;
jmp, , , L150;
jmp, , , L149;
L149:
<=, t375, t382, heap; // guardando el caracter 
+, t375, 1, t375; // incremnetnado la pos del arreglo
+, t381, 1, t381; // incrementando la pos de la cadena
=>, t381, t382, heap; // sacandor el caracter del heap cadena
jmp, , , L147;
jmp, , , L150;
L150:
jmp, , , L148;
L148:
+, P, 2, t383;
=>, t383, t384, stack; 
=>, t384, t385, heap; 
=>, t385, t386, heap; // valor de size del arreglo texto
+, t385, 1, t387; // apuntador donde inicia el arreglo texto
=>, t387, t388, heap; // primer caracter del arreglo texto
+, H, 0, t389;
+, H, 1, t390;
<=, t389, t390, heap; 
+, H, 1, H;
+, 0, 0, t391;
<=, H, t391, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L151:
jne, t388, 36, L152;
jmp, , , L153;
L152:
<=, H, t388, heap; // ingresando el caracter 
+, H, 1, H;
+, t391, 1, t391; // incrementando en uno el size de la nueva cadena
+, t387, 1, t387;
=>, t387, t388, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L151;
L153:
<=, t390, t391, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t389);

L3:
end, , Operaciones_vacio_aritmeticas




begin, , , Operaciones_vacio_operaciones_relacionales

// Resolviendo una cadena 
+, H, 0, t392; //apuntaodr a cadena 
+, H, 1, t393; //apu donde inicia la cadena
<=, t392, t393, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 36, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t394; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 118, heap; //guardadndo v
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t392);
-, 2, 10, t395;
jge, t395, 0, L156;
jmp, , , L157;
L156:

// Resolviendo una cadena 
+, H, 0, t396; //apuntaodr a cadena 
+, H, 1, t397; //apu donde inicia la cadena
<=, t396, t397, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t398; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t396);
jmp, , , L155; // salida del if
L157:

+, 15, 8, t399;
-, t399, 12, t400;
-, 22, 12, t401;
*, 5, 2, t402;
+, t401, t402, t403;
-, t403, 9, t404;
je, t400, t404, L159;
jmp, , , L160;
L159:

-, 11, 2, t405;
jne, 10, t405, L162;
jmp, , , L163;
L162:

// Resolviendo una cadena 
+, H, 0, t406; //apuntaodr a cadena 
+, H, 1, t407; //apu donde inicia la cadena
<=, t406, t407, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 17, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t408; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 69, heap; //guardadndo E
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 84, heap; //guardadndo T
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t406);
jmp, , , L161; // salida del if
L163:

// Resolviendo una cadena 
+, H, 0, t409; //apuntaodr a cadena 
+, H, 1, t410; //apu donde inicia la cadena
<=, t409, t410, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t411; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t409);
L161:
jmp, , , L158; // salida del if
L160:

je, 1, 1, L165;
jmp, , , L166;
L165:

// Resolviendo una cadena 
+, H, 0, t412; //apuntaodr a cadena 
+, H, 1, t413; //apu donde inicia la cadena
<=, t412, t413, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t414; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t412);
jmp, , , L164; // salida del if
L166:

// Resolviendo una cadena 
+, H, 0, t415; //apuntaodr a cadena 
+, H, 1, t416; //apu donde inicia la cadena
<=, t415, t416, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t417; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t415);
L164:
L158:
L155:

L154:
end, , Operaciones_vacio_operaciones_relacionales




begin, , , Operaciones_vacio_operaciones_logicas

// Resolviendo una cadena 
+, H, 0, t418; //apuntaodr a cadena 
+, H, 1, t419; //apu donde inicia la cadena
<=, t418, t419, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 32, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t420; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 54, heap; //guardadndo 6
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 76, heap; //guardadndo L
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 103, heap; //guardadndo g
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 118, heap; //guardadndo v
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t418);
*, 15, 2, t421;
/, 98, 2, t424;
-, 6, 1, t425;
je, 15, 14, L169;
jmp, , , L170;
L170:

jge, t421, 15, L171;
jmp, , , L172;
L171:

+, 1, 0, t422;
jmp, , , L176;
L172:

+, 0, 0, t422;
jmp, , , L176;
jmp, , , L176;
L176:
jl, 12, 24, L173;
jmp, , , L174;
L173:

+, 1, 0, t423;
jmp, , , L177;
L174:

+, 0, 0, t423;
jmp, , , L177;
jmp, , , L177;
L177:
jne, t422, t423, L178;jmp, , , L179;
L179:

je, t424, 15, L180;
jmp, , , L181;
L181:

jne, 15, t425, L182;
jmp, , , L183;



L169:
L178:
L180:
L183:

// Resolviendo una cadena 
+, H, 0, t426; //apuntaodr a cadena 
+, H, 1, t427; //apu donde inicia la cadena
<=, t426, t427, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 17, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t428; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 69, heap; //guardadndo E
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 84, heap; //guardadndo T
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t426);
jmp, , , L168; // salida del if
L182:

// Resolviendo una cadena 
+, H, 0, t429; //apuntaodr a cadena 
+, H, 1, t430; //apu donde inicia la cadena
<=, t429, t430, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t431; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t429);
L168:

L167:
end, , Operaciones_vacio_operaciones_logicas




begin, , , Operaciones_vacio_operaciones_conjuntas

// Resolviendo una cadena 
+, H, 0, t432; //apuntaodr a cadena 
+, H, 1, t433; //apu donde inicia la cadena
<=, t432, t433, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 24, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t434; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 55, heap; //guardadndo 7
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 106, heap; //guardadndo j
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t432);
*, 5, 3, t435;
-, t435, 1, t436;
-, 6, 1, t437;
je, t436, 14, L186;
jmp, , , L187;
L187:

je, 15, t437, L188;
jmp, , , L189;

L188:

// Resolviendo una cadena 
+, H, 0, t438; //apuntaodr a cadena 
+, H, 1, t439; //apu donde inicia la cadena
<=, t438, t439, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t440; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t438);
jmp, , , L185; // salida del if
L186:
L189:

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t441; // pos de var
<=, t441, 41, stack; // asignando a var
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 2, t442; // pos de var2
<=, t442, 954, stack; // asignando a var2
// ------------------------ Creando arreglo local salida
+, P, 3, t443; //pos de arreglo salida
<=, t443, H, stack; // ingrensando al stack apunt del heap para salida
+, H, 1, t444;
<=, H, t444, heap; //insetnado donde inicia el arreglo salida
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t445; //calculando el n real
-, t445, 0, t446; //iReal columna 0
+, t446, 1, t446; //size del arreglo salida
<=, H, t446, heap; // insertando el tamanio del arreglo linealizado salida
+, H, 1, H;
+, h, t446, h; // reservnado el espacio del arreglo salida
+, P, 3, t449; // pos del arreglo 
=>, t449, t450, stack; //apuntador al heap del arreglo
=>, t450, t451, heap; // apuntador del heap al heap donde inicia la cadena
=>, t451, t447, heap; // size del arreglo salida
+, t451, 1, t448; // pos 0 donde inicia el arreglo salida
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t452; // pos de var
=>, t452, t453, stack; // valor de lo que trae en el stack var
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t454; // inicio cad1 (inversa)
+, H, 1, t455;
<=, t454, t455, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t453, 0, t456;
+, 0, 0, t457;
+, 0, 0, t458;
+, 0, 0, t459;
+, t453, 0, t460;
L190:
jl, t457, t456, L191;
jmp, , , L192;
L191:
%%, t460, 0, t458;
+, t458, 48, t461;
<=, H, t461, heap;
+, H, 1, H; 
##, t460, 0, t460;
+, t457, 1, t457;
jmp, , , L190;
L192:
<=, H, 34, heap; 
+, H, 1, H;
<=, t455, t456, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t456, 0, t462;
+, t462, 0, t463;
+, t455, t462, t464; // pos inicial del primero caracter de la cadena
=>, t464, t465, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t466;
+, H, 1, t467;
<=, t466, t467, heap; 
+, H, 1, H;
+, H, 1, H;
L193:
jl, 0, t463, L194;
jmp, , , L195;
L194:
<=, H, t465, heap; // guardando caracterr actual
+, H, 1, H;
-, t464, 1, t464;
=>, t464, t465, heap;
-, t463, 1, t463;
jmp, , , L193;
L195:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t467, t462, heap;
=>, t466, t468, heap; // pos que apunta al size de la cadena
=>, t468, t469, heap; // size de la cadena
+, t468, 1, t470; // Pos 0 de la cadena
=>, t470, t471, heap; // sacandor el caracter del heap cadena
jle, t469, t447, L196;
jmp, , , L197;
jmp, , , L196;
L196:
jne, t471, 34, L198;
jmp, , , L199;
jmp, , , L198;
L198:
<=, t448, t471, heap; // guardando el caracter 
+, t448, 1, t448; // incremnetnado la pos del arreglo
+, t470, 1, t470; // incrementando la pos de la cadena
=>, t470, t471, heap; // sacandor el caracter del heap cadena
jmp, , , L196;
jmp, , , L199;
L199:
jmp, , , L197;
L197:
+, P, 3, t472;
=>, t472, t473, stack; 
=>, t473, t474, heap; 
=>, t474, t475, heap; // valor de size del arreglo salida
+, t474, 1, t476; // apuntador donde inicia el arreglo salida
=>, t476, t477, heap; // primer caracter del arreglo salida
+, H, 0, t478;
+, H, 1, t479;
<=, t478, t479, heap; 
+, H, 1, H;
+, 0, 0, t480;
<=, H, t480, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L200:
jne, t477, 36, L201;
jmp, , , L202;
L201:
<=, H, t477, heap; // ingresando el caracter 
+, H, 1, H;
+, t480, 1, t480; // incrementando en uno el size de la nueva cadena
+, t476, 1, t476;
=>, t476, t477, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L200;
L202:
<=, t479, t480, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 2, t481; // pos de var2
=>, t481, t482, stack; // valor de lo que trae en el stack var2
// Resolviendo una cadena 
+, H, 0, t483; //apuntaodr a cadena 
+, H, 1, t484; //apu donde inicia la cadena
<=, t483, t484, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t485; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t486; //apuntaodr a cadena 
+, H, 1, t487; //apu donde inicia la cadena
<=, t486, t487, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t488; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t489; // inicio cad1 (inversa)
+, H, 1, t490;
<=, t489, t490, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t482, 0, t491;
+, 0, 0, t492;
+, 0, 0, t493;
+, 0, 0, t494;
+, t482, 0, t495;
L203:
jl, t492, t491, L204;
jmp, , , L205;
L204:
%%, t495, 0, t493;
+, t493, 48, t496;
<=, H, t496, heap;
+, H, 1, H; 
##, t495, 0, t495;
+, t492, 1, t492;
jmp, , , L203;
L205:
<=, H, 34, heap; 
+, H, 1, H;
<=, t490, t491, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t491, 0, t497;
+, t497, 0, t498;
+, t490, t497, t499; // pos inicial del primero caracter de la cadena
=>, t499, t500, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t501;
+, H, 1, t502;
<=, t501, t502, heap; 
+, H, 1, H;
+, H, 1, H;
L206:
jl, 0, t498, L207;
jmp, , , L208;
L207:
<=, H, t500, heap; // guardando caracterr actual
+, H, 1, H;
-, t499, 1, t499;
=>, t499, t500, heap;
-, t498, 1, t498;
jmp, , , L206;
L208:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t502, t497, heap;
//Iniciando a concatnar cadenas 
=>, t483, t503, heap;
=>, t503, t504, heap; // size cadena1
+, t503, 1, t505; // pos 0 de la cadena 1
=>, t501, t506, heap;
=>, t506, t507, heap; // size cadena2
+, t506, 1, t508; // pos 0 de la cadena 2
+, t504, t507, t509; // size de la nueva cadena
=>, t505, t510, heap; // primer caracter de la cadena 1
=>, t508, t511, heap; // primer caracter de la cadena 2
+, H, 0, t512; // posicion de retorno de la cadena
+, H, 1, t513;
<=, t512, t513, heap;
+, H, 1, H;
<=, H, t509, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L209;
L209:
jne, t510, 34, L210;
jmp, , , L211;
jmp, , , L210;
L210:
<=, H, t510, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t505, 1, t505;
=>, t505, t510, heap;
jmp, , , L209;
jmp, , , L211;
L211:
jmp, , , L212;
L212:
jne, t511, 34, L213;
jmp, , , L214;
jmp, , , L213;
L213:
<=, H, t511, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t508, 1, t508;
=>, t508, t511, heap;
jmp, , , L212;
jmp, , , L214;
L214:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t512, t514, heap;
=>, t514, t515, heap; // size cadena1
+, t514, 1, t516; // pos 0 de la cadena 1
=>, t486, t517, heap;
=>, t517, t518, heap; // size cadena2
+, t517, 1, t519; // pos 0 de la cadena 2
+, t515, t518, t520; // size de la nueva cadena
=>, t516, t521, heap; // primer caracter de la cadena 1
=>, t519, t522, heap; // primer caracter de la cadena 2
+, H, 0, t523; // posicion de retorno de la cadena
+, H, 1, t524;
<=, t523, t524, heap;
+, H, 1, H;
<=, H, t520, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L215;
L215:
jne, t521, 34, L216;
jmp, , , L217;
jmp, , , L216;
L216:
<=, H, t521, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t516, 1, t516;
=>, t516, t521, heap;
jmp, , , L215;
jmp, , , L217;
L217:
jmp, , , L218;
L218:
jne, t522, 34, L219;
jmp, , , L220;
jmp, , , L219;
L219:
<=, H, t522, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t519, 1, t519;
=>, t519, t522, heap;
jmp, , , L218;
jmp, , , L220;
L220:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t478, t525, heap;
=>, t525, t526, heap; // size cadena1
+, t525, 1, t527; // pos 0 de la cadena 1
=>, t523, t528, heap;
=>, t528, t529, heap; // size cadena2
+, t528, 1, t530; // pos 0 de la cadena 2
+, t526, t529, t531; // size de la nueva cadena
=>, t527, t532, heap; // primer caracter de la cadena 1
=>, t530, t533, heap; // primer caracter de la cadena 2
+, H, 0, t534; // posicion de retorno de la cadena
+, H, 1, t535;
<=, t534, t535, heap;
+, H, 1, H;
<=, H, t531, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L221;
L221:
jne, t532, 34, L222;
jmp, , , L223;
jmp, , , L222;
L222:
<=, H, t532, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t527, 1, t527;
=>, t527, t532, heap;
jmp, , , L221;
jmp, , , L223;
L223:
jmp, , , L224;
L224:
jne, t533, 34, L225;
jmp, , , L226;
jmp, , , L225;
L225:
<=, H, t533, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t530, 1, t530;
=>, t530, t533, heap;
jmp, , , L224;
jmp, , , L226;
L226:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 3, t538; // pos del arreglo 
=>, t538, t539, stack; //apuntador al heap del arreglo
=>, t539, t540, heap; // apuntador del heap al heap donde inicia la cadena
=>, t540, t536, heap; // size del arreglo salida
+, t540, 1, t537; // pos 0 donde inicia el arreglo salida
=>, t534, t541, heap; // pos que apunta al size de la cadena
=>, t541, t542, heap; // size de la cadena
+, t541, 1, t543; // Pos 0 de la cadena
=>, t543, t544, heap; // sacandor el caracter del heap cadena
jle, t542, t536, L227;
jmp, , , L228;
jmp, , , L227;
L227:
jne, t544, 34, L229;
jmp, , , L230;
jmp, , , L229;
L229:
<=, t537, t544, heap; // guardando el caracter 
+, t537, 1, t537; // incremnetnado la pos del arreglo
+, t543, 1, t543; // incrementando la pos de la cadena
=>, t543, t544, heap; // sacandor el caracter del heap cadena
jmp, , , L227;
jmp, , , L230;
L230:
jmp, , , L228;
L228:
+, P, 3, t545;
=>, t545, t546, stack; 
=>, t546, t547, heap; 
=>, t547, t548, heap; // valor de size del arreglo salida
+, t547, 1, t549; // apuntador donde inicia el arreglo salida
=>, t549, t550, heap; // primer caracter del arreglo salida
+, H, 0, t551;
+, H, 1, t552;
<=, t551, t552, heap; 
+, H, 1, H;
+, 0, 0, t553;
<=, H, t553, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L231:
jne, t550, 36, L232;
jmp, , , L233;
L232:
<=, H, t550, heap; // ingresando el caracter 
+, H, 1, H;
+, t553, 1, t553; // incrementando en uno el size de la nueva cadena
+, t549, 1, t549;
=>, t549, t550, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L231;
L233:
<=, t552, t553, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t551);
+, P, 3, t554;
=>, t554, t555, stack; 
=>, t555, t556, heap; 
=>, t556, t557, heap; // valor de size del arreglo salida
+, t556, 1, t558; // apuntador donde inicia el arreglo salida
=>, t558, t559, heap; // primer caracter del arreglo salida
+, H, 0, t560;
+, H, 1, t561;
<=, t560, t561, heap; 
+, H, 1, H;
+, 0, 0, t562;
<=, H, t562, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L235:
jne, t559, 36, L236;
jmp, , , L237;
L236:
<=, H, t559, heap; // ingresando el caracter 
+, H, 1, H;
+, t562, 1, t562; // incrementando en uno el size de la nueva cadena
+, t558, 1, t558;
=>, t558, t559, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L235;
L237:
<=, t561, t562, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t563; //apuntaodr a cadena 
+, H, 1, t564; //apu donde inicia la cadena
<=, t563, t564, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 5, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t565; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 57, heap; //guardadndo 9
+, H, 1, H;
<=, H, 53, heap; //guardadndo 5
+, H, 1, H;
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// ------------ Obtenieido suma de caracteres de una cadena --------
=>, t563, t566, heap; // apunt al heap donde inicia la cadena
+, t566, 1, t567; // pos donde incia la cadena
=>, t567, t568, heap; // valor caracter  de la cadena
+, 0, 0, t569; //acumulador de la cadena
jmp, , , L240;
L240: //etiquera ciclo suma cadena
jne, t568, 34, L241;
jmp, , , L242;
L241:
+, t569, t568, t569; // sumando los caracteres 
+, t567, 1, t567; // sumando una posicion
=>, t567, t568, heap; // obteniendo el valor del caracter 
jmp, , , L240;
L242:
// ------------ Obtenieido suma de caracteres de una cadena --------
=>, t560, t570, heap; // apunt al heap donde inicia la cadena
+, t570, 1, t571; // pos donde incia la cadena
=>, t571, t572, heap; // valor caracter  de la cadena
+, 0, 0, t573; //acumulador de la cadena
jmp, , , L243;
L243: //etiquera ciclo suma cadena
jne, t572, 34, L244;
jmp, , , L245;
L244:
+, t573, t572, t573; // sumando los caracteres 
+, t571, 1, t571; // sumando una posicion
=>, t571, t572, heap; // obteniendo el valor del caracter 
jmp, , , L243;
L245:
je, t573, t569, L238;
jmp, , , L239;
L238:

// Resolviendo una cadena 
+, H, 0, t574; //apuntaodr a cadena 
+, H, 1, t575; //apu donde inicia la cadena
<=, t574, t575, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 16, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t576; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 58, heap; //guardadndo :
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 57, heap; //guardadndo 9
+, H, 1, H;
<=, H, 53, heap; //guardadndo 5
+, H, 1, H;
<=, H, 52, heap; //guardadndo 4
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t574);
jmp, , , L234; // salida del if
L239:

// Resolviendo una cadena 
+, H, 0, t577; //apuntaodr a cadena 
+, H, 1, t578; //apu donde inicia la cadena
<=, t577, t578, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 19, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t579; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t577);
L234:
L185:

L184:
end, , Operaciones_vacio_operaciones_conjuntas




begin, , , Inicio_PRINCIPAL

// ----------- Instancia a una variable local --------------
+, p, 0, t580; // pos de op
<=, t580, h, stack; //guardando referencia del heap para el objeto op
+, h, 1, t581; // guardo la posicion donde inicia el objeto 
<=, h, t581, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 0, h; // reservando espacio para el objeto op
//Ingresando referencia al this del objeto op
+, p, 0, t582; // pos de op
=>, t582, t583, stack; // obteniendo apuntador de op
+, p, 2, t584; // simulando cambio de ambito
+, t584, 0, t585; //pos del this de op
<=, t585, t583, stack; // insertando apuntador del heap al stack del obeto op
// No posee parametros 
+, p, 2, p; // simulando cambio de ambito
call, , , Operaciones_vacio_operaciones;
-, p, 2, p; // regresando al ambito acutal

// ----------------- Resolviendo acceso local 
+, P, 0, t586; // pos del objeto
=>, t586, t588, stack; //apuntador al heap del obejto
+, P, 6, t589;
+, t589, 0, t590;
<=, t590, t588, stack; // pasadon como refeenria el valor del this
+, P, 6, P;
call, , , Operaciones_vacio_aritmeticas;
+, P, 5, t591;
=>, t591, t592, stack; // valor del return
-, P, 6, P;
=>, t591, t593, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t594; // pos del objeto
=>, t594, t596, stack; //apuntador al heap del obejto
+, P, 2, t597;
+, t597, 0, t598;
<=, t598, t596, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , Operaciones_vacio_operaciones_relacionales;
+, P, 1, t599;
=>, t599, t600, stack; // valor del return
-, P, 2, P;
=>, t599, t601, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t602; // pos del objeto
=>, t602, t604, stack; //apuntador al heap del obejto
+, P, 2, t605;
+, t605, 0, t606;
<=, t606, t604, stack; // pasadon como refeenria el valor del this
+, P, 2, P;
call, , , Operaciones_vacio_operaciones_logicas;
+, P, 1, t607;
=>, t607, t608, stack; // valor del return
-, P, 2, P;
=>, t607, t609, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 0, t610; // pos del objeto
=>, t610, t612, stack; //apuntador al heap del obejto
+, P, 5, t613;
+, t613, 0, t614;
<=, t614, t612, stack; // pasadon como refeenria el valor del this
+, P, 5, P;
call, , , Operaciones_vacio_operaciones_conjuntas;
+, P, 4, t615;
=>, t615, t616, stack; // valor del return
-, P, 5, P;
=>, t615, t617, stack; // valor a retoranar del acceso
// ----------- Instancia a una variable local --------------
+, p, 1, t618; // pos de fun
<=, t618, h, stack; //guardando referencia del heap para el objeto fun
+, h, 1, t619; // guardo la posicion donde inicia el objeto 
<=, h, t619, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 0, h; // reservando espacio para el objeto fun
//Ingresando referencia al this del objeto fun
+, p, 1, t620; // pos de fun
=>, t620, t621, stack; // obteniendo apuntador de fun
+, p, 2, t622; // simulando cambio de ambito
+, t622, 0, t623; //pos del this de fun
<=, t623, t621, stack; // insertando apuntador del heap al stack del obeto fun
// No posee parametros 
+, p, 2, p; // simulando cambio de ambito
call, , , Funciones_vacio_funciones;
-, p, 2, p; // regresando al ambito acutal

// ----------------- Resolviendo acceso local 
+, P, 1, t624; // pos del objeto
=>, t624, t626, stack; //apuntador al heap del obejto
+, P, 3, t627;
+, t627, 0, t628;
<=, t628, t626, stack; // pasadon como refeenria el valor del this
+, P, 3, P;
call, , , Funciones_vacio_saludo;
+, P, 2, t629;
=>, t629, t630, stack; // valor del return
-, P, 3, P;
=>, t629, t631, stack; // valor a retoranar del acceso
// ----------------- Resolviendo acceso local 
+, P, 1, t632; // pos del objeto
=>, t632, t634, stack; //apuntador al heap del obejto
+, P, 7, t635;
+, t635, 0, t636;
<=, t636, t634, stack; // pasadon como refeenria el valor del this
+, P, 7, P;
call, , , Funciones_vacio_ciclo_vida;
+, P, 6, t637;
=>, t637, t638, stack; // valor del return
-, P, 7, P;
=>, t637, t639, stack; // valor a retoranar del acceso

L246:
end, , Inicio_PRINCIPAL




begin, , , Funciones_vacio_funciones


L247:
end, , Funciones_vacio_funciones




begin, , , Funciones_vacio_saludo

// Resolviendo una cadena 
+, H, 0, t640; //apuntaodr a cadena 
+, H, 1, t641; //apu donde inicia la cadena
<=, t640, t641, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 10, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t642; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 48, heap; //guardadndo 0
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t640);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t643; // pos de conta
<=, t643, 0, stack; // asignando a conta
// ---------- Resolver Hacer Mientras ----------- 
L249:
// --------------------- Inicio evaluar_si --------------------------
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t644; // pos de conta
=>, t644, t645, stack; // valor de lo que trae en el stack conta
je, t645, 0, L253; // verdadero del caso 1
jmp, , , L257; // falsa del caso 1
L257:
je, t645, 1, L254; // verdadero del caso 2
jmp, , , L258; // falsa del caso 2
L258:
je, t645, 2, L255; // verdadero del caso 3
jmp, , , L259; // falsa del caso 3
L259:
je, t645, 3, L256; // verdadero del caso 4
jmp, , , L260; // falsa del caso 4
L260:
jmp, , , L261; // ir al por defecto
L253:
// Resolviendo una cadena 
+, H, 0, t646; //apuntaodr a cadena 
+, H, 1, t647; //apu donde inicia la cadena
<=, t646, t647, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 4, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t648; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 69, heap; //guardadndo E
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t646);
jmp, , , L252; // haciendo un romper 
L254:
// Resolviendo una cadena 
+, H, 0, t649; //apuntaodr a cadena 
+, H, 1, t650; //apu donde inicia la cadena
<=, t649, t650, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 7, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t651; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t649);
jmp, , , L252; // haciendo un romper 
L255:
// Resolviendo una cadena 
+, H, 0, t652; //apuntaodr a cadena 
+, H, 1, t653; //apu donde inicia la cadena
<=, t652, t653, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 3, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t654; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t652);
jmp, , , L252; // haciendo un romper 
L256:
// Resolviendo una cadena 
+, H, 0, t655; //apuntaodr a cadena 
+, H, 1, t656; //apu donde inicia la cadena
<=, t655, t656, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 11, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t657; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 79, heap; //guardadndo O
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 82, heap; //guardadndo R
+, H, 1, H;
<=, H, 69, heap; //guardadndo E
+, H, 1, H;
<=, H, 67, heap; //guardadndo C
+, H, 1, H;
<=, H, 84, heap; //guardadndo T
+, H, 1, H;
<=, H, 65, heap; //guardadndo A
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t655);
jmp, , , L252; // haciendo un romper 
L261:
// Resolviendo una cadena 
+, H, 0, t658; //apuntaodr a cadena 
+, H, 1, t659; //apu donde inicia la cadena
<=, t658, t659, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 20, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t660; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 83, heap; //guardadndo S
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 33, heap; //guardadndo !
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t658);
L252: // break de evaluar _si
// --------------------- Fin evaluar_si --------------------------
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t661; // pos de conta
=>, t661, t662, stack; // valor de lo que trae en el stack conta
+, t662, 1, t663;
<=, t661, t663, STACK; // asignando operaicon con unario
L251: //etiqueta del conituar
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t664; // pos de conta
=>, t664, t665, stack; // valor de lo que trae en el stack conta
jl, t665, 4, L262;
jmp, , , L263;
L262:

jmp, , , L249;
L263:

L250:

L248:
end, , Funciones_vacio_saludo




begin, , , Funciones_vacio_ciclo_vida

// Resolviendo una cadena 
+, H, 0, t666; //apuntaodr a cadena 
+, H, 1, t667; //apu donde inicia la cadena
<=, t666, t667, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 14, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t668; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 95, heap; //guardadndo _
+, H, 1, H;
<=, H, 118, heap; //guardadndo v
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t666);
// ----------- Instancia a una variable local --------------
+, p, 1, t669; // pos de carlos
<=, t669, h, stack; //guardando referencia del heap para el objeto carlos
+, h, 1, t670; // guardo la posicion donde inicia el objeto 
<=, h, t670, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 5, h; // reservando espacio para el objeto carlos
//Ingresando referencia al this del objeto carlos
+, p, 1, t671; // pos de carlos
=>, t671, t672, stack; // obteniendo apuntador de carlos
+, p, 7, t673; // simulando cambio de ambito
+, t673, 0, t674; //pos del this de carlos
<=, t674, t672, stack; // insertando apuntador del heap al stack del obeto carlos
// Asignando parametros  
+, p, 7, t675; // size de funcion actual
+, t675, 1, t676; //pos del parametro 1
<=, t676, 16, stack; // asignado al stack el parametro
+, p, 7, t677; // size de funcion actual
+, t677, 2, t678; //pos del parametro 2
// declarando parametros  arreglo de tipo nombre2
// ------------------------ Creando arreglo local nombre2
+, P, t678, t679; //pos de arreglo nombre2
<=, t679, H, stack; // ingrensando al stack apunt del heap para nombre2
+, H, 1, t680;
<=, H, t680, heap; //insetnado donde inicia el arreglo nombre2
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t681; //calculando el n real
-, t681, 0, t682; //iReal columna 0
+, t682, 1, t682; //size del arreglo nombre2
<=, H, t682, heap; // insertando el tamanio del arreglo linealizado nombre2
+, H, 1, H;
+, h, t682, h; // reservnado el espacio del arreglo nombre2
// Resolviendo una cadena 
+, H, 0, t683; //apuntaodr a cadena 
+, H, 1, t684; //apu donde inicia la cadena
<=, t683, t684, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 4, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t685; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 74, heap; //guardadndo J
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
<=, t678, t683, stack; // asignado al stack el parametro
+, p, 7, t686; // size de funcion actual
+, t686, 3, t687; //pos del parametro 3
// declarando parametros  arreglo de tipo apellido2
// ------------------------ Creando arreglo local apellido2
+, P, t687, t688; //pos de arreglo apellido2
<=, t688, H, stack; // ingrensando al stack apunt del heap para apellido2
+, H, 1, t689;
<=, H, t689, heap; //insetnado donde inicia el arreglo apellido2
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t690; //calculando el n real
-, t690, 0, t691; //iReal columna 0
+, t691, 1, t691; //size del arreglo apellido2
<=, H, t691, heap; // insertando el tamanio del arreglo linealizado apellido2
+, H, 1, H;
+, h, t691, h; // reservnado el espacio del arreglo apellido2
// Resolviendo una cadena 
+, H, 0, t692; //apuntaodr a cadena 
+, H, 1, t693; //apu donde inicia la cadena
<=, t692, t693, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 8, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t694; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 77, heap; //guardadndo M
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 122, heap; //guardadndo z
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
<=, t687, t692, stack; // asignado al stack el parametro
+, p, 7, t695; // size de funcion actual
+, t695, 4, t696; //pos del parametro 4
<=, t696, 77, stack; // asignado al stack el parametro
+, p, 7, p; // simulando cambio de ambito
call, , , Persona_vacio_Persona_entero_caracter_caracter_caracter;
-, p, 7, p; // regresando al ambito acutal

// ----------- Instancia a una variable local --------------
+, p, 2, t697; // pos de Josefina
<=, t697, h, stack; //guardando referencia del heap para el objeto Josefina
+, h, 1, t698; // guardo la posicion donde inicia el objeto 
<=, h, t698, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 5, h; // reservando espacio para el objeto Josefina
//Ingresando referencia al this del objeto Josefina
+, p, 2, t699; // pos de Josefina
=>, t699, t700, stack; // obteniendo apuntador de Josefina
+, p, 7, t701; // simulando cambio de ambito
+, t701, 0, t702; //pos del this de Josefina
<=, t702, t700, stack; // insertando apuntador del heap al stack del obeto Josefina
// Asignando parametros  
+, p, 7, t703; // size de funcion actual
+, t703, 1, t704; //pos del parametro 1
<=, t704, 15, stack; // asignado al stack el parametro
+, p, 7, t705; // size de funcion actual
+, t705, 2, t706; //pos del parametro 2
// declarando parametros  arreglo de tipo nombre2
// ------------------------ Creando arreglo local nombre2
+, P, t706, t707; //pos de arreglo nombre2
<=, t707, H, stack; // ingrensando al stack apunt del heap para nombre2
+, H, 1, t708;
<=, H, t708, heap; //insetnado donde inicia el arreglo nombre2
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t709; //calculando el n real
-, t709, 0, t710; //iReal columna 0
+, t710, 1, t710; //size del arreglo nombre2
<=, H, t710, heap; // insertando el tamanio del arreglo linealizado nombre2
+, H, 1, H;
+, h, t710, h; // reservnado el espacio del arreglo nombre2
// Resolviendo una cadena 
+, H, 0, t711; //apuntaodr a cadena 
+, H, 1, t712; //apu donde inicia la cadena
<=, t711, t712, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 5, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t713; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 76, heap; //guardadndo L
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
<=, t706, t711, stack; // asignado al stack el parametro
+, p, 7, t714; // size de funcion actual
+, t714, 3, t715; //pos del parametro 3
// declarando parametros  arreglo de tipo apellido2
// ------------------------ Creando arreglo local apellido2
+, P, t715, t716; //pos de arreglo apellido2
<=, t716, H, stack; // ingrensando al stack apunt del heap para apellido2
+, H, 1, t717;
<=, H, t717, heap; //insetnado donde inicia el arreglo apellido2
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t718; //calculando el n real
-, t718, 0, t719; //iReal columna 0
+, t719, 1, t719; //size del arreglo apellido2
<=, H, t719, heap; // insertando el tamanio del arreglo linealizado apellido2
+, H, 1, H;
+, h, t719, h; // reservnado el espacio del arreglo apellido2
// Resolviendo una cadena 
+, H, 0, t720; //apuntaodr a cadena 
+, H, 1, t721; //apu donde inicia la cadena
<=, t720, t721, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 5, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t722; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 84, heap; //guardadndo T
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
<=, t715, t720, stack; // asignado al stack el parametro
+, p, 7, t723; // size de funcion actual
+, t723, 4, t724; //pos del parametro 4
<=, t724, 70, stack; // asignado al stack el parametro
+, p, 7, p; // simulando cambio de ambito
call, , , Persona_vacio_Persona_entero_caracter_caracter_caracter;
-, p, 7, p; // regresando al ambito acutal

// ----------- Instancia a una variable local --------------
+, p, 3, t725; // pos de Carlitos
<=, t725, h, stack; //guardando referencia del heap para el objeto Carlitos
+, h, 1, t726; // guardo la posicion donde inicia el objeto 
<=, h, t726, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 5, h; // reservando espacio para el objeto Carlitos
//Ingresando referencia al this del objeto Carlitos
+, p, 3, t727; // pos de Carlitos
=>, t727, t728, stack; // obteniendo apuntador de Carlitos
+, p, 7, t729; // simulando cambio de ambito
+, t729, 0, t730; //pos del this de Carlitos
<=, t730, t728, stack; // insertando apuntador del heap al stack del obeto Carlitos
// No posee parametros 
+, p, 7, p; // simulando cambio de ambito
call, , , Persona_vacio_Persona;
-, p, 7, p; // regresando al ambito acutal

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 4, t731; // pos de cont
<=, t731, 0, stack; // asignando a cont
// Resolviendo un repetur mientras
jmp, , ,L265; //regresando a la etiqueral del ciclo repetir- mientras
L265:
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t732; // pos de cont
=>, t732, t733, stack; // valor de lo que trae en el stack cont
jl, t733, 4, L266;
jmp, , , L267;
L266:

// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t734; // pos de cont
=>, t734, t735, stack; // valor de lo que trae en el stack cont
+, t735, 1, t736;
<=, t734, t736, STACK; // asignando operaicon con unario
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t737; // pos de cont
=>, t737, t738, stack; // valor de lo que trae en el stack cont
je, t738, 4, L269;
jmp, , , L270;
L269:

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 3, t739; // pos de Carlitos
// ----------------- Resolviendo acceso local 
+, P, 1, t740; // pos del objeto
=>, t740, t742, stack; //apuntador al heap del obejto
+, P, 7, t743;
+, t743, 0, t744;
<=, t744, t742, stack; // pasadon como refeenria el valor del this
+, P, 7, P;
call, , , Persona_Persona_reproducir_Persona_caracter;
+, P, 6, t745;
=>, t745, t746, stack; // valor del return
-, P, 7, P;
=>, t745, t747, stack; // valor a retoranar del acceso
<=, t739, t747, stack; // asignando a Carlitos
// ----------------- Resolviendo acceso local 
+, P, 2, t748; // pos del objeto
=>, t748, t750, stack; //apuntador al heap del obejto
+, P, 4, t751;
+, t751, 0, t752;
<=, t752, t750, stack; // pasadon como refeenria el valor del this
+, P, 4, P;
call, , , Persona_vacio_matrimonio_Persona;
+, P, 3, t753;
=>, t753, t754, stack; // valor del return
-, P, 4, P;
=>, t753, t755, stack; // valor a retoranar del acceso
// ------------------------ Creando arreglo local text
+, P, 5, t756; //pos de arreglo text
<=, t756, H, stack; // ingrensando al stack apunt del heap para text
+, H, 1, t757;
<=, H, t757, heap; //insetnado donde inicia el arreglo text
+, H, 1, H;
// calculando el tamanho del arreglo
-, 80, 1, t758; //calculando el n real
-, t758, 0, t759; //iReal columna 0
+, t759, 1, t759; //size del arreglo text
<=, H, t759, heap; // insertando el tamanio del arreglo linealizado text
+, H, 1, H;
+, h, t759, h; // reservnado el espacio del arreglo text
+, P, 5, t762; // pos del arreglo 
=>, t762, t763, stack; //apuntador al heap del arreglo
=>, t763, t764, heap; // apuntador del heap al heap donde inicia la cadena
=>, t764, t760, heap; // size del arreglo text
+, t764, 1, t761; // pos 0 donde inicia el arreglo text
// Resolviendo una cadena 
+, H, 0, t765; //apuntaodr a cadena 
+, H, 1, t766; //apu donde inicia la cadena
<=, t765, t766, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t767; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 78, heap; //guardadndo N
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 72, heap; //guardadndo H
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 106, heap; //guardadndo j
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 58, heap; //guardadndo :
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
=>, t765, t768, heap; // pos que apunta al size de la cadena
=>, t768, t769, heap; // size de la cadena
+, t768, 1, t770; // Pos 0 de la cadena
=>, t770, t771, heap; // sacandor el caracter del heap cadena
jle, t769, t760, L271;
jmp, , , L272;
jmp, , , L271;
L271:
jne, t771, 34, L273;
jmp, , , L274;
jmp, , , L273;
L273:
<=, t761, t771, heap; // guardando el caracter 
+, t761, 1, t761; // incremnetnado la pos del arreglo
+, t770, 1, t770; // incrementando la pos de la cadena
=>, t770, t771, heap; // sacandor el caracter del heap cadena
jmp, , , L271;
jmp, , , L274;
L274:
jmp, , , L272;
L272:
// ----------------- Resolviendo acceso local 
+, P, 3, t772; // pos del objeto
=>, t772, t774, stack; //apuntador al heap del obejto
=>, t774, t775, heap; // recuperando pos incial del objeto
+, t775, 0, t774;
=>, t774, t776, heap; // valor a retoranar del acceso
print("%a", t774);
+, P, 5, t777;
=>, t777, t778, stack; 
=>, t778, t779, heap; 
=>, t779, t780, heap; // valor de size del arreglo text
+, t779, 1, t781; // apuntador donde inicia el arreglo text
=>, t781, t782, heap; // primer caracter del arreglo text
+, H, 0, t783;
+, H, 1, t784;
<=, t783, t784, heap; 
+, H, 1, H;
+, 0, 0, t785;
<=, H, t785, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L275:
jne, t782, 36, L276;
jmp, , , L277;
L276:
<=, H, t782, heap; // ingresando el caracter 
+, H, 1, H;
+, t785, 1, t785; // incrementando en uno el size de la nueva cadena
+, t781, 1, t781;
=>, t781, t782, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L275;
L277:
<=, t784, t785, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 3, t786; // pos del objeto
=>, t786, t788, stack; //apuntador al heap del obejto
=>, t788, t789, heap; // recuperando pos incial del objeto
+, t789, 0, t788;
=>, t788, t790, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t791;
+, H, 1, t792;
<=, t791, t792, heap;
+, H, 1, H;
+, H, 1, H;
=>, t788, t793, heap; 
+, t793, 1, t794;
=>, t794, t795, heap; // caracter actual
+, 0, 0, t796;
L278:
jne, t795, 36, L279;
jmp, , , L280;
L279:
+, t796, 1, t796;
<=, H, t795, heap;
+, H, 1, H;
+, t794, 1, t794;
=>, t794, t795, heap; // caracter actual
jmp, , , L278;
L280:
<=, H, 34, heap;
+, H, 1, H;
<=, t792, t796, heap;
//Iniciando a concatnar cadenas 
=>, t783, t797, heap;
=>, t797, t798, heap; // size cadena1
+, t797, 1, t799; // pos 0 de la cadena 1
=>, t791, t800, heap;
=>, t800, t801, heap; // size cadena2
+, t800, 1, t802; // pos 0 de la cadena 2
+, t798, t801, t803; // size de la nueva cadena
=>, t799, t804, heap; // primer caracter de la cadena 1
=>, t802, t805, heap; // primer caracter de la cadena 2
+, H, 0, t806; // posicion de retorno de la cadena
+, H, 1, t807;
<=, t806, t807, heap;
+, H, 1, H;
<=, H, t803, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L281;
L281:
jne, t804, 34, L282;
jmp, , , L283;
jmp, , , L282;
L282:
<=, H, t804, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t799, 1, t799;
=>, t799, t804, heap;
jmp, , , L281;
jmp, , , L283;
L283:
jmp, , , L284;
L284:
jne, t805, 34, L285;
jmp, , , L286;
jmp, , , L285;
L285:
<=, H, t805, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t802, 1, t802;
=>, t802, t805, heap;
jmp, , , L284;
jmp, , , L286;
L286:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 5, t810; // pos del arreglo 
=>, t810, t811, stack; //apuntador al heap del arreglo
=>, t811, t812, heap; // apuntador del heap al heap donde inicia la cadena
=>, t812, t808, heap; // size del arreglo text
+, t812, 1, t809; // pos 0 donde inicia el arreglo text
=>, t806, t813, heap; // pos que apunta al size de la cadena
=>, t813, t814, heap; // size de la cadena
+, t813, 1, t815; // Pos 0 de la cadena
=>, t815, t816, heap; // sacandor el caracter del heap cadena
jle, t814, t808, L287;
jmp, , , L288;
jmp, , , L287;
L287:
jne, t816, 34, L289;
jmp, , , L290;
jmp, , , L289;
L289:
<=, t809, t816, heap; // guardando el caracter 
+, t809, 1, t809; // incremnetnado la pos del arreglo
+, t815, 1, t815; // incrementando la pos de la cadena
=>, t815, t816, heap; // sacandor el caracter del heap cadena
jmp, , , L287;
jmp, , , L290;
L290:
jmp, , , L288;
L288:
+, P, 5, t817;
=>, t817, t818, stack; 
=>, t818, t819, heap; 
=>, t819, t820, heap; // valor de size del arreglo text
+, t819, 1, t821; // apuntador donde inicia el arreglo text
=>, t821, t822, heap; // primer caracter del arreglo text
+, H, 0, t823;
+, H, 1, t824;
<=, t823, t824, heap; 
+, H, 1, H;
+, 0, 0, t825;
<=, H, t825, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L291:
jne, t822, 36, L292;
jmp, , , L293;
L292:
<=, H, t822, heap; // ingresando el caracter 
+, H, 1, H;
+, t825, 1, t825; // incrementando en uno el size de la nueva cadena
+, t821, 1, t821;
=>, t821, t822, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L291;
L293:
<=, t824, t825, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 3, t826; // pos del objeto
=>, t826, t828, stack; //apuntador al heap del obejto
=>, t828, t829, heap; // recuperando pos incial del objeto
+, t829, 4, t828;
=>, t828, t830, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t831;
+, H, 1, t832;
<=, t831, t832, heap;
+, H, 1, H;
+, H, 1, H;
=>, t828, t833, heap; 
+, t833, 1, t834;
=>, t834, t835, heap; // caracter actual
+, 0, 0, t836;
L294:
jne, t835, 36, L295;
jmp, , , L296;
L295:
+, t836, 1, t836;
<=, H, t835, heap;
+, H, 1, H;
+, t834, 1, t834;
=>, t834, t835, heap; // caracter actual
jmp, , , L294;
L296:
<=, H, 34, heap;
+, H, 1, H;
<=, t832, t836, heap;
//Iniciando a concatnar cadenas 
=>, t823, t837, heap;
=>, t837, t838, heap; // size cadena1
+, t837, 1, t839; // pos 0 de la cadena 1
=>, t831, t840, heap;
=>, t840, t841, heap; // size cadena2
+, t840, 1, t842; // pos 0 de la cadena 2
+, t838, t841, t843; // size de la nueva cadena
=>, t839, t844, heap; // primer caracter de la cadena 1
=>, t842, t845, heap; // primer caracter de la cadena 2
+, H, 0, t846; // posicion de retorno de la cadena
+, H, 1, t847;
<=, t846, t847, heap;
+, H, 1, H;
<=, H, t843, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L297;
L297:
jne, t844, 34, L298;
jmp, , , L299;
jmp, , , L298;
L298:
<=, H, t844, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t839, 1, t839;
=>, t839, t844, heap;
jmp, , , L297;
jmp, , , L299;
L299:
jmp, , , L300;
L300:
jne, t845, 34, L301;
jmp, , , L302;
jmp, , , L301;
L301:
<=, H, t845, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t842, 1, t842;
=>, t842, t845, heap;
jmp, , , L300;
jmp, , , L302;
L302:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 5, t850; // pos del arreglo 
=>, t850, t851, stack; //apuntador al heap del arreglo
=>, t851, t852, heap; // apuntador del heap al heap donde inicia la cadena
=>, t852, t848, heap; // size del arreglo text
+, t852, 1, t849; // pos 0 donde inicia el arreglo text
=>, t846, t853, heap; // pos que apunta al size de la cadena
=>, t853, t854, heap; // size de la cadena
+, t853, 1, t855; // Pos 0 de la cadena
=>, t855, t856, heap; // sacandor el caracter del heap cadena
jle, t854, t848, L303;
jmp, , , L304;
jmp, , , L303;
L303:
jne, t856, 34, L305;
jmp, , , L306;
jmp, , , L305;
L305:
<=, t849, t856, heap; // guardando el caracter 
+, t849, 1, t849; // incremnetnado la pos del arreglo
+, t855, 1, t855; // incrementando la pos de la cadena
=>, t855, t856, heap; // sacandor el caracter del heap cadena
jmp, , , L303;
jmp, , , L306;
L306:
jmp, , , L304;
L304:
+, P, 5, t857;
=>, t857, t858, stack; 
=>, t858, t859, heap; 
=>, t859, t860, heap; // valor de size del arreglo text
+, t859, 1, t861; // apuntador donde inicia el arreglo text
=>, t861, t862, heap; // primer caracter del arreglo text
+, H, 0, t863;
+, H, 1, t864;
<=, t863, t864, heap; 
+, H, 1, H;
+, 0, 0, t865;
<=, H, t865, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L307:
jne, t862, 36, L308;
jmp, , , L309;
L308:
<=, H, t862, heap; // ingresando el caracter 
+, H, 1, H;
+, t865, 1, t865; // incrementando en uno el size de la nueva cadena
+, t861, 1, t861;
=>, t861, t862, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L307;
L309:
<=, t864, t865, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t863);
// Resolviendo una cadena 
+, H, 0, t866; //apuntaodr a cadena 
+, H, 1, t867; //apu donde inicia la cadena
<=, t866, t867, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 15, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t868; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 78, heap; //guardadndo N
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 58, heap; //guardadndo :
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 5, t871; // pos del arreglo 
=>, t871, t872, stack; //apuntador al heap del arreglo
=>, t872, t873, heap; // apuntador del heap al heap donde inicia la cadena
=>, t873, t869, heap; // size del arreglo text
+, t873, 1, t870; // pos 0 donde inicia el arreglo text
=>, t866, t874, heap; // pos que apunta al size de la cadena
=>, t874, t875, heap; // size de la cadena
+, t874, 1, t876; // Pos 0 de la cadena
=>, t876, t877, heap; // sacandor el caracter del heap cadena
jle, t875, t869, L310;
jmp, , , L311;
jmp, , , L310;
L310:
jne, t877, 34, L312;
jmp, , , L313;
jmp, , , L312;
L312:
<=, t870, t877, heap; // guardando el caracter 
+, t870, 1, t870; // incremnetnado la pos del arreglo
+, t876, 1, t876; // incrementando la pos de la cadena
=>, t876, t877, heap; // sacandor el caracter del heap cadena
jmp, , , L310;
jmp, , , L313;
L313:
jmp, , , L311;
L311:
// ----------------- Resolviendo acceso local 
+, P, 2, t878; // pos del objeto
=>, t878, t880, stack; //apuntador al heap del obejto
=>, t880, t881, heap; // recuperando pos incial del objeto
+, t881, 0, t880;
=>, t880, t882, heap; // valor a retoranar del acceso
print("%a", t880);
+, P, 5, t883;
=>, t883, t884, stack; 
=>, t884, t885, heap; 
=>, t885, t886, heap; // valor de size del arreglo text
+, t885, 1, t887; // apuntador donde inicia el arreglo text
=>, t887, t888, heap; // primer caracter del arreglo text
+, H, 0, t889;
+, H, 1, t890;
<=, t889, t890, heap; 
+, H, 1, H;
+, 0, 0, t891;
<=, H, t891, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L314:
jne, t888, 36, L315;
jmp, , , L316;
L315:
<=, H, t888, heap; // ingresando el caracter 
+, H, 1, H;
+, t891, 1, t891; // incrementando en uno el size de la nueva cadena
+, t887, 1, t887;
=>, t887, t888, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L314;
L316:
<=, t890, t891, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 2, t892; // pos del objeto
=>, t892, t894, stack; //apuntador al heap del obejto
=>, t894, t895, heap; // recuperando pos incial del objeto
+, t895, 0, t894;
=>, t894, t896, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t897;
+, H, 1, t898;
<=, t897, t898, heap;
+, H, 1, H;
+, H, 1, H;
=>, t894, t899, heap; 
+, t899, 1, t900;
=>, t900, t901, heap; // caracter actual
+, 0, 0, t902;
L317:
jne, t901, 36, L318;
jmp, , , L319;
L318:
+, t902, 1, t902;
<=, H, t901, heap;
+, H, 1, H;
+, t900, 1, t900;
=>, t900, t901, heap; // caracter actual
jmp, , , L317;
L319:
<=, H, 34, heap;
+, H, 1, H;
<=, t898, t902, heap;
//Iniciando a concatnar cadenas 
=>, t889, t903, heap;
=>, t903, t904, heap; // size cadena1
+, t903, 1, t905; // pos 0 de la cadena 1
=>, t897, t906, heap;
=>, t906, t907, heap; // size cadena2
+, t906, 1, t908; // pos 0 de la cadena 2
+, t904, t907, t909; // size de la nueva cadena
=>, t905, t910, heap; // primer caracter de la cadena 1
=>, t908, t911, heap; // primer caracter de la cadena 2
+, H, 0, t912; // posicion de retorno de la cadena
+, H, 1, t913;
<=, t912, t913, heap;
+, H, 1, H;
<=, H, t909, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L320;
L320:
jne, t910, 34, L321;
jmp, , , L322;
jmp, , , L321;
L321:
<=, H, t910, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t905, 1, t905;
=>, t905, t910, heap;
jmp, , , L320;
jmp, , , L322;
L322:
jmp, , , L323;
L323:
jne, t911, 34, L324;
jmp, , , L325;
jmp, , , L324;
L324:
<=, H, t911, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t908, 1, t908;
=>, t908, t911, heap;
jmp, , , L323;
jmp, , , L325;
L325:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 5, t916; // pos del arreglo 
=>, t916, t917, stack; //apuntador al heap del arreglo
=>, t917, t918, heap; // apuntador del heap al heap donde inicia la cadena
=>, t918, t914, heap; // size del arreglo text
+, t918, 1, t915; // pos 0 donde inicia el arreglo text
=>, t912, t919, heap; // pos que apunta al size de la cadena
=>, t919, t920, heap; // size de la cadena
+, t919, 1, t921; // Pos 0 de la cadena
=>, t921, t922, heap; // sacandor el caracter del heap cadena
jle, t920, t914, L326;
jmp, , , L327;
jmp, , , L326;
L326:
jne, t922, 34, L328;
jmp, , , L329;
jmp, , , L328;
L328:
<=, t915, t922, heap; // guardando el caracter 
+, t915, 1, t915; // incremnetnado la pos del arreglo
+, t921, 1, t921; // incrementando la pos de la cadena
=>, t921, t922, heap; // sacandor el caracter del heap cadena
jmp, , , L326;
jmp, , , L329;
L329:
jmp, , , L327;
L327:
+, P, 5, t923;
=>, t923, t924, stack; 
=>, t924, t925, heap; 
=>, t925, t926, heap; // valor de size del arreglo text
+, t925, 1, t927; // apuntador donde inicia el arreglo text
=>, t927, t928, heap; // primer caracter del arreglo text
+, H, 0, t929;
+, H, 1, t930;
<=, t929, t930, heap; 
+, H, 1, H;
+, 0, 0, t931;
<=, H, t931, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L330:
jne, t928, 36, L331;
jmp, , , L332;
L331:
<=, H, t928, heap; // ingresando el caracter 
+, H, 1, H;
+, t931, 1, t931; // incrementando en uno el size de la nueva cadena
+, t927, 1, t927;
=>, t927, t928, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L330;
L332:
<=, t930, t931, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 2, t932; // pos del objeto
=>, t932, t934, stack; //apuntador al heap del obejto
=>, t934, t935, heap; // recuperando pos incial del objeto
+, t935, 4, t934;
=>, t934, t936, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t937;
+, H, 1, t938;
<=, t937, t938, heap;
+, H, 1, H;
+, H, 1, H;
=>, t934, t939, heap; 
+, t939, 1, t940;
=>, t940, t941, heap; // caracter actual
+, 0, 0, t942;
L333:
jne, t941, 36, L334;
jmp, , , L335;
L334:
+, t942, 1, t942;
<=, H, t941, heap;
+, H, 1, H;
+, t940, 1, t940;
=>, t940, t941, heap; // caracter actual
jmp, , , L333;
L335:
<=, H, 34, heap;
+, H, 1, H;
<=, t938, t942, heap;
//Iniciando a concatnar cadenas 
=>, t929, t943, heap;
=>, t943, t944, heap; // size cadena1
+, t943, 1, t945; // pos 0 de la cadena 1
=>, t937, t946, heap;
=>, t946, t947, heap; // size cadena2
+, t946, 1, t948; // pos 0 de la cadena 2
+, t944, t947, t949; // size de la nueva cadena
=>, t945, t950, heap; // primer caracter de la cadena 1
=>, t948, t951, heap; // primer caracter de la cadena 2
+, H, 0, t952; // posicion de retorno de la cadena
+, H, 1, t953;
<=, t952, t953, heap;
+, H, 1, H;
<=, H, t949, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L336;
L336:
jne, t950, 34, L337;
jmp, , , L338;
jmp, , , L337;
L337:
<=, H, t950, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t945, 1, t945;
=>, t945, t950, heap;
jmp, , , L336;
jmp, , , L338;
L338:
jmp, , , L339;
L339:
jne, t951, 34, L340;
jmp, , , L341;
jmp, , , L340;
L340:
<=, H, t951, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t948, 1, t948;
=>, t948, t951, heap;
jmp, , , L339;
jmp, , , L341;
L341:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 5, t956; // pos del arreglo 
=>, t956, t957, stack; //apuntador al heap del arreglo
=>, t957, t958, heap; // apuntador del heap al heap donde inicia la cadena
=>, t958, t954, heap; // size del arreglo text
+, t958, 1, t955; // pos 0 donde inicia el arreglo text
=>, t952, t959, heap; // pos que apunta al size de la cadena
=>, t959, t960, heap; // size de la cadena
+, t959, 1, t961; // Pos 0 de la cadena
=>, t961, t962, heap; // sacandor el caracter del heap cadena
jle, t960, t954, L342;
jmp, , , L343;
jmp, , , L342;
L342:
jne, t962, 34, L344;
jmp, , , L345;
jmp, , , L344;
L344:
<=, t955, t962, heap; // guardando el caracter 
+, t955, 1, t955; // incremnetnado la pos del arreglo
+, t961, 1, t961; // incrementando la pos de la cadena
=>, t961, t962, heap; // sacandor el caracter del heap cadena
jmp, , , L342;
jmp, , , L345;
L345:
jmp, , , L343;
L343:
+, P, 5, t963;
=>, t963, t964, stack; 
=>, t964, t965, heap; 
=>, t965, t966, heap; // valor de size del arreglo text
+, t965, 1, t967; // apuntador donde inicia el arreglo text
=>, t967, t968, heap; // primer caracter del arreglo text
+, H, 0, t969;
+, H, 1, t970;
<=, t969, t970, heap; 
+, H, 1, H;
+, 0, 0, t971;
<=, H, t971, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L346:
jne, t968, 36, L347;
jmp, , , L348;
L347:
<=, H, t968, heap; // ingresando el caracter 
+, H, 1, H;
+, t971, 1, t971; // incrementando en uno el size de la nueva cadena
+, t967, 1, t967;
=>, t967, t968, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L346;
L348:
<=, t970, t971, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t969);
jmp, , , L268; // salida del if
L270:

L268:
jmp, , ,L265; //regresando a la etiqueral del ciclo repetir mientras
L267:


L264:
end, , Funciones_vacio_ciclo_vida




begin, , , Funciones_entero_fibonacci_recursivo_entero

// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t972; // pos de n
=>, t972, t973, stack; // valor de lo que trae en el stack n
je, t973, 0, L351;
jmp, , , L352;
L351:

// RESOLVIENDO UN RETORNO
+, P, 2, t974; // pos de retorno de a funcion Funciones_entero_fibonacci_recursivo_entero
<=, t974, 0, stack; //asignando el retorno con su valor
jmp, , , L349;
jmp, , , L350; // salida del if
L352:

// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t975; // pos de n
=>, t975, t976, stack; // valor de lo que trae en el stack n
je, t976, 1, L354;
jmp, , , L355;
L354:

// RESOLVIENDO UN RETORNO
+, P, 2, t977; // pos de retorno de a funcion Funciones_entero_fibonacci_recursivo_entero
<=, t977, 1, stack; //asignando el retorno con su valor
jmp, , , L349;
jmp, , , L353; // salida del if
L355:

// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t978; // pos de n
=>, t978, t979, stack; // valor de lo que trae en el stack n
jg, t979, 1, L357;
jmp, , , L358;
L357:

// RESOLVIENDO UN RETORNO
+, P, 0, t980;
=>, t980, t981, stack; 
+, P, 3, t982;
+, t981, 0, t983;
<=, t982, t981, stack; 
+, P, 3, P;
call, , , Funciones_entero_fibonacci_recursivo_entero;
+, P, 2, t984;
=>, t984, t985, stack; // valor del return
-, P, 3, P;
+, P, 0, t986;
=>, t986, t987, stack; 
+, P, 3, t988;
+, t987, 0, t989;
<=, t988, t987, stack; 
+, P, 3, P;
call, , , Funciones_entero_fibonacci_recursivo_entero;
+, P, 2, t990;
=>, t990, t991, stack; // valor del return
-, P, 3, P;
+, t985, t991, t992;
+, P, 2, t993; // pos de retorno de a funcion Funciones_entero_fibonacci_recursivo_entero
<=, t993, t992, stack; //asignando el retorno con su valor
jmp, , , L349;
jmp, , , L356; // salida del if
L358:

L356:
L353:
L350:
// RESOLVIENDO UN RETORNO
*, 1, -1, t994;
+, P, 2, t995; // pos de retorno de a funcion Funciones_entero_fibonacci_recursivo_entero
<=, t995, t994, stack; //asignando el retorno con su valor
jmp, , , L349;

L349:
end, , Funciones_entero_fibonacci_recursivo_entero




begin, , , Funciones_vacio_pedir_num

// Resolviendo una cadena 
+, H, 0, t996; //apuntaodr a cadena 
+, H, 1, t997; //apu donde inicia la cadena
<=, t996, t997, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 9, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t998; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 80, heap; //guardadndo P
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t996);
// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t999; // pos de num
<=, t999, 0, stack; // asignando a num
// ---------- Resolver Hacer Mientras ----------- 
L360:
L362: //etiqueta del conituar
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t1000; // pos de num
=>, t1000, t1001, stack; // valor de lo que trae en el stack num
je, t1001, 7, L363;
jmp, , , L364;
L364:

jmp, , , L360;
L363:

L361:

L359:
end, , Funciones_vacio_pedir_num




begin, , , Humano_vacio_nacer

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1002; // pos this 
=>, t1002, t1003, stack; // obtenido apuntador al heap 
=>, t1003, t1004, heap; // apuntador 
+, t1004, 0, t1005; // pos de edad
=>, t1005, t1006, heap; // obtengo el valor que se encuentre en el heap 
<=, t1005, 0, HEAP; // asignando variable 
// Resolviendo una cadena 
+, H, 0, t1007; //apuntaodr a cadena 
+, H, 1, t1008; //apu donde inicia la cadena
<=, t1007, t1008, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 14, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1009; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 121, heap; //guardadndo y
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1007);

L365:
end, , Humano_vacio_nacer




begin, , , Persona_vacio_Persona

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t1010; //pos this del arreglo
=>, t1010, t1011, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1011, t1012, heap;//apuntando donde en verdad inicia el arreglo
+, t1012, 0, t1013; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t1013, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1014; //calculando el n real
-, t1014, 0, t1015; //iReal columna 0
+, t1015, 1, t1015; //size del arreglo nombre
<=, H, t1015, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t1015, 0, t1016; // anhadiendo una posicion mas
+, h, t1016, h; // reservnado el espacio del arreglo nombre
// ----------------------- Creando arreglo atributo DPI
+, P, 0, t1017; //pos this del arreglo
=>, t1017, t1018, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1018, t1019, heap;//apuntando donde en verdad inicia el arreglo
+, t1019, 3, t1020; //pos del heap que guarda apuntador del heap para el arreglo DPI
<=, t1020, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1021; //calculando el n real
-, t1021, 0, t1022; //iReal columna 0
+, t1022, 1, t1022; //size del arreglo DPI
<=, H, t1022, heap; // insertando el tamanio del arreglo linealizado DPI
+, H, 1, H;
+, t1022, 0, t1023; // anhadiendo una posicion mas
+, h, t1023, h; // reservnado el espacio del arreglo DPI
// ----------------------- Creando arreglo atributo apellido
+, P, 0, t1024; //pos this del arreglo
=>, t1024, t1025, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1025, t1026, heap;//apuntando donde en verdad inicia el arreglo
+, t1026, 4, t1027; //pos del heap que guarda apuntador del heap para el arreglo apellido
<=, t1027, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1028; //calculando el n real
-, t1028, 0, t1029; //iReal columna 0
+, t1029, 1, t1029; //size del arreglo apellido
<=, H, t1029, heap; // insertando el tamanio del arreglo linealizado apellido
+, H, 1, H;
+, t1029, 0, t1030; // anhadiendo una posicion mas
+, h, t1030, h; // reservnado el espacio del arreglo apellido
+, P, 0, t1031;
=>, t1031, t1032, stack; 
+, P, 2, t1033;
+, t1032, 0, t1034;
<=, t1033, t1032, stack; 
+, P, 2, P;
call, , , Persona_vacio_nacer;
+, P, 1, t1035;
=>, t1035, t1036, stack; // valor del return
-, P, 2, P;
// Resolviendo una cadena 
+, H, 0, t1037; //apuntaodr a cadena 
+, H, 1, t1038; //apu donde inicia la cadena
<=, t1037, t1038, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1039; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
+, P, 0, t1042; // pos this del objeto 
=>, t1042, t1043, stack; // apuntador al heap del objeto 
=>, t1043, t1044, heap; // apunt al heap donde inica el objeto
+, t1044, 0, t1045; //apuntador a posicion donde incia el arreglo
=>, t1045, t1046, heap; // inicia el arreglo
=>, t1046, t1040, heap; // size del arreglo nombre
+, t1046, 1, t1041; //Pos 0 del arreglo
=>, t1037, t1047, heap; // pos que apunta al size de la cadena
=>, t1047, t1048, heap; // size de la cadena
+, t1047, 1, t1049; // Pos 0 de la cadena
=>, t1049, t1050, heap; // sacandor el caracter del heap cadena
jle, t1048, t1040, L367;
jmp, , , L368;
jmp, , , L367;
L367:
jne, t1050, 34, L369;
jmp, , , L370;
jmp, , , L369;
L369:
<=, t1041, t1050, heap; // guardando el caracter 
+, t1041, 1, t1041; // incremnetnado la pos del arreglo
+, t1049, 1, t1049; // incrementando la pos de la cadena
=>, t1049, t1050, heap; // sacandor el caracter del heap cadena
jmp, , , L367;
jmp, , , L370;
L370:
jmp, , , L368;
L368:
// Asignando atributo genero
+, p, 0, t1051; //pos this 
=>, t1051, t1052, stack; // apuntador al heap
=>, t1052, t1053, heap; // apuntador donde inicia el objeto
+, t1053, 2, t1054; // pos real  de genero
<=, t1054, 77, heap; //guardando en el heap el valor del atributo

L366:
end, , Persona_vacio_Persona




begin, , , Persona_vacio_Persona_entero_caracter_caracter_caracter

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t1055; //pos this del arreglo
=>, t1055, t1056, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1056, t1057, heap;//apuntando donde en verdad inicia el arreglo
+, t1057, 0, t1058; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t1058, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1059; //calculando el n real
-, t1059, 0, t1060; //iReal columna 0
+, t1060, 1, t1060; //size del arreglo nombre
<=, H, t1060, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t1060, 0, t1061; // anhadiendo una posicion mas
+, h, t1061, h; // reservnado el espacio del arreglo nombre
// ----------------------- Creando arreglo atributo DPI
+, P, 0, t1062; //pos this del arreglo
=>, t1062, t1063, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1063, t1064, heap;//apuntando donde en verdad inicia el arreglo
+, t1064, 3, t1065; //pos del heap que guarda apuntador del heap para el arreglo DPI
<=, t1065, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1066; //calculando el n real
-, t1066, 0, t1067; //iReal columna 0
+, t1067, 1, t1067; //size del arreglo DPI
<=, H, t1067, heap; // insertando el tamanio del arreglo linealizado DPI
+, H, 1, H;
+, t1067, 0, t1068; // anhadiendo una posicion mas
+, h, t1068, h; // reservnado el espacio del arreglo DPI
// ----------------------- Creando arreglo atributo apellido
+, P, 0, t1069; //pos this del arreglo
=>, t1069, t1070, stack; //obteniendo apuntador de arreglo en eel heap
=>, t1070, t1071, heap;//apuntando donde en verdad inicia el arreglo
+, t1071, 4, t1072; //pos del heap que guarda apuntador del heap para el arreglo apellido
<=, t1072, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 30, 1, t1073; //calculando el n real
-, t1073, 0, t1074; //iReal columna 0
+, t1074, 1, t1074; //size del arreglo apellido
<=, H, t1074, heap; // insertando el tamanio del arreglo linealizado apellido
+, H, 1, H;
+, t1074, 0, t1075; // anhadiendo una posicion mas
+, h, t1075, h; // reservnado el espacio del arreglo apellido
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1076; // pos this 
=>, t1076, t1077, stack; // obtenido apuntador al heap 
=>, t1077, t1078, heap; // apuntador 
+, t1078, 1, t1079; // pos de edad
=>, t1079, t1080, heap; // obtengo el valor que se encuentre en el heap 
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t1081; // pos de edad
=>, t1081, t1082, stack; // valor de lo que trae en el stack edad
<=, t1079, t1082, HEAP; // asignando variable 
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1083; // pos this 
=>, t1083, t1084, stack; // obtenido apuntador al heap 
=>, t1084, t1085, heap; // apuntador 
+, t1085, 0, t1086; // pos de nombre
=>, t1086, t1087, heap; // obtengo el valor que se encuentre en el heap 
+, P, 2, t1088;
=>, t1088, t1089, stack; 
=>, t1089, t1090, heap; 
=>, t1090, t1091, heap; // valor de size del arreglo nombre2
+, t1090, 1, t1092; // apuntador donde inicia el arreglo nombre2
=>, t1092, t1093, heap; // primer caracter del arreglo nombre2
+, H, 0, t1094;
+, H, 1, t1095;
<=, t1094, t1095, heap; 
+, H, 1, H;
+, 0, 0, t1096;
<=, H, t1096, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L372:
jne, t1093, 36, L373;
jmp, , , L374;
L373:
<=, H, t1093, heap; // ingresando el caracter 
+, H, 1, H;
+, t1096, 1, t1096; // incrementando en uno el size de la nueva cadena
+, t1092, 1, t1092;
=>, t1092, t1093, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L372;
L374:
<=, t1095, t1096, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t1086, 1, t1097;
// -------------------- Arreglo global asignar :) 
=>, t1086, t1098, heap; // inicia el arreglo
=>, t1098, t1099, heap; // size del arreglo 
+, t1098, 1, t1100; //Pos 0 del arreglo
=>, t1094, t1101, heap; // pos que apunta al size de la cadena
=>, t1101, t1102, heap; // size de la cadena
+, t1101, 1, t1103; // Pos 0 de la cadena
=>, t1103, t1104, heap; // sacandor el caracter del heap cadena
jle, t1102, t1099, L375;
jmp, , , L376;
jmp, , , L375;
L375:
jne, t1104, 34, L377;
jmp, , , L378;
jmp, , , L377;
L377:
<=, t1100, t1104, heap; // guardando el caracter 
+, t1100, 1, t1100; // incremnetnado la pos del arreglo
+, t1103, 1, t1103; // incrementando la pos de la cadena
=>, t1103, t1104, heap; // sacandor el caracter del heap cadena
jmp, , , L375;
jmp, , , L378;
L378:
jmp, , , L376;
L376:
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1105; // pos this 
=>, t1105, t1106, stack; // obtenido apuntador al heap 
=>, t1106, t1107, heap; // apuntador 
+, t1107, 4, t1108; // pos de apellido
=>, t1108, t1109, heap; // obtengo el valor que se encuentre en el heap 
+, P, 3, t1110;
=>, t1110, t1111, stack; 
=>, t1111, t1112, heap; 
=>, t1112, t1113, heap; // valor de size del arreglo apellido2
+, t1112, 1, t1114; // apuntador donde inicia el arreglo apellido2
=>, t1114, t1115, heap; // primer caracter del arreglo apellido2
+, H, 0, t1116;
+, H, 1, t1117;
<=, t1116, t1117, heap; 
+, H, 1, H;
+, 0, 0, t1118;
<=, H, t1118, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L379:
jne, t1115, 36, L380;
jmp, , , L381;
L380:
<=, H, t1115, heap; // ingresando el caracter 
+, H, 1, H;
+, t1118, 1, t1118; // incrementando en uno el size de la nueva cadena
+, t1114, 1, t1114;
=>, t1114, t1115, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L379;
L381:
<=, t1117, t1118, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t1108, 1, t1119;
// -------------------- Arreglo global asignar :) 
=>, t1108, t1120, heap; // inicia el arreglo
=>, t1120, t1121, heap; // size del arreglo 
+, t1120, 1, t1122; //Pos 0 del arreglo
=>, t1116, t1123, heap; // pos que apunta al size de la cadena
=>, t1123, t1124, heap; // size de la cadena
+, t1123, 1, t1125; // Pos 0 de la cadena
=>, t1125, t1126, heap; // sacandor el caracter del heap cadena
jle, t1124, t1121, L382;
jmp, , , L383;
jmp, , , L382;
L382:
jne, t1126, 34, L384;
jmp, , , L385;
jmp, , , L384;
L384:
<=, t1122, t1126, heap; // guardando el caracter 
+, t1122, 1, t1122; // incremnetnado la pos del arreglo
+, t1125, 1, t1125; // incrementando la pos de la cadena
=>, t1125, t1126, heap; // sacandor el caracter del heap cadena
jmp, , , L382;
jmp, , , L385;
L385:
jmp, , , L383;
L383:
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1127; // pos this 
=>, t1127, t1128, stack; // obtenido apuntador al heap 
=>, t1128, t1129, heap; // apuntador 
+, t1129, 2, t1130; // pos de genero
=>, t1130, t1131, heap; // obtengo el valor que se encuentre en el heap 
// -------------- Resolviendo para un ID (var local) ------------
+, p, 4, t1132; // pos de genero
=>, t1132, t1133, stack; // valor de lo que trae en el stack genero
<=, t1130, t1133, HEAP; // asignando variable 

L371:
end, , Persona_vacio_Persona_entero_caracter_caracter_caracter




begin, , , Persona_caracter_concat_caracter_caracter

// ------------------------ Creando arreglo local ret
+, P, 3, t1134; //pos de arreglo ret
<=, t1134, H, stack; // ingrensando al stack apunt del heap para ret
+, H, 1, t1135;
<=, H, t1135, heap; //insetnado donde inicia el arreglo ret
+, H, 1, H;
// calculando el tamanho del arreglo
-, 60, 1, t1136; //calculando el n real
-, t1136, 0, t1137; //iReal columna 0
+, t1137, 1, t1137; //size del arreglo ret
<=, H, t1137, heap; // insertando el tamanio del arreglo linealizado ret
+, H, 1, H;
+, h, t1137, h; // reservnado el espacio del arreglo ret
+, P, 3, t1140; // pos del arreglo 
=>, t1140, t1141, stack; //apuntador al heap del arreglo
=>, t1141, t1142, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1142, t1138, heap; // size del arreglo ret
+, t1142, 1, t1139; // pos 0 donde inicia el arreglo ret
+, P, 0, t1143;
=>, t1143, t1144, stack; 
=>, t1144, t1145, heap; 
+, t1145, 0, t1146;
=>, t1146, t1147, heap; 
=>, t1147, t1148, heap; 
+, t1147, 1, t1149; 
=>, t1149, t1150, heap; // primer caracter del arreglo nombre
+, H, 0, t1151;
+, H, 1, t1152;
<=, t1151, t1152, heap; 
+, H, 1, H;
+, 0, 0, t1153;
<=, H, t1153, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L387:
jne, t1150, 36, L388;
jmp, , , L389;
L388:
<=, H, t1150, heap; // ingresando el caracter 
+, H, 1, H;
+, t1153, 1, t1153; // incrementando en uno el size de la nueva cadena
+, t1149, 1, t1149;
=>, t1149, t1150, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L387;
L389:
<=, t1152, t1153, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
=>, t1151, t1154, heap; // pos que apunta al size de la cadena
=>, t1154, t1155, heap; // size de la cadena
+, t1154, 1, t1156; // Pos 0 de la cadena
=>, t1156, t1157, heap; // sacandor el caracter del heap cadena
jle, t1155, t1138, L390;
jmp, , , L391;
jmp, , , L390;
L390:
jne, t1157, 34, L392;
jmp, , , L393;
jmp, , , L392;
L392:
<=, t1139, t1157, heap; // guardando el caracter 
+, t1139, 1, t1139; // incremnetnado la pos del arreglo
+, t1156, 1, t1156; // incrementando la pos de la cadena
=>, t1156, t1157, heap; // sacandor el caracter del heap cadena
jmp, , , L390;
jmp, , , L393;
L393:
jmp, , , L391;
L391:
+, P, 3, t1158;
=>, t1158, t1159, stack; 
=>, t1159, t1160, heap; 
=>, t1160, t1161, heap; // valor de size del arreglo ret
+, t1160, 1, t1162; // apuntador donde inicia el arreglo ret
=>, t1162, t1163, heap; // primer caracter del arreglo ret
+, H, 0, t1164;
+, H, 1, t1165;
<=, t1164, t1165, heap; 
+, H, 1, H;
+, 0, 0, t1166;
<=, H, t1166, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L394:
jne, t1163, 36, L395;
jmp, , , L396;
L395:
<=, H, t1163, heap; // ingresando el caracter 
+, H, 1, H;
+, t1166, 1, t1166; // incrementando en uno el size de la nueva cadena
+, t1162, 1, t1162;
=>, t1162, t1163, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L394;
L396:
<=, t1165, t1166, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t1167; //apuntaodr a cadena 
+, H, 1, t1168; //apu donde inicia la cadena
<=, t1167, t1168, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1169; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
//Iniciando a concatnar cadenas 
=>, t1164, t1170, heap;
=>, t1170, t1171, heap; // size cadena1
+, t1170, 1, t1172; // pos 0 de la cadena 1
=>, t1167, t1173, heap;
=>, t1173, t1174, heap; // size cadena2
+, t1173, 1, t1175; // pos 0 de la cadena 2
+, t1171, t1174, t1176; // size de la nueva cadena
=>, t1172, t1177, heap; // primer caracter de la cadena 1
=>, t1175, t1178, heap; // primer caracter de la cadena 2
+, H, 0, t1179; // posicion de retorno de la cadena
+, H, 1, t1180;
<=, t1179, t1180, heap;
+, H, 1, H;
<=, H, t1176, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L397;
L397:
jne, t1177, 34, L398;
jmp, , , L399;
jmp, , , L398;
L398:
<=, H, t1177, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1172, 1, t1172;
=>, t1172, t1177, heap;
jmp, , , L397;
jmp, , , L399;
L399:
jmp, , , L400;
L400:
jne, t1178, 34, L401;
jmp, , , L402;
jmp, , , L401;
L401:
<=, H, t1178, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1175, 1, t1175;
=>, t1175, t1178, heap;
jmp, , , L400;
jmp, , , L402;
L402:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 3, t1183; // pos del arreglo 
=>, t1183, t1184, stack; //apuntador al heap del arreglo
=>, t1184, t1185, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1185, t1181, heap; // size del arreglo ret
+, t1185, 1, t1182; // pos 0 donde inicia el arreglo ret
=>, t1179, t1186, heap; // pos que apunta al size de la cadena
=>, t1186, t1187, heap; // size de la cadena
+, t1186, 1, t1188; // Pos 0 de la cadena
=>, t1188, t1189, heap; // sacandor el caracter del heap cadena
jle, t1187, t1181, L403;
jmp, , , L404;
jmp, , , L403;
L403:
jne, t1189, 34, L405;
jmp, , , L406;
jmp, , , L405;
L405:
<=, t1182, t1189, heap; // guardando el caracter 
+, t1182, 1, t1182; // incremnetnado la pos del arreglo
+, t1188, 1, t1188; // incrementando la pos de la cadena
=>, t1188, t1189, heap; // sacandor el caracter del heap cadena
jmp, , , L403;
jmp, , , L406;
L406:
jmp, , , L404;
L404:
+, P, 3, t1190;
=>, t1190, t1191, stack; 
=>, t1191, t1192, heap; 
=>, t1192, t1193, heap; // valor de size del arreglo ret
+, t1192, 1, t1194; // apuntador donde inicia el arreglo ret
=>, t1194, t1195, heap; // primer caracter del arreglo ret
+, H, 0, t1196;
+, H, 1, t1197;
<=, t1196, t1197, heap; 
+, H, 1, H;
+, 0, 0, t1198;
<=, H, t1198, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L407:
jne, t1195, 36, L408;
jmp, , , L409;
L408:
<=, H, t1195, heap; // ingresando el caracter 
+, H, 1, H;
+, t1198, 1, t1198; // incrementando en uno el size de la nueva cadena
+, t1194, 1, t1194;
=>, t1194, t1195, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L407;
L409:
<=, t1197, t1198, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
+, P, 2, t1199;
=>, t1199, t1200, stack; 
=>, t1200, t1201, heap; 
=>, t1201, t1202, heap; // valor de size del arreglo apellidos
+, t1201, 1, t1203; // apuntador donde inicia el arreglo apellidos
=>, t1203, t1204, heap; // primer caracter del arreglo apellidos
+, H, 0, t1205;
+, H, 1, t1206;
<=, t1205, t1206, heap; 
+, H, 1, H;
+, 0, 0, t1207;
<=, H, t1207, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L410:
jne, t1204, 36, L411;
jmp, , , L412;
L411:
<=, H, t1204, heap; // ingresando el caracter 
+, H, 1, H;
+, t1207, 1, t1207; // incrementando en uno el size de la nueva cadena
+, t1203, 1, t1203;
=>, t1203, t1204, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L410;
L412:
<=, t1206, t1207, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
//Iniciando a concatnar cadenas 
=>, t1196, t1208, heap;
=>, t1208, t1209, heap; // size cadena1
+, t1208, 1, t1210; // pos 0 de la cadena 1
=>, t1205, t1211, heap;
=>, t1211, t1212, heap; // size cadena2
+, t1211, 1, t1213; // pos 0 de la cadena 2
+, t1209, t1212, t1214; // size de la nueva cadena
=>, t1210, t1215, heap; // primer caracter de la cadena 1
=>, t1213, t1216, heap; // primer caracter de la cadena 2
+, H, 0, t1217; // posicion de retorno de la cadena
+, H, 1, t1218;
<=, t1217, t1218, heap;
+, H, 1, H;
<=, H, t1214, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L413;
L413:
jne, t1215, 34, L414;
jmp, , , L415;
jmp, , , L414;
L414:
<=, H, t1215, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1210, 1, t1210;
=>, t1210, t1215, heap;
jmp, , , L413;
jmp, , , L415;
L415:
jmp, , , L416;
L416:
jne, t1216, 34, L417;
jmp, , , L418;
jmp, , , L417;
L417:
<=, H, t1216, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1213, 1, t1213;
=>, t1213, t1216, heap;
jmp, , , L416;
jmp, , , L418;
L418:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 3, t1221; // pos del arreglo 
=>, t1221, t1222, stack; //apuntador al heap del arreglo
=>, t1222, t1223, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1223, t1219, heap; // size del arreglo ret
+, t1223, 1, t1220; // pos 0 donde inicia el arreglo ret
=>, t1217, t1224, heap; // pos que apunta al size de la cadena
=>, t1224, t1225, heap; // size de la cadena
+, t1224, 1, t1226; // Pos 0 de la cadena
=>, t1226, t1227, heap; // sacandor el caracter del heap cadena
jle, t1225, t1219, L419;
jmp, , , L420;
jmp, , , L419;
L419:
jne, t1227, 34, L421;
jmp, , , L422;
jmp, , , L421;
L421:
<=, t1220, t1227, heap; // guardando el caracter 
+, t1220, 1, t1220; // incremnetnado la pos del arreglo
+, t1226, 1, t1226; // incrementando la pos de la cadena
=>, t1226, t1227, heap; // sacandor el caracter del heap cadena
jmp, , , L419;
jmp, , , L422;
L422:
jmp, , , L420;
L420:

L386:
end, , Persona_caracter_concat_caracter_caracter




begin, , , Persona_Persona_reproducir_Persona_caracter

+, P, 2, t1228;
=>, t1228, t1229, stack; 
=>, t1229, t1230, heap; 
=>, t1230, t1231, heap; // valor de size del arreglo nombre
+, t1230, 1, t1232; // apuntador donde inicia el arreglo nombre
=>, t1232, t1233, heap; // primer caracter del arreglo nombre
+, H, 0, t1234;
+, H, 1, t1235;
<=, t1234, t1235, heap; 
+, H, 1, H;
+, 0, 0, t1236;
<=, H, t1236, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L424:
jne, t1233, 36, L425;
jmp, , , L426;
L425:
<=, H, t1233, heap; // ingresando el caracter 
+, H, 1, H;
+, t1236, 1, t1236; // incrementando en uno el size de la nueva cadena
+, t1232, 1, t1232;
=>, t1232, t1233, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L424;
L426:
<=, t1235, t1236, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t1234);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1237; // pos this 
=>, t1237, t1238, stack; // obtenido apuntador al heap 
=>, t1238, t1239, heap; // apuntador 
+, t1239, 2, t1240; // pos de genero
=>, t1240, t1241, heap; // obtengo el valor que se encuentre en el heap 
// ----------------- Resolviendo acceso local 
+, P, 1, t1242; // pos del objeto
=>, t1242, t1244, stack; //apuntador al heap del obejto
=>, t1244, t1245, heap; // recuperando pos incial del objeto
+, t1245, 2, t1244;
=>, t1244, t1246, heap; // valor a retoranar del acceso
jne, t1241, t1246, L428;
jmp, , , L429;
L428:

// Resolviendo una cadena 
+, H, 0, t1247; //apuntaodr a cadena 
+, H, 1, t1248; //apu donde inicia la cadena
<=, t1247, t1248, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 22, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1249; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 78, heap; //guardadndo N
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 117, heap; //guardadndo u
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1247);
// ----------- Instancia a una variable local --------------
+, p, 3, t1250; // pos de bebe
<=, t1250, h, stack; //guardando referencia del heap para el objeto bebe
+, h, 1, t1251; // guardo la posicion donde inicia el objeto 
<=, h, t1251, heap; // guardando donde es que inicia el objeto dentro del heap
+, h, 1, h; // sumando al heap la posicion que usamos extra para el doble apuntador 
+, h, 5, h; // reservando espacio para el objeto bebe
//Ingresando referencia al this del objeto bebe
+, p, 3, t1252; // pos de bebe
=>, t1252, t1253, stack; // obteniendo apuntador de bebe
+, p, 7, t1254; // simulando cambio de ambito
+, t1254, 0, t1255; //pos del this de bebe
<=, t1255, t1253, stack; // insertando apuntador del heap al stack del obeto bebe
// No posee parametros 
+, p, 7, p; // simulando cambio de ambito
call, , , Persona_vacio_Persona;
-, p, 7, p; // regresando al ambito acutal

// ----------------- Resolviendo acceso local 
+, P, 3, t1256; // pos del objeto
=>, t1256, t1258, stack; //apuntador al heap del obejto
=>, t1258, t1259, heap; // recuperando pos incial del objeto
+, t1259, 0, t1258;
=>, t1258, t1260, heap; // valor a retoranar del acceso
+, P, 2, t1261;
=>, t1261, t1262, stack; 
=>, t1262, t1263, heap; 
=>, t1263, t1264, heap; // valor de size del arreglo nombre
+, t1263, 1, t1265; // apuntador donde inicia el arreglo nombre
=>, t1265, t1266, heap; // primer caracter del arreglo nombre
+, H, 0, t1267;
+, H, 1, t1268;
<=, t1267, t1268, heap; 
+, H, 1, H;
+, 0, 0, t1269;
<=, H, t1269, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L430:
jne, t1266, 36, L431;
jmp, , , L432;
L431:
<=, H, t1266, heap; // ingresando el caracter 
+, H, 1, H;
+, t1269, 1, t1269; // incrementando en uno el size de la nueva cadena
+, t1265, 1, t1265;
=>, t1265, t1266, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L430;
L432:
<=, t1268, t1269, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t1258, 1, t1270;
// -------------------- Arreglo global asignar :) 
=>, t1258, t1271, heap; // inicia el arreglo
=>, t1271, t1272, heap; // size del arreglo 
+, t1271, 1, t1273; //Pos 0 del arreglo
=>, t1267, t1274, heap; // pos que apunta al size de la cadena
=>, t1274, t1275, heap; // size de la cadena
+, t1274, 1, t1276; // Pos 0 de la cadena
=>, t1276, t1277, heap; // sacandor el caracter del heap cadena
jle, t1275, t1272, L433;
jmp, , , L434;
jmp, , , L433;
L433:
jne, t1277, 34, L435;
jmp, , , L436;
jmp, , , L435;
L435:
<=, t1273, t1277, heap; // guardando el caracter 
+, t1273, 1, t1273; // incremnetnado la pos del arreglo
+, t1276, 1, t1276; // incrementando la pos de la cadena
=>, t1276, t1277, heap; // sacandor el caracter del heap cadena
jmp, , , L433;
jmp, , , L436;
L436:
jmp, , , L434;
L434:
// ----------------- Resolviendo acceso local 
+, P, 3, t1278; // pos del objeto
=>, t1278, t1280, stack; //apuntador al heap del obejto
=>, t1280, t1281, heap; // recuperando pos incial del objeto
+, t1281, 4, t1280;
=>, t1280, t1282, heap; // valor a retoranar del acceso
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1283; // pos this 
=>, t1283, t1284, stack; // obtenido apuntador al heap 
=>, t1284, t1285, heap; // apuntador 
+, t1285, 4, t1286; // pos de apellido
=>, t1286, t1287, heap; // obtengo el valor que se encuentre en el heap 
<=, t1280, t1287, heap; // asignando variable 
// Resolviendo una cadena 
+, H, 0, t1288; //apuntaodr a cadena 
+, H, 1, t1289; //apu donde inicia la cadena
<=, t1288, t1289, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 11, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1290; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 109, heap; //guardadndo m
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1288);
// ----------------- Resolviendo acceso local 
+, P, 3, t1291; // pos del objeto
=>, t1291, t1293, stack; //apuntador al heap del obejto
=>, t1293, t1294, heap; // recuperando pos incial del objeto
+, t1294, 0, t1293;
=>, t1293, t1295, heap; // valor a retoranar del acceso
print("%a", t1293);
// Resolviendo una cadena 
+, H, 0, t1296; //apuntaodr a cadena 
+, H, 1, t1297; //apu donde inicia la cadena
<=, t1296, t1297, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1298; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 98, heap; //guardadndo b
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 112, heap; //guardadndo p
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1296);
// ----------------- Resolviendo acceso local 
+, P, 3, t1299; // pos del objeto
=>, t1299, t1301, stack; //apuntador al heap del obejto
=>, t1301, t1302, heap; // recuperando pos incial del objeto
+, t1302, 4, t1301;
=>, t1301, t1303, heap; // valor a retoranar del acceso
print("%a", t1301);
// ------------------------ Creando arreglo local ape
+, P, 4, t1304; //pos de arreglo ape
<=, t1304, H, stack; // ingrensando al stack apunt del heap para ape
+, H, 1, t1305;
<=, H, t1305, heap; //insetnado donde inicia el arreglo ape
+, H, 1, H;
// calculando el tamanho del arreglo
-, 30, 1, t1306; //calculando el n real
-, t1306, 0, t1307; //iReal columna 0
+, t1307, 1, t1307; //size del arreglo ape
<=, H, t1307, heap; // insertando el tamanio del arreglo linealizado ape
+, H, 1, H;
+, h, t1307, h; // reservnado el espacio del arreglo ape
+, P, 4, t1310; // pos del arreglo 
=>, t1310, t1311, stack; //apuntador al heap del arreglo
=>, t1311, t1312, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1312, t1308, heap; // size del arreglo ape
+, t1312, 1, t1309; // pos 0 donde inicia el arreglo ape
// ----------------- Resolviendo acceso local 
+, P, 3, t1313; // pos del objeto
=>, t1313, t1315, stack; //apuntador al heap del obejto
=>, t1315, t1316, heap; // recuperando pos incial del objeto
+, t1316, 4, t1315;
=>, t1315, t1317, heap; // valor a retoranar del acceso
+, P, 4, t1318;
=>, t1318, t1319, stack; 
=>, t1319, t1320, heap; 
=>, t1320, t1321, heap; // valor de size del arreglo ape
+, t1320, 1, t1322; // apuntador donde inicia el arreglo ape
=>, t1322, t1323, heap; // primer caracter del arreglo ape
+, H, 0, t1324;
+, H, 1, t1325;
<=, t1324, t1325, heap; 
+, H, 1, H;
+, 0, 0, t1326;
<=, H, t1326, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L437:
jne, t1323, 36, L438;
jmp, , , L439;
L438:
<=, H, t1323, heap; // ingresando el caracter 
+, H, 1, H;
+, t1326, 1, t1326; // incrementando en uno el size de la nueva cadena
+, t1322, 1, t1322;
=>, t1322, t1323, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L437;
L439:
<=, t1325, t1326, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t1327; //apuntaodr a cadena 
+, H, 1, t1328; //apu donde inicia la cadena
<=, t1327, t1328, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1329; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
//Iniciando a concatnar cadenas 
=>, t1324, t1330, heap;
=>, t1330, t1331, heap; // size cadena1
+, t1330, 1, t1332; // pos 0 de la cadena 1
=>, t1327, t1333, heap;
=>, t1333, t1334, heap; // size cadena2
+, t1333, 1, t1335; // pos 0 de la cadena 2
+, t1331, t1334, t1336; // size de la nueva cadena
=>, t1332, t1337, heap; // primer caracter de la cadena 1
=>, t1335, t1338, heap; // primer caracter de la cadena 2
+, H, 0, t1339; // posicion de retorno de la cadena
+, H, 1, t1340;
<=, t1339, t1340, heap;
+, H, 1, H;
<=, H, t1336, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L440;
L440:
jne, t1337, 34, L441;
jmp, , , L442;
jmp, , , L441;
L441:
<=, H, t1337, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1332, 1, t1332;
=>, t1332, t1337, heap;
jmp, , , L440;
jmp, , , L442;
L442:
jmp, , , L443;
L443:
jne, t1338, 34, L444;
jmp, , , L445;
jmp, , , L444;
L444:
<=, H, t1338, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1335, 1, t1335;
=>, t1335, t1338, heap;
jmp, , , L443;
jmp, , , L445;
L445:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 4, t1343; // pos del arreglo 
=>, t1343, t1344, stack; //apuntador al heap del arreglo
=>, t1344, t1345, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1345, t1341, heap; // size del arreglo ape
+, t1345, 1, t1342; // pos 0 donde inicia el arreglo ape
=>, t1339, t1346, heap; // pos que apunta al size de la cadena
=>, t1346, t1347, heap; // size de la cadena
+, t1346, 1, t1348; // Pos 0 de la cadena
=>, t1348, t1349, heap; // sacandor el caracter del heap cadena
jle, t1347, t1341, L446;
jmp, , , L447;
jmp, , , L446;
L446:
jne, t1349, 34, L448;
jmp, , , L449;
jmp, , , L448;
L448:
<=, t1342, t1349, heap; // guardando el caracter 
+, t1342, 1, t1342; // incremnetnado la pos del arreglo
+, t1348, 1, t1348; // incrementando la pos de la cadena
=>, t1348, t1349, heap; // sacandor el caracter del heap cadena
jmp, , , L446;
jmp, , , L449;
L449:
jmp, , , L447;
L447:
+, P, 4, t1350;
=>, t1350, t1351, stack; 
=>, t1351, t1352, heap; 
=>, t1352, t1353, heap; // valor de size del arreglo ape
+, t1352, 1, t1354; // apuntador donde inicia el arreglo ape
=>, t1354, t1355, heap; // primer caracter del arreglo ape
+, H, 0, t1356;
+, H, 1, t1357;
<=, t1356, t1357, heap; 
+, H, 1, H;
+, 0, 0, t1358;
<=, H, t1358, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L450:
jne, t1355, 36, L451;
jmp, , , L452;
L451:
<=, H, t1355, heap; // ingresando el caracter 
+, H, 1, H;
+, t1358, 1, t1358; // incrementando en uno el size de la nueva cadena
+, t1354, 1, t1354;
=>, t1354, t1355, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L450;
L452:
<=, t1357, t1358, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 1, t1359; // pos del objeto
=>, t1359, t1361, stack; //apuntador al heap del obejto
=>, t1361, t1362, heap; // recuperando pos incial del objeto
+, t1362, 4, t1361;
=>, t1361, t1363, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t1364;
+, H, 1, t1365;
<=, t1364, t1365, heap;
+, H, 1, H;
+, H, 1, H;
=>, t1361, t1366, heap; 
+, t1366, 1, t1367;
=>, t1367, t1368, heap; // caracter actual
+, 0, 0, t1369;
L453:
jne, t1368, 36, L454;
jmp, , , L455;
L454:
+, t1369, 1, t1369;
<=, H, t1368, heap;
+, H, 1, H;
+, t1367, 1, t1367;
=>, t1367, t1368, heap; // caracter actual
jmp, , , L453;
L455:
<=, H, 34, heap;
+, H, 1, H;
<=, t1365, t1369, heap;
//Iniciando a concatnar cadenas 
=>, t1356, t1370, heap;
=>, t1370, t1371, heap; // size cadena1
+, t1370, 1, t1372; // pos 0 de la cadena 1
=>, t1364, t1373, heap;
=>, t1373, t1374, heap; // size cadena2
+, t1373, 1, t1375; // pos 0 de la cadena 2
+, t1371, t1374, t1376; // size de la nueva cadena
=>, t1372, t1377, heap; // primer caracter de la cadena 1
=>, t1375, t1378, heap; // primer caracter de la cadena 2
+, H, 0, t1379; // posicion de retorno de la cadena
+, H, 1, t1380;
<=, t1379, t1380, heap;
+, H, 1, H;
<=, H, t1376, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L456;
L456:
jne, t1377, 34, L457;
jmp, , , L458;
jmp, , , L457;
L457:
<=, H, t1377, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1372, 1, t1372;
=>, t1372, t1377, heap;
jmp, , , L456;
jmp, , , L458;
L458:
jmp, , , L459;
L459:
jne, t1378, 34, L460;
jmp, , , L461;
jmp, , , L460;
L460:
<=, H, t1378, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1375, 1, t1375;
=>, t1375, t1378, heap;
jmp, , , L459;
jmp, , , L461;
L461:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 4, t1383; // pos del arreglo 
=>, t1383, t1384, stack; //apuntador al heap del arreglo
=>, t1384, t1385, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1385, t1381, heap; // size del arreglo ape
+, t1385, 1, t1382; // pos 0 donde inicia el arreglo ape
=>, t1379, t1386, heap; // pos que apunta al size de la cadena
=>, t1386, t1387, heap; // size de la cadena
+, t1386, 1, t1388; // Pos 0 de la cadena
=>, t1388, t1389, heap; // sacandor el caracter del heap cadena
jle, t1387, t1381, L462;
jmp, , , L463;
jmp, , , L462;
L462:
jne, t1389, 34, L464;
jmp, , , L465;
jmp, , , L464;
L464:
<=, t1382, t1389, heap; // guardando el caracter 
+, t1382, 1, t1382; // incremnetnado la pos del arreglo
+, t1388, 1, t1388; // incrementando la pos de la cadena
=>, t1388, t1389, heap; // sacandor el caracter del heap cadena
jmp, , , L462;
jmp, , , L465;
L465:
jmp, , , L463;
L463:
// ----------------- Resolviendo acceso local 
+, P, 3, t1390; // pos del objeto
=>, t1390, t1392, stack; //apuntador al heap del obejto
=>, t1392, t1393, heap; // recuperando pos incial del objeto
+, t1393, 4, t1392;
=>, t1392, t1394, heap; // valor a retoranar del acceso
+, P, 4, t1395;
=>, t1395, t1396, stack; 
=>, t1396, t1397, heap; 
=>, t1397, t1398, heap; // valor de size del arreglo ape
+, t1397, 1, t1399; // apuntador donde inicia el arreglo ape
=>, t1399, t1400, heap; // primer caracter del arreglo ape
+, H, 0, t1401;
+, H, 1, t1402;
<=, t1401, t1402, heap; 
+, H, 1, H;
+, 0, 0, t1403;
<=, H, t1403, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L466:
jne, t1400, 36, L467;
jmp, , , L468;
L467:
<=, H, t1400, heap; // ingresando el caracter 
+, H, 1, H;
+, t1403, 1, t1403; // incrementando en uno el size de la nueva cadena
+, t1399, 1, t1399;
=>, t1399, t1400, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L466;
L468:
<=, t1402, t1403, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t1392, 1, t1404;
// -------------------- Arreglo global asignar :) 
=>, t1392, t1405, heap; // inicia el arreglo
=>, t1405, t1406, heap; // size del arreglo 
+, t1405, 1, t1407; //Pos 0 del arreglo
=>, t1401, t1408, heap; // pos que apunta al size de la cadena
=>, t1408, t1409, heap; // size de la cadena
+, t1408, 1, t1410; // Pos 0 de la cadena
=>, t1410, t1411, heap; // sacandor el caracter del heap cadena
jle, t1409, t1406, L469;
jmp, , , L470;
jmp, , , L469;
L469:
jne, t1411, 34, L471;
jmp, , , L472;
jmp, , , L471;
L471:
<=, t1407, t1411, heap; // guardando el caracter 
+, t1407, 1, t1407; // incremnetnado la pos del arreglo
+, t1410, 1, t1410; // incrementando la pos de la cadena
=>, t1410, t1411, heap; // sacandor el caracter del heap cadena
jmp, , , L469;
jmp, , , L472;
L472:
jmp, , , L470;
L470:
jmp, , , L427; // salida del if
L429:

L427:

L423:
end, , Persona_Persona_reproducir_Persona_caracter




begin, , , Persona_vacio_matrimonio_Persona

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1412; // pos this 
=>, t1412, t1413, stack; // obtenido apuntador al heap 
=>, t1413, t1414, heap; // apuntador 
+, t1414, 2, t1415; // pos de genero
=>, t1415, t1416, heap; // obtengo el valor que se encuentre en el heap 
je, t1416, 70, L475;
jmp, , , L476;
L475:

// ------------------------ Creando arreglo local ape
+, P, 2, t1417; //pos de arreglo ape
<=, t1417, H, stack; // ingrensando al stack apunt del heap para ape
+, H, 1, t1418;
<=, H, t1418, heap; //insetnado donde inicia el arreglo ape
+, H, 1, H;
// calculando el tamanho del arreglo
-, 15, 1, t1419; //calculando el n real
-, t1419, 0, t1420; //iReal columna 0
+, t1420, 1, t1420; //size del arreglo ape
<=, H, t1420, heap; // insertando el tamanio del arreglo linealizado ape
+, H, 1, H;
+, h, t1420, h; // reservnado el espacio del arreglo ape
+, P, 2, t1423; // pos del arreglo 
=>, t1423, t1424, stack; //apuntador al heap del arreglo
=>, t1424, t1425, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1425, t1421, heap; // size del arreglo ape
+, t1425, 1, t1422; // pos 0 donde inicia el arreglo ape
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1426; // pos this 
=>, t1426, t1427, stack; // obtenido apuntador al heap 
=>, t1427, t1428, heap; // apuntador 
+, t1428, 4, t1429; // pos de apellido
=>, t1429, t1430, heap; // obtengo el valor que se encuentre en el heap 
+, P, 2, t1431;
=>, t1431, t1432, stack; 
=>, t1432, t1433, heap; 
=>, t1433, t1434, heap; // valor de size del arreglo ape
+, t1433, 1, t1435; // apuntador donde inicia el arreglo ape
=>, t1435, t1436, heap; // primer caracter del arreglo ape
+, H, 0, t1437;
+, H, 1, t1438;
<=, t1437, t1438, heap; 
+, H, 1, H;
+, 0, 0, t1439;
<=, H, t1439, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L477:
jne, t1436, 36, L478;
jmp, , , L479;
L478:
<=, H, t1436, heap; // ingresando el caracter 
+, H, 1, H;
+, t1439, 1, t1439; // incrementando en uno el size de la nueva cadena
+, t1435, 1, t1435;
=>, t1435, t1436, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L477;
L479:
<=, t1438, t1439, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t1440; //apuntaodr a cadena 
+, H, 1, t1441; //apu donde inicia la cadena
<=, t1440, t1441, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 4, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1442; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 100, heap; //guardadndo d
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
//Iniciando a concatnar cadenas 
=>, t1437, t1443, heap;
=>, t1443, t1444, heap; // size cadena1
+, t1443, 1, t1445; // pos 0 de la cadena 1
=>, t1440, t1446, heap;
=>, t1446, t1447, heap; // size cadena2
+, t1446, 1, t1448; // pos 0 de la cadena 2
+, t1444, t1447, t1449; // size de la nueva cadena
=>, t1445, t1450, heap; // primer caracter de la cadena 1
=>, t1448, t1451, heap; // primer caracter de la cadena 2
+, H, 0, t1452; // posicion de retorno de la cadena
+, H, 1, t1453;
<=, t1452, t1453, heap;
+, H, 1, H;
<=, H, t1449, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L480;
L480:
jne, t1450, 34, L481;
jmp, , , L482;
jmp, , , L481;
L481:
<=, H, t1450, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1445, 1, t1445;
=>, t1445, t1450, heap;
jmp, , , L480;
jmp, , , L482;
L482:
jmp, , , L483;
L483:
jne, t1451, 34, L484;
jmp, , , L485;
jmp, , , L484;
L484:
<=, H, t1451, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1448, 1, t1448;
=>, t1448, t1451, heap;
jmp, , , L483;
jmp, , , L485;
L485:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 2, t1456; // pos del arreglo 
=>, t1456, t1457, stack; //apuntador al heap del arreglo
=>, t1457, t1458, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1458, t1454, heap; // size del arreglo ape
+, t1458, 1, t1455; // pos 0 donde inicia el arreglo ape
=>, t1452, t1459, heap; // pos que apunta al size de la cadena
=>, t1459, t1460, heap; // size de la cadena
+, t1459, 1, t1461; // Pos 0 de la cadena
=>, t1461, t1462, heap; // sacandor el caracter del heap cadena
jle, t1460, t1454, L486;
jmp, , , L487;
jmp, , , L486;
L486:
jne, t1462, 34, L488;
jmp, , , L489;
jmp, , , L488;
L488:
<=, t1455, t1462, heap; // guardando el caracter 
+, t1455, 1, t1455; // incremnetnado la pos del arreglo
+, t1461, 1, t1461; // incrementando la pos de la cadena
=>, t1461, t1462, heap; // sacandor el caracter del heap cadena
jmp, , , L486;
jmp, , , L489;
L489:
jmp, , , L487;
L487:
+, P, 2, t1463;
=>, t1463, t1464, stack; 
=>, t1464, t1465, heap; 
=>, t1465, t1466, heap; // valor de size del arreglo ape
+, t1465, 1, t1467; // apuntador donde inicia el arreglo ape
=>, t1467, t1468, heap; // primer caracter del arreglo ape
+, H, 0, t1469;
+, H, 1, t1470;
<=, t1469, t1470, heap; 
+, H, 1, H;
+, 0, 0, t1471;
<=, H, t1471, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L490:
jne, t1468, 36, L491;
jmp, , , L492;
L491:
<=, H, t1468, heap; // ingresando el caracter 
+, H, 1, H;
+, t1471, 1, t1471; // incrementando en uno el size de la nueva cadena
+, t1467, 1, t1467;
=>, t1467, t1468, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L490;
L492:
<=, t1470, t1471, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// ----------------- Resolviendo acceso local 
+, P, 1, t1472; // pos del objeto
=>, t1472, t1474, stack; //apuntador al heap del obejto
=>, t1474, t1475, heap; // recuperando pos incial del objeto
+, t1475, 4, t1474;
=>, t1474, t1476, heap; // valor a retoranar del acceso
//------------------------------ Conversion cadena de la referencia ------------------------
+, H, 0, t1477;
+, H, 1, t1478;
<=, t1477, t1478, heap;
+, H, 1, H;
+, H, 1, H;
=>, t1474, t1479, heap; 
+, t1479, 1, t1480;
=>, t1480, t1481, heap; // caracter actual
+, 0, 0, t1482;
L493:
jne, t1481, 36, L494;
jmp, , , L495;
L494:
+, t1482, 1, t1482;
<=, H, t1481, heap;
+, H, 1, H;
+, t1480, 1, t1480;
=>, t1480, t1481, heap; // caracter actual
jmp, , , L493;
L495:
<=, H, 34, heap;
+, H, 1, H;
<=, t1478, t1482, heap;
//Iniciando a concatnar cadenas 
=>, t1469, t1483, heap;
=>, t1483, t1484, heap; // size cadena1
+, t1483, 1, t1485; // pos 0 de la cadena 1
=>, t1477, t1486, heap;
=>, t1486, t1487, heap; // size cadena2
+, t1486, 1, t1488; // pos 0 de la cadena 2
+, t1484, t1487, t1489; // size de la nueva cadena
=>, t1485, t1490, heap; // primer caracter de la cadena 1
=>, t1488, t1491, heap; // primer caracter de la cadena 2
+, H, 0, t1492; // posicion de retorno de la cadena
+, H, 1, t1493;
<=, t1492, t1493, heap;
+, H, 1, H;
<=, H, t1489, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L496;
L496:
jne, t1490, 34, L497;
jmp, , , L498;
jmp, , , L497;
L497:
<=, H, t1490, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t1485, 1, t1485;
=>, t1485, t1490, heap;
jmp, , , L496;
jmp, , , L498;
L498:
jmp, , , L499;
L499:
jne, t1491, 34, L500;
jmp, , , L501;
jmp, , , L500;
L500:
<=, H, t1491, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t1488, 1, t1488;
=>, t1488, t1491, heap;
jmp, , , L499;
jmp, , , L501;
L501:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 2, t1496; // pos del arreglo 
=>, t1496, t1497, stack; //apuntador al heap del arreglo
=>, t1497, t1498, heap; // apuntador del heap al heap donde inicia la cadena
=>, t1498, t1494, heap; // size del arreglo ape
+, t1498, 1, t1495; // pos 0 donde inicia el arreglo ape
=>, t1492, t1499, heap; // pos que apunta al size de la cadena
=>, t1499, t1500, heap; // size de la cadena
+, t1499, 1, t1501; // Pos 0 de la cadena
=>, t1501, t1502, heap; // sacandor el caracter del heap cadena
jle, t1500, t1494, L502;
jmp, , , L503;
jmp, , , L502;
L502:
jne, t1502, 34, L504;
jmp, , , L505;
jmp, , , L504;
L504:
<=, t1495, t1502, heap; // guardando el caracter 
+, t1495, 1, t1495; // incremnetnado la pos del arreglo
+, t1501, 1, t1501; // incrementando la pos de la cadena
=>, t1501, t1502, heap; // sacandor el caracter del heap cadena
jmp, , , L502;
jmp, , , L505;
L505:
jmp, , , L503;
L503:
jmp, , , L474; // salida del if
L476:

L474:

L473:
end, , Persona_vacio_matrimonio_Persona




begin, , , Persona_vacio_nacer

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t1503; // pos this 
=>, t1503, t1504, stack; // obtenido apuntador al heap 
=>, t1504, t1505, heap; // apuntador 
+, t1505, 1, t1506; // pos de edad
=>, t1506, t1507, heap; // obtengo el valor que se encuentre en el heap 
<=, t1506, 0, HEAP; // asignando variable 
// Resolviendo una cadena 
+, H, 0, t1508; //apuntaodr a cadena 
+, H, 1, t1509; //apu donde inicia la cadena
<=, t1508, t1509, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 14, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t1510; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 115, heap; //guardadndo s
+, H, 1, H;
<=, H, 116, heap; //guardadndo t
+, H, 1, H;
<=, H, 111, heap; //guardadndo o
+, H, 1, H;
<=, H, 121, heap; //guardadndo y
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 99, heap; //guardadndo c
+, H, 1, H;
<=, H, 101, heap; //guardadndo e
+, H, 1, H;
<=, H, 114, heap; //guardadndo r
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
print("%s", t1508);

L506:
end, , Persona_vacio_nacer


