

begin, , , holis_vacio_holis_caracter

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t1; //pos this del arreglo
=>, t1, t2, stack; //obteniendo apuntador de arreglo en eel heap
=>, t2, t3, heap;//apuntando donde en verdad inicia el arreglo
+, t3, 0, t4; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t4, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 20, 1, t5; //calculando el n real
-, t5, 0, t6; //iReal columna 0
+, t6, 1, t6; //size del arreglo nombre
<=, H, t6, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t6, 0, t7; // anhadiendo una posicion mas
+, h, t7, h; // reservnado el espacio del arreglo nombre
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t8; // pos this 
=>, t8, t9, stack; // obtenido apuntador al heap 
=>, t9, t10, heap; // apuntador 
+, t10, 0, t11; // pos de nombre
=>, t11, t12, heap; // obtengo el valor que se encuentre en el heap 
+, P, 1, t13;
=>, t13, t14, stack; 
=>, t14, t15, heap; 
=>, t15, t16, heap; // valor de size del arreglo n
+, t15, 1, t17; // apuntador donde inicia el arreglo n
=>, t17, t18, heap; // primer caracter del arreglo n
+, H, 0, t19;
+, H, 1, t20;
<=, t19, t20, heap; 
+, H, 1, H;
+, 0, 0, t21;
<=, H, t21, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L2:
jne, t18, 36, L3;
jmp, , , L4;
L3:
<=, H, t18, heap; // ingresando el caracter 
+, H, 1, H;
+, t21, 1, t21; // incrementando en uno el size de la nueva cadena
+, t17, 1, t17;
=>, t17, t18, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L2;
L4:
<=, t20, t21, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t11, 1, t22;
// -------------------- Arreglo global asignar :) 
=>, t11, t23, heap; // inicia el arreglo
=>, t23, t24, heap; // size del arreglo 
+, t23, 1, t25; //Pos 0 del arreglo
=>, t19, t26, heap; // pos que apunta al size de la cadena
=>, t26, t27, heap; // size de la cadena
+, t26, 1, t28; // Pos 0 de la cadena
=>, t28, t29, heap; // sacandor el caracter del heap cadena
jle, t27, t24, L5;
jmp, , , L6;
jmp, , , L5;
L5:
jne, t29, 34, L7;
jmp, , , L8;
jmp, , , L7;
L7:
<=, t25, t29, heap; // guardando el caracter 
+, t25, 1, t25; // incremnetnado la pos del arreglo
+, t28, 1, t28; // incrementando la pos de la cadena
=>, t28, t29, heap; // sacandor el caracter del heap cadena
jmp, , , L5;
jmp, , , L8;
L8:
jmp, , , L6;
L6:
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t30; // pos this 
=>, t30, t31, stack; // obtenido apuntador al heap 
=>, t31, t32, heap; // apuntador 
+, t32, 0, t33; // pos de nombre
=>, t33, t34, heap; // obtengo el valor que se encuentre en el heap 
print("%a", t33);
+, P, 1, t35;
=>, t35, t36, stack; 
=>, t36, t37, heap; 
=>, t37, t38, heap; // valor de size del arreglo n
+, t37, 1, t39; // apuntador donde inicia el arreglo n
=>, t39, t40, heap; // primer caracter del arreglo n
+, H, 0, t41;
+, H, 1, t42;
<=, t41, t42, heap; 
+, H, 1, H;
+, 0, 0, t43;
<=, H, t43, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L9:
jne, t40, 36, L10;
jmp, , , L11;
L10:
<=, H, t40, heap; // ingresando el caracter 
+, H, 1, H;
+, t43, 1, t43; // incrementando en uno el size de la nueva cadena
+, t39, 1, t39;
=>, t39, t40, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L9;
L11:
<=, t42, t43, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t41);

L1:
end, , holis_vacio_holis_caracter




begin, , , individuo_vacio_individuo_entero_caracter

// ----------------------- Creando arreglo atributo nombre
+, P, 0, t44; //pos this del arreglo
=>, t44, t45, stack; //obteniendo apuntador de arreglo en eel heap
=>, t45, t46, heap;//apuntando donde en verdad inicia el arreglo
+, t46, 0, t47; //pos del heap que guarda apuntador del heap para el arreglo nombre
<=, t47, H, heap; //escribiendo apunt del heap donde inicia el arreglo 
// REsolvemos tamanio del arreglo
-, 20, 1, t48; //calculando el n real
-, t48, 0, t49; //iReal columna 0
+, t49, 1, t49; //size del arreglo nombre
<=, H, t49, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, t49, 0, t50; // anhadiendo una posicion mas
+, h, t50, h; // reservnado el espacio del arreglo nombre
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t51; // pos this 
=>, t51, t52, stack; // obtenido apuntador al heap 
=>, t52, t53, heap; // apuntador 
+, t53, 0, t54; // pos de nombre
=>, t54, t55, heap; // obtengo el valor que se encuentre en el heap 
+, P, 2, t56;
=>, t56, t57, stack; 
=>, t57, t58, heap; 
=>, t58, t59, heap; // valor de size del arreglo nom
+, t58, 1, t60; // apuntador donde inicia el arreglo nom
=>, t60, t61, heap; // primer caracter del arreglo nom
+, H, 0, t62;
+, H, 1, t63;
<=, t62, t63, heap; 
+, H, 1, H;
+, 0, 0, t64;
<=, H, t64, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L13:
jne, t61, 36, L14;
jmp, , , L15;
L14:
<=, H, t61, heap; // ingresando el caracter 
+, H, 1, H;
+, t64, 1, t64; // incrementando en uno el size de la nueva cadena
+, t60, 1, t60;
=>, t60, t61, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L13;
L15:
<=, t63, t64, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
-, t54, 1, t65;
// -------------------- Arreglo global asignar :) 
=>, t54, t66, heap; // inicia el arreglo
=>, t66, t67, heap; // size del arreglo 
+, t66, 1, t68; //Pos 0 del arreglo
=>, t62, t69, heap; // pos que apunta al size de la cadena
=>, t69, t70, heap; // size de la cadena
+, t69, 1, t71; // Pos 0 de la cadena
=>, t71, t72, heap; // sacandor el caracter del heap cadena
jle, t70, t67, L16;
jmp, , , L17;
jmp, , , L16;
L16:
jne, t72, 34, L18;
jmp, , , L19;
jmp, , , L18;
L18:
<=, t68, t72, heap; // guardando el caracter 
+, t68, 1, t68; // incremnetnado la pos del arreglo
+, t71, 1, t71; // incrementando la pos de la cadena
=>, t71, t72, heap; // sacandor el caracter del heap cadena
jmp, , , L16;
jmp, , , L19;
L19:
jmp, , , L17;
L17:
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t73; // pos this 
=>, t73, t74, stack; // obtenido apuntador al heap 
=>, t74, t75, heap; // apuntador 
+, t75, 1, t76; // pos de edad
=>, t76, t77, heap; // obtengo el valor que se encuentre en el heap 
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t78; // pos de edad
=>, t78, t79, stack; // valor de lo que trae en el stack edad
<=, t76, t79, HEAP; // asignando variable 
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t80; // pos this 
=>, t80, t81, stack; // obtenido apuntador al heap 
=>, t81, t82, heap; // apuntador 
+, t82, 0, t83; // pos de nombre
=>, t83, t84, heap; // obtengo el valor que se encuentre en el heap 
print("%a", t83);
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t85; // pos this 
=>, t85, t86, stack; // obtenido apuntador al heap 
=>, t86, t87, heap; // apuntador 
+, t87, 1, t88; // pos de edad
=>, t88, t89, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t89);
// ----------- Instancia a un atributo --------------
+, p, 0, t90;// pos this de g
=>, t90, t91, stack; //apuntador del heap de g
=>, t91, t92, heap; //posicion real del heap donde inicia g
+, t92, 2, t93; //pos real del atributo g
<=, t93, h, heap; //guardando la pos real donde inicia el objeto g
+, h, 1, h; // reservando el espacio de memoria para el nuevo objeto g

// Guardando la referencia al this del objeto para la llamada al constructor g
+, p, 0, t94;
=>, t94, t95, stack; //apuntador al heap de g
=>, t95, t96, heap; //posicion real donde incia el objeto g
+, t96, 2, t97; // pos real donde incial el objeto g

+, p, 4, t98; // tamanho de la funcion actual individuo_vacio_individuo_entero_caracter
+, t98, 0, t99; // pos del this para la nueva instancia de g
<=, t99, t97, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 4, t100; // size de funcion actual
+, t100, 1, t101; //pos del parametro 1
// declarando parametros  arreglo de tipo n
// ------------------------ Creando arreglo local n
+, P, t101, t102; //pos de arreglo n
<=, t102, H, stack; // ingrensando al stack apunt del heap para n
+, H, 1, t103;
<=, H, t103, heap; //insetnado donde inicia el arreglo n
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t104; //calculando el n real
-, t104, 0, t105; //iReal columna 0
+, t105, 1, t105; //size del arreglo n
<=, H, t105, heap; // insertando el tamanio del arreglo linealizado n
+, H, 1, H;
+, h, t105, h; // reservnado el espacio del arreglo n
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t106; // pos this 
=>, t106, t107, stack; // obtenido apuntador al heap 
=>, t107, t108, heap; // apuntador 
+, t108, 0, t109; // pos de nombre
=>, t109, t110, heap; // obtengo el valor que se encuentre en el heap 
<=, t101, t109, stack; //  reerencia del arreglo asignado al stack el parametro
+, p, 4, p; // simulando cambio de ambito
call, , , holis_vacio_holis_caracter;
-, p, 4, p; // regresando al ambito acutal


L12:
end, , individuo_vacio_individuo_entero_caracter




begin, , , ejemplos_PRINCIPAL

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 0, t111; // pos de temp1
*, 3, 7, t112;
/, 8, 2, t113;
-, t112, t113, t114;
-, 5, 10, t115;
*, 8, t115, t116;
-, t114, t116, t117;
<=, t111, t117, stack; // asignando a temp1
// ------------------------ Creando arreglo local texto
+, P, 1, t118; //pos de arreglo texto
<=, t118, H, stack; // ingrensando al stack apunt del heap para texto
+, H, 1, t119;
<=, H, t119, heap; //insetnado donde inicia el arreglo texto
+, H, 1, H;
// calculando el tamanho del arreglo
-, 25, 1, t120; //calculando el n real
-, t120, 0, t121; //iReal columna 0
+, t121, 1, t121; //size del arreglo texto
<=, H, t121, heap; // insertando el tamanio del arreglo linealizado texto
+, H, 1, H;
+, h, t121, h; // reservnado el espacio del arreglo texto
+, P, 1, t124; // pos del arreglo 
=>, t124, t125, stack; //apuntador al heap del arreglo
=>, t125, t126, heap; // apuntador del heap al heap donde inicia la cadena
=>, t126, t122, heap; // size del arreglo texto
+, t126, 1, t123; // pos 0 donde inicia el arreglo texto
// Resolviendo una cadena 
+, H, 0, t127; //apuntaodr a cadena 
+, H, 1, t128; //apu donde inicia la cadena
<=, t127, t128, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 13, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t129; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 50, heap; //guardadndo 2
+, H, 1, H;
<=, H, 46, heap; //guardadndo .
+, H, 1, H;
<=, H, 49, heap; //guardadndo 1
+, H, 1, H;
<=, H, 41, heap; //guardadndo )
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 51, heap; //guardadndo 3
+, H, 1, H;
<=, H, 48, heap; //guardadndo 0
+, H, 1, H;
<=, H, 37, heap; //guardadndo %
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 62, heap; //guardadndo >
+, H, 1, H;
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
=>, t127, t130, heap; // pos que apunta al size de la cadena
=>, t130, t131, heap; // size de la cadena
+, t130, 1, t132; // Pos 0 de la cadena
=>, t132, t133, heap; // sacandor el caracter del heap cadena
jle, t131, t122, L21;
jmp, , , L22;
jmp, , , L21;
L21:
jne, t133, 34, L23;
jmp, , , L24;
jmp, , , L23;
L23:
<=, t123, t133, heap; // guardando el caracter 
+, t123, 1, t123; // incremnetnado la pos del arreglo
+, t132, 1, t132; // incrementando la pos de la cadena
=>, t132, t133, heap; // sacandor el caracter del heap cadena
jmp, , , L21;
jmp, , , L24;
L24:
jmp, , , L22;
L22:
+, P, 1, t134;
=>, t134, t135, stack; 
=>, t135, t136, heap; 
=>, t136, t137, heap; // valor de size del arreglo texto
+, t136, 1, t138; // apuntador donde inicia el arreglo texto
=>, t138, t139, heap; // primer caracter del arreglo texto
+, H, 0, t140;
+, H, 1, t141;
<=, t140, t141, heap; 
+, H, 1, H;
+, 0, 0, t142;
<=, H, t142, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L25:
jne, t139, 36, L26;
jmp, , , L27;
L26:
<=, H, t139, heap; // ingresando el caracter 
+, H, 1, H;
+, t142, 1, t142; // incrementando en uno el size de la nueva cadena
+, t138, 1, t138;
=>, t138, t139, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L25;
L27:
<=, t141, t142, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t140);
+, P, 1, t143;
=>, t143, t144, stack; 
=>, t144, t145, heap; 
=>, t145, t146, heap; // valor de size del arreglo texto
+, t145, 1, t147; // apuntador donde inicia el arreglo texto
=>, t147, t148, heap; // primer caracter del arreglo texto
+, H, 0, t149;
+, H, 1, t150;
<=, t149, t150, heap; 
+, H, 1, H;
+, 0, 0, t151;
<=, H, t151, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L28:
jne, t148, 36, L29;
jmp, , , L30;
L29:
<=, H, t148, heap; // ingresando el caracter 
+, H, 1, H;
+, t151, 1, t151; // incrementando en uno el size de la nueva cadena
+, t147, 1, t147;
=>, t147, t148, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L28;
L30:
<=, t150, t151, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
// -------------- Resolviendo para un ID (var local) ------------
+, p, 0, t152; // pos de temp1
=>, t152, t153, stack; // valor de lo que trae en el stack temp1
// Resolviendo una cadena 
+, H, 0, t154; //apuntaodr a cadena 
+, H, 1, t155; //apu donde inicia la cadena
<=, t154, t155, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 1, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t156; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 32, heap; //guardadndo  
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// Resolviendo una cadena 
+, H, 0, t157; //apuntaodr a cadena 
+, H, 1, t158; //apu donde inicia la cadena
<=, t157, t158, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 0, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t159; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// ---------------------------  Convertir a caden aun decimal ----
%#, t153, 0, t160; // parte entera del numero t153
!#, t153, 0, t161; // parte decimal del numero t153
// ---------------------------- Convertir parte entera a cadena ----------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t162; // inicio cad1 (inversa)
+, H, 1, t163;
<=, t162, t163, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t160, 0, t164;
+, 0, 0, t165;
+, 0, 0, t166;
+, 0, 0, t167;
+, t160, 0, t168;
L31:
jl, t165, t164, L32;
jmp, , , L33;
L32:
%%, t168, 0, t166;
+, t166, 48, t169;
<=, H, t169, heap;
+, H, 1, H; 
##, t168, 0, t168;
+, t165, 1, t165;
jmp, , , L31;
L33:
<=, H, 34, heap; 
+, H, 1, H;
<=, t163, t164, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t164, 0, t170;
+, t170, 0, t171;
+, t163, t170, t172; // pos inicial del primero caracter de la cadena
=>, t172, t173, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t174;
+, H, 1, t175;
<=, t174, t175, heap; 
+, H, 1, H;
+, H, 1, H;
L34:
jl, 0, t171, L35;
jmp, , , L36;
L35:
<=, H, t173, heap; // guardando caracterr actual
+, H, 1, H;
-, t172, 1, t172;
=>, t172, t173, heap;
-, t171, 1, t171;
jmp, , , L34;
L36:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t175, t170, heap;
// ----------------------  Crear cadena para el punto ------------------
+, H, 0, t176; //apuntador de cadena
+, H, 1, t177; // posicion donde iniciara la cadena
<=, t176, t177, heap; //insertando apuntador del heap donde incia la cadena
+, H, 1, H; // incrementando h
<=, H, 1, heap; //ingrensado el tamanho de la cadena nueva 
+, H, 1, H; // incrementando h
<=, H, 46, heap; // ingresnado caracter al heap
+, H, 1, H; // incrementando h
<=, H, 34, heap; //caracter de escape de la nueva cadena
+, H, 1, H; // incrementando h
// ----------------------- Concatenar parte entera con punto -----------------------
//Iniciando a concatnar cadenas 
=>, t174, t178, heap;
=>, t178, t179, heap; // size cadena1
+, t178, 1, t180; // pos 0 de la cadena 1
=>, t176, t181, heap;
=>, t181, t182, heap; // size cadena2
+, t181, 1, t183; // pos 0 de la cadena 2
+, t179, t182, t184; // size de la nueva cadena
=>, t180, t185, heap; // primer caracter de la cadena 1
=>, t183, t186, heap; // primer caracter de la cadena 2
+, H, 0, t187; // posicion de retorno de la cadena
+, H, 1, t188;
<=, t187, t188, heap;
+, H, 1, H;
<=, H, t184, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L37;
L37:
jne, t185, 34, L38;
jmp, , , L39;
jmp, , , L38;
L38:
<=, H, t185, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t180, 1, t180;
=>, t180, t185, heap;
jmp, , , L37;
jmp, , , L39;
L39:
jmp, , , L40;
L40:
jne, t186, 34, L41;
jmp, , , L42;
jmp, , , L41;
L41:
<=, H, t186, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t183, 1, t183;
=>, t183, t186, heap;
jmp, , , L40;
jmp, , , L42;
L42:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
// ------------------------------ Crear Cadena para parte decimal -------------------------
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t189; // inicio cad1 (inversa)
+, H, 1, t190;
<=, t189, t190, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t161, 0, t191;
+, 0, 0, t192;
+, 0, 0, t193;
+, 0, 0, t194;
+, t161, 0, t195;
L43:
jl, t192, t191, L44;
jmp, , , L45;
L44:
%%, t195, 0, t193;
+, t193, 48, t196;
<=, H, t196, heap;
+, H, 1, H; 
##, t195, 0, t195;
+, t192, 1, t192;
jmp, , , L43;
L45:
<=, H, 34, heap; 
+, H, 1, H;
<=, t190, t191, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t191, 0, t197;
+, t197, 0, t198;
+, t190, t197, t199; // pos inicial del primero caracter de la cadena
=>, t199, t200, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t201;
+, H, 1, t202;
<=, t201, t202, heap; 
+, H, 1, H;
+, H, 1, H;
L46:
jl, 0, t198, L47;
jmp, , , L48;
L47:
<=, H, t200, heap; // guardando caracterr actual
+, H, 1, H;
-, t199, 1, t199;
=>, t199, t200, heap;
-, t198, 1, t198;
jmp, , , L46;
L48:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t202, t197, heap;
// -------------------------- Concatenar parte entera con punto y parte decimal --------------------
//Iniciando a concatnar cadenas 
=>, t187, t203, heap;
=>, t203, t204, heap; // size cadena1
+, t203, 1, t205; // pos 0 de la cadena 1
=>, t201, t206, heap;
=>, t206, t207, heap; // size cadena2
+, t206, 1, t208; // pos 0 de la cadena 2
+, t204, t207, t209; // size de la nueva cadena
=>, t205, t210, heap; // primer caracter de la cadena 1
=>, t208, t211, heap; // primer caracter de la cadena 2
+, H, 0, t212; // posicion de retorno de la cadena
+, H, 1, t213;
<=, t212, t213, heap;
+, H, 1, H;
<=, H, t209, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L49;
L49:
jne, t210, 34, L50;
jmp, , , L51;
jmp, , , L50;
L50:
<=, H, t210, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t205, 1, t205;
=>, t205, t210, heap;
jmp, , , L49;
jmp, , , L51;
L51:
jmp, , , L52;
L52:
jne, t211, 34, L53;
jmp, , , L54;
jmp, , , L53;
L53:
<=, H, t211, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t208, 1, t208;
=>, t208, t211, heap;
jmp, , , L52;
jmp, , , L54;
L54:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t154, t214, heap;
=>, t214, t215, heap; // size cadena1
+, t214, 1, t216; // pos 0 de la cadena 1
=>, t212, t217, heap;
=>, t217, t218, heap; // size cadena2
+, t217, 1, t219; // pos 0 de la cadena 2
+, t215, t218, t220; // size de la nueva cadena
=>, t216, t221, heap; // primer caracter de la cadena 1
=>, t219, t222, heap; // primer caracter de la cadena 2
+, H, 0, t223; // posicion de retorno de la cadena
+, H, 1, t224;
<=, t223, t224, heap;
+, H, 1, H;
<=, H, t220, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L55;
L55:
jne, t221, 34, L56;
jmp, , , L57;
jmp, , , L56;
L56:
<=, H, t221, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t216, 1, t216;
=>, t216, t221, heap;
jmp, , , L55;
jmp, , , L57;
L57:
jmp, , , L58;
L58:
jne, t222, 34, L59;
jmp, , , L60;
jmp, , , L59;
L59:
<=, H, t222, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t219, 1, t219;
=>, t219, t222, heap;
jmp, , , L58;
jmp, , , L60;
L60:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
//Iniciando a concatnar cadenas 
=>, t223, t225, heap;
=>, t225, t226, heap; // size cadena1
+, t225, 1, t227; // pos 0 de la cadena 1
=>, t157, t228, heap;
=>, t228, t229, heap; // size cadena2
+, t228, 1, t230; // pos 0 de la cadena 2
+, t226, t229, t231; // size de la nueva cadena
=>, t227, t232, heap; // primer caracter de la cadena 1
=>, t230, t233, heap; // primer caracter de la cadena 2
+, H, 0, t234; // posicion de retorno de la cadena
+, H, 1, t235;
<=, t234, t235, heap;
+, H, 1, H;
<=, H, t231, heap; //guardo el size de la nueva cadena
+, H, 1, H;
jmp, , , L61;
L61:
jne, t232, 34, L62;
jmp, , , L63;
jmp, , , L62;
L62:
<=, H, t232, heap; //asignando caracter a la nueva cadena de la cadena 1
+, H, 1, H;
+, t227, 1, t227;
=>, t227, t232, heap;
jmp, , , L61;
jmp, , , L63;
L63:
jmp, , , L64;
L64:
jne, t233, 34, L65;
jmp, , , L66;
jmp, , , L65;
L65:
<=, H, t233, heap; // ingresando caracter de la cadena 2
+, H, 1, H;
+, t230, 1, t230;
=>, t230, t233, heap;
jmp, , , L64;
jmp, , , L66;
L66:
<=, H, 34, heap; // apuntador final de la cadena
+, h, 1, h;
+, P, 1, t238; // pos del arreglo 
=>, t238, t239, stack; //apuntador al heap del arreglo
=>, t239, t240, heap; // apuntador del heap al heap donde inicia la cadena
=>, t240, t236, heap; // size del arreglo texto
+, t240, 1, t237; // pos 0 donde inicia el arreglo texto
=>, t234, t241, heap; // pos que apunta al size de la cadena
=>, t241, t242, heap; // size de la cadena
+, t241, 1, t243; // Pos 0 de la cadena
=>, t243, t244, heap; // sacandor el caracter del heap cadena
jle, t242, t236, L67;
jmp, , , L68;
jmp, , , L67;
L67:
jne, t244, 34, L69;
jmp, , , L70;
jmp, , , L69;
L69:
<=, t237, t244, heap; // guardando el caracter 
+, t237, 1, t237; // incremnetnado la pos del arreglo
+, t243, 1, t243; // incrementando la pos de la cadena
=>, t243, t244, heap; // sacandor el caracter del heap cadena
jmp, , , L67;
jmp, , , L70;
L70:
jmp, , , L68;
L68:
+, P, 1, t245;
=>, t245, t246, stack; 
=>, t246, t247, heap; 
=>, t247, t248, heap; // valor de size del arreglo texto
+, t247, 1, t249; // apuntador donde inicia el arreglo texto
=>, t249, t250, heap; // primer caracter del arreglo texto
+, H, 0, t251;
+, H, 1, t252;
<=, t251, t252, heap; 
+, H, 1, H;
+, 0, 0, t253;
<=, H, t253, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L71:
jne, t250, 36, L72;
jmp, , , L73;
L72:
<=, H, t250, heap; // ingresando el caracter 
+, H, 1, H;
+, t253, 1, t253; // incrementando en uno el size de la nueva cadena
+, t249, 1, t249;
=>, t249, t250, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L71;
L73:
<=, t252, t253, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t251);

L20:
end, , ejemplos_PRINCIPAL


