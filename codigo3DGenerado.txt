

begin, , , llanta_vacio_llanta_entero

// Asignando atributo valor1
+, p, 0, t1; //pos this 
=>, t1, t2, stack; // apuntador al heap
=>, t2, t3, heap; // apuntador donde inicia el objeto
+, t3, 0, t4; // pos real  de valor1
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t5; // pos de val
=>, t5, t6, stack; // valor de lo que trae en el stack val
<=, t4, t6, heap; //guardando en el heap el valor del atributo
// Asignando atributo valor2
+, p, 0, t7; //pos this 
=>, t7, t8, stack; // apuntador al heap
=>, t8, t9, heap; // apuntador donde inicia el objeto
+, t9, 1, t10; // pos real  de valor2
// -------------- Resolviendo para un ID (var local) ------------
+, p, 1, t11; // pos de val
=>, t11, t12, stack; // valor de lo que trae en el stack val
*, t12, 10, t13;
<=, t10, t13, heap; //guardando en el heap el valor del atributo
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t14; // pos this 
=>, t14, t15, stack; // obtenido apuntador al heap 
=>, t15, t16, heap; // apuntador 
+, t16, 1, t17; // pos de valor2
=>, t17, t18, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t18);

end, , llanta_vacio_llanta_entero




begin, , , llanta_vacio_getValor1


end, , llanta_vacio_getValor1




begin, , , carro_vacio_carro

// ----------- Instancia a un atributo --------------
+, p, 0, t19;// pos this de repuesto
=>, t19, t20, stack; //apuntador del heap de repuesto
=>, t20, t21, heap; //posicion real del heap donde inicia repuesto
+, t21, 4, t22; //pos real del atributo repuesto
<=, t22, h, heap; //guardando la pos real donde inicia el objeto repuesto
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto repuesto

// Guardando la referencia al this del objeto para la llamada al constructor repuesto
+, p, 0, t23;
=>, t23, t24, stack; //apuntador al heap de repuesto
=>, t24, t25, heap; //posicion real donde incia el objeto repuesto
+, t25, 4, t26; // pos real donde incial el objeto repuesto

+, p, t26, t27; // tamanho de la funcion actual carro_vacio_carro
+, t27, 0, t28; // pos del this para la nueva instancia de repuesto
<=, t28, t26, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t29; // size de funcion actual
+, t29, 1, t30; //pos del parametro 1
<=, t30, 15, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t31;// pos this de lla1
=>, t31, t32, stack; //apuntador del heap de lla1
=>, t32, t33, heap; //posicion real del heap donde inicia lla1
+, t33, 0, t34; //pos real del atributo lla1
<=, t34, h, heap; //guardando la pos real donde inicia el objeto lla1
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla1

// Guardando la referencia al this del objeto para la llamada al constructor lla1
+, p, 0, t35;
=>, t35, t36, stack; //apuntador al heap de lla1
=>, t36, t37, heap; //posicion real donde incia el objeto lla1
+, t37, 0, t38; // pos real donde incial el objeto lla1

+, p, t38, t39; // tamanho de la funcion actual carro_vacio_carro
+, t39, 0, t40; // pos del this para la nueva instancia de lla1
<=, t40, t38, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t41; // size de funcion actual
+, t41, 1, t42; //pos del parametro 1
<=, t42, 1, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t43;// pos this de lla2
=>, t43, t44, stack; //apuntador del heap de lla2
=>, t44, t45, heap; //posicion real del heap donde inicia lla2
+, t45, 1, t46; //pos real del atributo lla2
<=, t46, h, heap; //guardando la pos real donde inicia el objeto lla2
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla2

// Guardando la referencia al this del objeto para la llamada al constructor lla2
+, p, 0, t47;
=>, t47, t48, stack; //apuntador al heap de lla2
=>, t48, t49, heap; //posicion real donde incia el objeto lla2
+, t49, 1, t50; // pos real donde incial el objeto lla2

+, p, t50, t51; // tamanho de la funcion actual carro_vacio_carro
+, t51, 0, t52; // pos del this para la nueva instancia de lla2
<=, t52, t50, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t53; // size de funcion actual
+, t53, 1, t54; //pos del parametro 1
<=, t54, 2, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t55;// pos this de lla3
=>, t55, t56, stack; //apuntador del heap de lla3
=>, t56, t57, heap; //posicion real del heap donde inicia lla3
+, t57, 2, t58; //pos real del atributo lla3
<=, t58, h, heap; //guardando la pos real donde inicia el objeto lla3
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla3

// Guardando la referencia al this del objeto para la llamada al constructor lla3
+, p, 0, t59;
=>, t59, t60, stack; //apuntador al heap de lla3
=>, t60, t61, heap; //posicion real donde incia el objeto lla3
+, t61, 2, t62; // pos real donde incial el objeto lla3

+, p, t62, t63; // tamanho de la funcion actual carro_vacio_carro
+, t63, 0, t64; // pos del this para la nueva instancia de lla3
<=, t64, t62, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t65; // size de funcion actual
+, t65, 1, t66; //pos del parametro 1
<=, t66, 3, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// ----------- Instancia a un atributo --------------
+, p, 0, t67;// pos this de lla4
=>, t67, t68, stack; //apuntador del heap de lla4
=>, t68, t69, heap; //posicion real del heap donde inicia lla4
+, t69, 3, t70; //pos real del atributo lla4
<=, t70, h, heap; //guardando la pos real donde inicia el objeto lla4
+, h, 2, h; // reservando el espacio de memoria para el nuevo objeto lla4

// Guardando la referencia al this del objeto para la llamada al constructor lla4
+, p, 0, t71;
=>, t71, t72, stack; //apuntador al heap de lla4
=>, t72, t73, heap; //posicion real donde incia el objeto lla4
+, t73, 3, t74; // pos real donde incial el objeto lla4

+, p, t74, t75; // tamanho de la funcion actual carro_vacio_carro
+, t75, 0, t76; // pos del this para la nueva instancia de lla4
<=, t76, t74, stack; //guaradndo el puntero del this en el stack 

// Asignando parametros  
+, p, 2, t77; // size de funcion actual
+, t77, 1, t78; //pos del parametro 1
<=, t78, 4, stack; // asignado al stack el parametro
+, p, 2, p; // simulando cambio de ambito
call, , , llanta_vacio_llanta_entero;
-, p, 2, p; // regresando al ambito acutal

// Asignando atributo color
+, p, 0, t79; //pos this 
=>, t79, t80, stack; // apuntador al heap
=>, t80, t81, heap; // apuntador donde inicia el objeto
+, t81, 5, t82; // pos real  de color
<=, t82, 11, heap; //guardando en el heap el valor del atributo

end, , carro_vacio_carro




begin, , , persona_PRINCIPAL

// ------------------------ Creando arreglo local nombre
+, P, 0, t83; //pos de arreglo nombre
<=, t83, H, stack; // ingrensando al stack apunt del heap para nombre
+, H, 1, t84;
<=, H, t84, heap; //insetnado donde inicia el arreglo nombre
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t85; //calculando el n real
-, t85, 0, t86; //iReal columna 0
<=, H, t86, heap; // insertando el tamanio del arreglo linealizado nombre
+, H, 1, H;
+, h, t86, h; // reservnado el espacio del arreglo nombre
+, P, 0, t87; // pos de arreglo nombre
=>, t87, t88, stack; // apunt al heap de arreglo nombre
=>, t88, t89, heap; //apunt al heap donde inicia el arreglo nombre
=>, t89, t90, heap; //obteniendo el tamanio del arreglo nombre
+, t89, 1, t91; // pos 0 del arreglo nombre
// ---- Calculo de valor de las posiciones  
// ----------- Calculo de iReal para el arreglo nombre
-, 0, 0, t92; //calculando el n real ()
-, t92, 0, t93; //iReal columna 0
+, t91, t93, t94; // pos donde se va inicar a escribir el arreglo nombre
<=, t94, 65, heap; // asignando al heap en la nueva posicion de arreglo nombre
+, P, 0, t95; // pos de arreglo nombre
=>, t95, t96, stack; // apunt al heap de arreglo nombre
=>, t96, t97, heap; //apunt al heap donde inicia el arreglo nombre
=>, t97, t98, heap; //obteniendo el tamanio del arreglo nombre
+, t97, 1, t99; // pos 0 del arreglo nombre
// ---- Calculo de valor de las posiciones  
// ----------- Calculo de iReal para el arreglo nombre
-, 1, 0, t100; //calculando el n real ()
-, t100, 0, t101; //iReal columna 0
+, t99, t101, t102; // pos donde se va inicar a escribir el arreglo nombre
<=, t102, 76, heap; // asignando al heap en la nueva posicion de arreglo nombre
+, P, 0, t103; // pos de arreglo nombre
=>, t103, t104, stack; // apunt al heap de arreglo nombre
=>, t104, t105, heap; //apunt al heap donde inicia el arreglo nombre
=>, t105, t106, heap; //obteniendo el tamanio del arreglo nombre
+, t105, 1, t107; // pos 0 del arreglo nombre
// ---- Calculo de valor de las posiciones  
// ----------- Calculo de iReal para el arreglo nombre
-, 2, 0, t108; //calculando el n real ()
-, t108, 0, t109; //iReal columna 0
+, t107, t109, t110; // pos donde se va inicar a escribir el arreglo nombre
<=, t110, 73, heap; // asignando al heap en la nueva posicion de arreglo nombre
+, P, 0, t111; // pos de arreglo nombre
=>, t111, t112, stack; // apunt al heap de arreglo nombre
=>, t112, t113, heap; //apunt al heap donde inicia el arreglo nombre
=>, t113, t114, heap; //obteniendo el tamanio del arreglo nombre
+, t113, 1, t115; // pos 0 del arreglo nombre
// ---- Calculo de valor de las posiciones  
// ----------- Calculo de iReal para el arreglo nombre
-, 3, 0, t116; //calculando el n real ()
-, t116, 0, t117; //iReal columna 0
+, t115, t117, t118; // pos donde se va inicar a escribir el arreglo nombre
<=, t118, 78, heap; // asignando al heap en la nueva posicion de arreglo nombre
+, P, 0, t119; // pos de arreglo nombre
=>, t119, t120, stack; // apunt al heap de arreglo nombre
=>, t120, t121, heap; //apunt al heap donde inicia el arreglo nombre
=>, t121, t122, heap; //obteniendo el tamanio del arreglo nombre
+, t121, 1, t123; // pos 0 del arreglo nombre
// ---- Calculo de valor de las posiciones  
// ----------- Calculo de iReal para el arreglo nombre
-, 4, 0, t124; //calculando el n real ()
-, t124, 0, t125; //iReal columna 0
+, t123, t125, t126; // pos donde se va inicar a escribir el arreglo nombre
<=, t126, 65, heap; // asignando al heap en la nueva posicion de arreglo nombre

end, , persona_PRINCIPAL




begin, , , persona_vacio_persona_entero_entero

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 1, t127; // pos de edad
*, 25, 2, t128;
<=, t127, t128, stack; // asignando a edad
// ----------- Instancia a un atributo --------------
+, p, 0, t129;// pos this de c
=>, t129, t130, stack; //apuntador del heap de c
=>, t130, t131, heap; //posicion real del heap donde inicia c
+, t131, 2, t132; //pos real del atributo c
<=, t132, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t133;
=>, t133, t134, stack; //apuntador al heap de c
=>, t134, t135, heap; //posicion real donde incia el objeto c
+, t135, 2, t136; // pos real donde incial el objeto c

+, p, t136, t137; // tamanho de la funcion actual persona_vacio_persona_entero_entero
+, t137, 0, t138; // pos del this para la nueva instancia de c
<=, t138, t136, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 4, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 4, p; // regresando al ambito acutal


end, , persona_vacio_persona_entero_entero




begin, , , persona_vacio_persona

// Asignando atributo edad
+, p, 0, t139; //pos this 
=>, t139, t140, stack; // apuntador al heap
=>, t140, t141, heap; // apuntador donde inicia el objeto
+, t141, 0, t142; // pos real  de edad
*, 25, 2, t143;
<=, t142, t143, heap; //guardando en el heap el valor del atributo
// ----------- Instancia a un atributo --------------
+, p, 0, t144;// pos this de c
=>, t144, t145, stack; //apuntador del heap de c
=>, t145, t146, heap; //posicion real del heap donde inicia c
+, t146, 2, t147; //pos real del atributo c
<=, t147, h, heap; //guardando la pos real donde inicia el objeto c
+, h, 6, h; // reservando el espacio de memoria para el nuevo objeto c

// Guardando la referencia al this del objeto para la llamada al constructor c
+, p, 0, t148;
=>, t148, t149, stack; //apuntador al heap de c
=>, t149, t150, heap; //posicion real donde incia el objeto c
+, t150, 2, t151; // pos real donde incial el objeto c

+, p, t151, t152; // tamanho de la funcion actual persona_vacio_persona
+, t152, 0, t153; // pos del this para la nueva instancia de c
<=, t153, t151, stack; //guaradndo el puntero del this en el stack 

// No posee parametros 
+, p, 2, p; // simulando cambio de ambito
call, , , carro_vacio_carro;
-, p, 2, p; // regresando al ambito acutal

// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t154; // pos this 
=>, t154, t155, stack; // obtenido apuntador al heap 
=>, t155, t156, heap; // apuntador 
+, t156, 0, t157; // pos de edad
=>, t157, t158, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t158);
// Asignando atributo edad
+, p, 0, t159; //pos this 
=>, t159, t160, stack; // apuntador al heap
=>, t160, t161, heap; // apuntador donde inicia el objeto
+, t161, 0, t162; // pos real  de edad
=>, t162, t163, heap; //obtenidoe el valor de edad
+, t163, 8, t164;
<=, t162, t164, heap; //guardando en el heap el valor del atributo edad
// ------------ Resolviendo un ID (atributo) -----------
+, p, 0, t165; // pos this 
=>, t165, t166, stack; // obtenido apuntador al heap 
=>, t166, t167, heap; // apuntador 
+, t167, 0, t168; // pos de edad
=>, t168, t169, heap; // obtengo el valor que se encuentre en el heap 
print("%d", t169);

end, , persona_vacio_persona


