

begin, , , ejemplos_PRINCIPAL

// -------------- Resolviendo para un ID (var local) Asignacion ------------
+, p, 0, t1; // pos de h
<=, t1, 125, stack; // asignando a h
// Resolviendo una cadena 
+, H, 0, t2; //apuntaodr a cadena 
+, H, 1, t3; //apu donde inicia la cadena
<=, t2, t3, heap; //guaradnod donde inicia la cadena 
+, H, 1, H;
<=, H, 5, heap; //guardando el tamanio de la cadena
+, H, 1, H;
+, H, 0, t4; // referencia de donde iniciar el primer caracter de la cadena
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 108, heap; //guardadndo l
+, H, 1, H;
<=, H, 105, heap; //guardadndo i
+, H, 1, H;
<=, H, 110, heap; //guardadndo n
+, H, 1, H;
<=, H, 97, heap; //guardadndo a
+, H, 1, H;
<=, H, 34, heap; // ingresando caracter de escape de la cadena
+, H, 1, H;
// ------------ Obtenieido suma de caracteres de una cadena --------
=>, t2, t5, heap; // apunt al heap donde inicia la cadena
+, t5, 1, t6; // pos donde incia la cadena
=>, t6, t7, heap; // valor caracter  de la cadena
+, 0, 0, t8; //acumulador de la cadena
jmp, , , L2;
L2: //etiquera ciclo suma cadena
jne, t7, 34, L3;
jmp, , , L4;
L3:
+, t8, t7, t8; // sumando los caracteres 
+, t6, 1, t6; // sumando una posicion
=>, t6, t7, heap; // obteniendo el valor del caracter 
jmp, , , L2;
L4:
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t9; // inicio cad1 (inversa)
+, H, 1, t10;
<=, t9, t10, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, t8, 0, t11;
+, 0, 0, t12;
+, 0, 0, t13;
+, 0, 0, t14;
+, t8, 0, t15;
L5:
jl, t12, t11, L6;
jmp, , , L7;
L6:
%%, t15, 0, t13;
+, t13, 48, t16;
<=, H, t16, heap;
+, H, 1, H; 
##, t15, 0, t15;
+, t12, 1, t12;
jmp, , , L5;
L7:
<=, H, 34, heap; 
+, H, 1, H;
<=, t10, t11, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t11, 0, t17;
+, t17, 0, t18;
+, t10, t17, t19; // pos inicial del primero caracter de la cadena
=>, t19, t20, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t21;
+, H, 1, t22;
<=, t21, t22, heap; 
+, H, 1, H;
+, H, 1, H;
L8:
jl, 0, t18, L9;
jmp, , , L10;
L9:
<=, H, t20, heap; // guardando caracterr actual
+, H, 1, H;
-, t19, 1, t19;
=>, t19, t20, heap;
-, t18, 1, t18;
jmp, , , L8;
L10:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t22, t17, heap;
print("%s", t21);
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t23; // inicio cad1 (inversa)
+, H, 1, t24;
<=, t23, t24, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, 98, 0, t25;
+, 0, 0, t26;
+, 0, 0, t27;
+, 0, 0, t28;
+, 98, 0, t29;
L11:
jl, t26, t25, L12;
jmp, , , L13;
L12:
%%, t29, 0, t27;
+, t27, 48, t30;
<=, H, t30, heap;
+, H, 1, H; 
##, t29, 0, t29;
+, t26, 1, t26;
jmp, , , L11;
L13:
<=, H, 34, heap; 
+, H, 1, H;
<=, t24, t25, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t25, 0, t31;
+, t31, 0, t32;
+, t24, t31, t33; // pos inicial del primero caracter de la cadena
=>, t33, t34, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t35;
+, H, 1, t36;
<=, t35, t36, heap; 
+, H, 1, H;
+, H, 1, H;
L14:
jl, 0, t32, L15;
jmp, , , L16;
L15:
<=, H, t34, heap; // guardando caracterr actual
+, H, 1, H;
-, t33, 1, t33;
=>, t33, t34, heap;
-, t32, 1, t32;
jmp, , , L14;
L16:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t36, t31, heap;
print("%s", t35);
// ------------------------ Creando arreglo local valores
+, P, 1, t37; //pos de arreglo valores
<=, t37, H, stack; // ingrensando al stack apunt del heap para valores
+, H, 1, t38;
<=, H, t38, heap; //insetnado donde inicia el arreglo valores
+, H, 1, H;
// calculando el tamanho del arreglo
-, 20, 1, t39; //calculando el n real
-, t39, 0, t40; //iReal columna 0
+, t40, 1, t40; //size del arreglo valores
<=, H, t40, heap; // insertando el tamanio del arreglo linealizado valores
+, H, 1, H;
+, h, t40, h; // reservnado el espacio del arreglo valores
+, P, 1, t43; // pos del arreglo 
=>, t43, t44, stack; //apuntador al heap del arreglo
=>, t44, t45, heap; // apuntador del heap al heap donde inicia la cadena
=>, t45, t41, heap; // size del arreglo valores
+, t45, 1, t42; // pos 0 donde inicia el arreglo valores
// -------------------------------- Inicio un casteo a entero ----------------
+, H, 0, t46; // inicio cad1 (inversa)
+, H, 1, t47;
<=, t46, t47, heap;
+, H, 1, H;
+, H, 1, H;
//----- convertir a entero
log10, 97, 0, t48;
+, 0, 0, t49;
+, 0, 0, t50;
+, 0, 0, t51;
+, 97, 0, t52;
L17:
jl, t49, t48, L18;
jmp, , , L19;
L18:
%%, t52, 0, t50;
+, t50, 48, t53;
<=, H, t53, heap;
+, H, 1, H; 
##, t52, 0, t52;
+, t49, 1, t49;
jmp, , , L17;
L19:
<=, H, 34, heap; 
+, H, 1, H;
<=, t47, t48, heap; // size de la cadena del numero numero
// ---------- Voltear la cadena resultante---------
+, t48, 0, t54;
+, t54, 0, t55;
+, t47, t54, t56; // pos inicial del primero caracter de la cadena
=>, t56, t57, heap; // caracter acutla de la cadena
// ----------- Inicinado cadena resultante ---------
+, H, 0, t58;
+, H, 1, t59;
<=, t58, t59, heap; 
+, H, 1, H;
+, H, 1, H;
L20:
jl, 0, t55, L21;
jmp, , , L22;
L21:
<=, H, t57, heap; // guardando caracterr actual
+, H, 1, H;
-, t56, 1, t56;
=>, t56, t57, heap;
-, t55, 1, t55;
jmp, , , L20;
L22:
<=, H, 34, heap; // caracter de escape de la cadena resultante 
+, H, 1, H;
<=, t59, t54, heap;
=>, t58, t60, heap; // pos que apunta al size de la cadena
=>, t60, t61, heap; // size de la cadena
+, t60, 1, t62; // Pos 0 de la cadena
=>, t62, t63, heap; // sacandor el caracter del heap cadena
jle, t61, t41, L23;
jmp, , , L24;
jmp, , , L23;
L23:
jne, t63, 34, L25;
jmp, , , L26;
jmp, , , L25;
L25:
<=, t42, t63, heap; // guardando el caracter 
+, t42, 1, t42; // incremnetnado la pos del arreglo
+, t62, 1, t62; // incrementando la pos de la cadena
=>, t62, t63, heap; // sacandor el caracter del heap cadena
jmp, , , L23;
jmp, , , L26;
L26:
jmp, , , L24;
L24:
+, P, 1, t64; // pos de arreglo valores
=>, t64, t65, stack; // apunt al heap de arreglo valores
=>, t65, t66, heap; //apunt al heap donde inicia el arreglo valores
=>, t66, t67, heap; //obteniendo el tamanio del arreglo valores
+, t66, 1, t68; // pos 0 del arreglo valores
// ---- Calculo de valor de las posiciones  
// -----------(Obteniendo valor) Calculo de iReal para el arreglo valores
-, 0, 0, t69; //calculando el n real ()
-, t69, 0, t70; //iReal columna 0
+, t68, t70, t71; // pos buscada del arreglo  valores
=>, t71, t72, heap; //valor que trae el objeto
print("%c", t72);
+, P, 1, t73;
=>, t73, t74, stack; 
=>, t74, t75, heap; 
=>, t75, t76, heap; // valor de size del arreglo valores
+, t75, 1, t77; // apuntador donde inicia el arreglo valores
=>, t77, t78, heap; // primer caracter del arreglo valores
+, H, 0, t79;
+, H, 1, t80;
<=, t79, t80, heap; 
+, H, 1, H;
+, 0, 0, t81;
<=, H, t81, heap; //asignanando temporalemnte size 0 de la cadena
+, H, 1, H;
L27:
jne, t78, 36, L28;
jmp, , , L29;
L28:
<=, H, t78, heap; // ingresando el caracter 
+, H, 1, H;
+, t81, 1, t81; // incrementando en uno el size de la nueva cadena
+, t77, 1, t77;
=>, t77, t78, heap; // obteniendio el nuevo caractere del arreglo
jmp, , , L27;
L29:
<=, t80, t81, heap; // ingresando el size de la nueva cadena 
<=, H, 34, heap; // ingresando el caracter de escape de la nueva cadena
+, H, 1, H;
print("%s", t79);

L1:
end, , ejemplos_PRINCIPAL


