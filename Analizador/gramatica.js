/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[5,9,14],$V3=[1,15],$V4=[1,35],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,31],$V9=[1,36],$Va=[1,34],$Vb=[1,37],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[15,20,27,28,29,35,37,42,43,69,72,73,120,122,123,124,125,183],$Vm=[1,62],$Vn=[1,61],$Vo=[1,67],$Vp=[2,150],$Vq=[15,42,69,72,73,122,123,124,125,183],$Vr=[13,15,20,27,28,29,35,37,42,43,69,72,73,120,122,123,124,125,183],$Vs=[12,15,46,48],$Vt=[1,81],$Vu=[1,80],$Vv=[1,83],$Vw=[1,86],$Vx=[1,91],$Vy=[1,118],$Vz=[1,119],$VA=[1,123],$VB=[1,132],$VC=[1,131],$VD=[1,105],$VE=[1,112],$VF=[1,114],$VG=[1,115],$VH=[1,116],$VI=[1,117],$VJ=[1,120],$VK=[1,121],$VL=[1,122],$VM=[1,133],$VN=[1,134],$VO=[1,135],$VP=[1,143],$VQ=[15,20,27,28,29,35,37,42,43,69,72,73,79,92,94,97,99,100,101,103,104,106,110,111,112,114,115,116,117,118,119,120,122,123,124,125,183,189],$VR=[1,146],$VS=[1,192],$VT=[1,193],$VU=[1,182],$VV=[1,183],$VW=[1,184],$VX=[1,185],$VY=[1,186],$VZ=[1,187],$V_=[1,188],$V$=[1,189],$V01=[1,190],$V11=[1,191],$V21=[1,177],$V31=[1,178],$V41=[1,180],$V51=[1,179],$V61=[1,181],$V71=[1,195],$V81=[12,48],$V91=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,183],$Va1=[1,209],$Vb1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,129,183],$Vc1=[1,210],$Vd1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,129,131,183],$Ve1=[1,213],$Vf1=[1,214],$Vg1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,183],$Vh1=[1,221],$Vi1=[1,222],$Vj1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,183],$Vk1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],$Vl1=[12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,77,78,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],$Vm1=[1,232],$Vn1=[1,230],$Vo1=[1,231],$Vp1=[1,236],$Vq1=[15,20,27,28,29,35,37,42,43,69,72,73,79,89,91,92,94,97,99,100,101,102,103,104,105,106,110,111,112,115,116,117,118,119,120,122,123,124,125,183,189],$Vr1=[15,20,69,72,73,79,92,94,97,99,100,101,103,104,106,110,111,112,115,116,117,118,119,120,122,123,124,125,183,189],$Vs1=[1,256],$Vt1=[1,257],$Vu1=[1,258],$Vv1=[1,259],$Vw1=[15,114,122,123,124,125],$Vx1=[10,11,15,18,79,145,153,154,155,156,157,158,159,184,185,186],$Vy1=[1,308],$Vz1=[1,309],$VA1=[1,312],$VB1=[1,313],$VC1=[1,314],$VD1=[1,315],$VE1=[1,316],$VF1=[1,317],$VG1=[1,318],$VH1=[1,319],$VI1=[1,320],$VJ1=[20,48],$VK1=[12,13,15,20,27,28,29,35,37,42,43,48,69,70,72,73,77,78,80,84,85,86,87,95,113,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],$VL1=[10,11,15,18,79,133,145,153,154,155,156,157,158,159,184,185,186],$VM1=[2,106],$VN1=[1,354],$VO1=[12,13,15,20,27,28,29,35,37,42,43,48,69,70,72,73,77,78,84,85,86,87,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],$VP1=[1,368],$VQ1=[12,13,15,20,27,28,29,35,37,42,43,48,69,70,72,73,77,78,80,84,85,86,87,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],$VR1=[12,13,15,20,27,28,29,35,37,42,43,48,69,70,72,73,77,78,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183,187],$VS1=[1,380],$VT1=[12,20,48],$VU1=[15,20,27,28,29,35,37,42,43,69,72,73,79,92,94,97,99,100,101,103,104,106,110,111,112,115,116,117,118,119,120,122,123,124,125,183,189],$VV1=[1,454],$VW1=[1,453],$VX1=[1,460],$VY1=[1,459],$VZ1=[20,94,97];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"SENT_ARCHIVO":6,"IMPORTAR":7,"CLASE":8,"importar":9,"abrePar":10,"cadena":11,"cierraPar":12,"puntoComa":13,"clase":14,"id":15,"CUERPO_CLASE":16,"hereda_de":17,"abreLlave":18,"SENTENCIAS_CLASE":19,"cierraLlave":20,"SENTENCIA_CLASE":21,"ATRIBUTO":22,"FUNCION":23,"FUNCION_SOBRE":24,"PRINCIPAL":25,"VISIBILIDAD":26,"publico":27,"protegido":28,"privado":29,"DECLARACION":30,"DECLA_LISTA":31,"DECLA_PILA":32,"DECLA_COLA":33,"ESTRUCTURA":34,"VISIBLIDAD":35,"DECLA_PUNTERO":36,"arroba":37,"sobreescribir":38,"TIPO_DECLARACION":39,"LISTA_PARAMETROS":40,"CUERPO_FUNCION":41,"vacio":42,"principal":43,"PARAMETROS":44,"PARAMETRO":45,"puntero":46,"COL_ARREGLO":47,"coma":48,"SENTENCIAS":49,"SENTENCIA":50,"CONCATENAR":51,"IMPRIMIR":52,"ROMPER":53,"RETORNO":54,"CONTINUAR":55,"SI":56,"SWITCH":57,"REPETIR_MIENTRAS":58,"HACER_MIENTRAS":59,"CICLO_X":60,"REPETIR":61,"REPETIR_CONTANDO":62,"ENCICLAR":63,"CONTADOR":64,"LEER_TECLADO":65,"ACCESO":66,"ASIGNACION":67,"DESTRUIR_PUNTERO":68,"Lista":69,"igual":70,"nuevo":71,"Pila":72,"Cola":73,"EXPRESION":74,"INSTANCIA":75,"SIMB_IGUAL":76,"masMas":77,"menosMenos":78,"este":79,"punto":80,"VALOR_PUNTERO":81,"CREAR_PUNTERO":82,"PARAMETROS_LLAMADA":83,"masIgual":84,"menosIgual":85,"porIgual":86,"divIgual":87,"SI_FALSO":88,"Es_falso":89,"SI_VERDADERO":90,"Es_verdadero":91,"Si":92,"CASO":93,"Es_igual_a":94,"dosPuntos":95,"DEFECTO":96,"defecto":97,"LISTA_CASOS":98,"Evaluar_si":99,"Repetir_Mientras":100,"hacer":101,"mientras":102,"Ciclo_doble_condicion":103,"Repetir":104,"hasta_que":105,"Repetir_contando":106,"variable":107,"desde":108,"hasta":109,"Enciclar":110,"Contador":111,"Leer_Teclado":112,"abreCor":113,"cierraCor":114,"concatenar":115,"imprimir":116,"retorno":117,"romper":118,"continuar":119,"estructura":120,"LISTA_DECLARACIONES":121,"t_entero":122,"t_caracter":123,"t_decimal":124,"t_booleano":125,"LOGICA":126,"or":127,"XOR":128,"xor":129,"AND":130,"and":131,"NOT":132,"not":133,"REL":134,"ARITMETICA":135,"SIMB_REL":136,"menor":137,"mayor":138,"menorIgual":139,"mayorIgual":140,"distintoA":141,"igualIgual":142,"mas":143,"MUL":144,"menos":145,"por":146,"POT":147,"division":148,"UNARIO":149,"potencia":150,"NEG":151,"VALOR":152,"entero":153,"decimal":154,"caracter":155,"booleano":156,"nulo":157,"CONVERTIR_CADENA":158,"CONVERTIR_ENTERO":159,"ESTE":160,"CUERPO_ARREGLO":161,"OBTENER_DIRECCION":162,"RESERVAR_MEMORIA":163,"OBTENER_TAMANIO":164,"ATRI":165,"ATRI_":166,"insertar":167,"Apilar":168,"Desapilar":169,"cierrPar":170,"Encolar":171,"Desencolar":172,"obtener":173,"buscar":174,"tamanio":175,"LISTA_EXPRESIONES":176,"LISTA_CUERPO_ARREGLO":177,"ELEMENTO_FILA":178,"CONVERTIR_A_CADENA":179,"convertirACadena":180,"CONVERTIR_A_ENTERO":181,"convertirAEntero":182,"crearPuntero":183,"obtenerDireccion":184,"reservarMemoria":185,"consultarTamanio":186,"flecha":187,"COMPLE_PUNTERO":188,"destruirPuntero":189,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"importar",10:"abrePar",11:"cadena",12:"cierraPar",13:"puntoComa",14:"clase",15:"id",17:"hereda_de",18:"abreLlave",20:"cierraLlave",27:"publico",28:"protegido",29:"privado",35:"VISIBLIDAD",37:"arroba",38:"sobreescribir",42:"vacio",43:"principal",46:"puntero",48:"coma",69:"Lista",70:"igual",71:"nuevo",72:"Pila",73:"Cola",77:"masMas",78:"menosMenos",79:"este",80:"punto",84:"masIgual",85:"menosIgual",86:"porIgual",87:"divIgual",89:"Es_falso",91:"Es_verdadero",92:"Si",94:"Es_igual_a",95:"dosPuntos",97:"defecto",99:"Evaluar_si",100:"Repetir_Mientras",101:"hacer",102:"mientras",103:"Ciclo_doble_condicion",104:"Repetir",105:"hasta_que",106:"Repetir_contando",107:"variable",108:"desde",109:"hasta",110:"Enciclar",111:"Contador",112:"Leer_Teclado",113:"abreCor",114:"cierraCor",115:"concatenar",116:"imprimir",117:"retorno",118:"romper",119:"continuar",120:"estructura",122:"t_entero",123:"t_caracter",124:"t_decimal",125:"t_booleano",127:"or",129:"xor",131:"and",133:"not",137:"menor",138:"mayor",139:"menorIgual",140:"mayorIgual",141:"distintoA",142:"igualIgual",143:"mas",145:"menos",146:"por",148:"division",150:"potencia",153:"entero",154:"decimal",155:"caracter",156:"booleano",157:"nulo",158:"CONVERTIR_CADENA",159:"CONVERTIR_ENTERO",167:"insertar",168:"Apilar",169:"Desapilar",170:"cierrPar",171:"Encolar",172:"Desencolar",173:"obtener",174:"buscar",175:"tamanio",180:"convertirACadena",182:"convertirAEntero",183:"crearPuntero",184:"obtenerDireccion",185:"reservarMemoria",186:"consultarTamanio",187:"flecha",189:"destruirPuntero"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[7,5],[8,3],[8,5],[16,3],[16,2],[19,1],[19,2],[21,1],[21,1],[21,1],[21,1],[26,1],[26,1],[26,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,2],[22,2],[22,1],[24,3],[23,5],[23,5],[23,4],[23,4],[23,4],[23,3],[25,4],[40,3],[40,2],[45,2],[45,3],[45,3],[45,4],[44,1],[44,3],[41,3],[41,2],[49,1],[49,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[50,2],[50,2],[31,9],[32,9],[33,9],[30,5],[30,3],[30,4],[30,6],[30,5],[67,3],[67,3],[67,3],[67,3],[67,2],[67,2],[67,2],[67,2],[67,4],[67,5],[67,5],[67,5],[67,5],[67,4],[67,4],[67,4],[67,4],[67,6],[67,3],[36,3],[36,1],[75,3],[76,1],[76,1],[76,1],[76,1],[76,1],[88,2],[90,2],[56,6],[56,8],[56,7],[56,7],[56,8],[93,4],[96,3],[98,1],[98,2],[57,8],[57,7],[57,7],[57,6],[58,5],[59,7],[60,7],[61,7],[62,15],[63,3],[64,5],[65,7],[47,3],[47,4],[51,9],[51,7],[52,5],[54,3],[54,2],[53,2],[55,2],[34,6],[121,1],[121,2],[39,1],[39,1],[39,1],[39,1],[39,1],[74,1],[126,3],[126,1],[128,3],[128,1],[130,3],[130,1],[132,2],[132,1],[134,3],[134,1],[136,1],[136,1],[136,1],[136,1],[136,1],[136,1],[135,3],[135,3],[135,1],[144,3],[144,3],[144,1],[147,3],[147,1],[149,2],[149,2],[149,1],[151,2],[151,1],[152,1],[152,1],[152,1],[152,1],[152,3],[152,1],[152,1],[152,1],[152,1],[152,1],[152,2],[152,2],[152,1],[152,1],[152,1],[152,1],[152,1],[152,1],[152,1],[66,3],[66,4],[66,4],[160,3],[160,3],[160,4],[160,4],[166,1],[166,2],[166,2],[166,4],[166,4],[166,3],[166,4],[166,3],[166,4],[166,4],[166,1],[165,1],[165,3],[176,1],[176,3],[83,2],[83,3],[161,3],[177,1],[177,3],[178,3],[179,5],[181,5],[82,6],[162,4],[163,4],[164,4],[81,3],[188,1],[188,3],[68,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 3: case 51:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 4: case 5: case 13: case 14: case 15: case 16: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 150: case 151: case 153: case 155: case 157: case 159: case 161: case 170: case 173: case 175: case 178: case 180: case 189: case 193: case 194: case 195: case 196: case 197: case 198: case 199:
this.$=$$[$0];
break;
case 6:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 7:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 8:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 9: case 48: case 227:
this.$= $$[$0-1];
break;
case 10: case 41:
this.$=[];
break;
case 11:

			
			this.$=[];
			this.$.push($$[$0]);
				/*for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
			
		
break;
case 12:

			this.$=$$[$0-1];
			this.$.push($$[$0]);
			

		/*	for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
		
break;
case 17:
this.$="publico";
break;
case 18:
this.$="protegido";
break;
case 19:
this.$="privado";
break;
case 20: case 26: case 27: case 28: case 29: case 30:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 21: case 22: case 23: case 24: case 25: case 31:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 32:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 33:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 34:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 37:

			var a = new Funcion();
			a.setValores($$[$0-3],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			a.cambiarAConstructor();
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 38:

			var a = new Funcion();
			a.cambiarAConstructor();
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 39:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 40: case 72: case 73: case 74: case 75: case 224:
this.$=$$[$0-1];
break;
case 42:

			var a = new Parametro();
			a.setValores($$[$0-1],1,$$[$0]);
			this.$=a;
		
break;
case 43:

			var a = new Parametro();
			a.setValores($$[$0-2],2,$$[$0]);
			this.$=a;
		
break;
case 44:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 45:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 46: case 50: case 235:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 47: case 236:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 49: case 222:
this.$= [];
break;
case 76:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 77:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 78:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 79:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 80:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 81:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 82:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var idA= new t_id();
		idA.setValorId($$[$0-4]);
		var asigna = new AsignacionArreglo(); asigna.setValores(idA,$$[$0-3],$$[$0-2],$$[$0-1],7);	 //setValores = function(elemento,dimensiones,igual,valor,tipo)
		console.dir(asigna);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 83:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],4);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,a,3);
		this.$= asigDec;
	
break;
case 84:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 85:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 86:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 87:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 88:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",5); this.$=a; 
break;
case 89:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",5); this.$=a; 
break;
case 90:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 91:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 92:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 93:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 94:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 95:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 96:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 97:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 98:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 99:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 100:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 101:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 102:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 103:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 104:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 105: case 111: case 112:
this.$= $$[$0];
break;
case 106:
this.$="=";
break;
case 107:
this.$="=+";
break;
case 108:
this.$="=-";
break;
case 109:
this.$="=*";
break;
case 110:
this.$="=/";
break;
case 113:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 114:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 115:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 116:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 117:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 118:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 119:
this.$= $$[$0]
break;
case 120:

			
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 121:

			
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 122:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 123:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 124:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 125:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 126:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
	
break;
case 127:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 128:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 129:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 130:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 131:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 132:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 133:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 134:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 135:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 136:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 137:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 138:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 139:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 140:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 141:
 this.$ = new Romper();
break;
case 142:
this.$ = new Continuar();
break;
case 143:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 144:
var a = []; a.push($$[$0]); this.$= a;
break;
case 145:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 146:
this.$="entero";
break;
case 147:
this.$="caracter";
break;
case 148:
this.$="decimal";
break;
case 149:
this.$="booleano";
break;
case 152:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 154:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 156:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 158:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 160:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 162:
this.$="<";
break;
case 163:
this.$=">";
break;
case 164:
this.$="<=";
break;
case 165:
this.$=">=";
break;
case 166:
this.$="!=";
break;
case 167:
this.$="==";
break;
case 168:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 169:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 171:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 172:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 174:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 176:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 177:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 179:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 181:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 182:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 183:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 184:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 185:
 this.$=$$[$0-2];
break;
case 186:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 187:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 188:
this.$=S1;
break;
case 190:
 var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 191:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 192:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i;
break;
case 200:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 201:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 202:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 203:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 204:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 205:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 206:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 207:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 208:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 209:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 210: case 211: case 213: case 215: case 216:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 212: case 214:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], $$[$0]);
			this.$=a;
		
break;
case 217:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 218:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 219:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 220:
 var arreglo = []; var g= arreglo.push($$[$0]); console.log("size "+ g); this.$= arreglo;
break;
case 221:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]); console.log("size "+ g);; this.$= arreglo;
break;
case 223:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 225:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 226:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 228:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 229:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
case 230:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 231:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 232:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 233:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 234:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 237:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1},{1:[3]},{5:[1,8],6:9,7:4,8:5,9:$V0,14:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,10]},{15:[1,11]},{1:[2,1]},o($V2,[2,3]),{11:[1,12]},{16:13,17:[1,14],18:$V3},{12:[1,16]},o($V2,[2,7]),{15:[1,17]},{15:$V4,19:18,20:[1,19],21:20,22:21,23:22,24:23,25:24,26:25,27:$V5,28:$V6,29:$V7,30:26,31:27,32:28,33:29,34:30,35:$V8,36:32,37:$V9,39:33,42:$Va,43:$Vb,69:$Vc,72:$Vd,73:$Ve,82:45,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk},{13:[1,51]},{16:52,18:$V3},{15:$V4,20:[1,53],21:54,22:21,23:22,24:23,25:24,26:25,27:$V5,28:$V6,29:$V7,30:26,31:27,32:28,33:29,34:30,35:$V8,36:32,37:$V9,39:33,42:$Va,43:$Vb,69:$Vc,72:$Vd,73:$Ve,82:45,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk},o($V2,[2,10]),o($Vl,[2,11]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),{15:$Vm,30:55,31:56,32:58,33:57,36:59,39:60,42:$Vn,69:$Vc,72:$Vd,73:$Ve,82:45,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk},o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),{34:63,120:$Vf},o($Vl,[2,31]),{15:[1,64]},{15:[1,65]},{10:$Vo,15:$Vp,40:66},{38:[1,68]},{10:[1,69]},o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),{15:[1,70]},{15:[1,71]},{15:[1,72]},{15:[1,73]},o($Vr,[2,104],{70:[1,74]}),o($Vs,[2,146]),o($Vs,[2,147]),o($Vs,[2,148]),o($Vs,[2,149]),{10:[1,75]},o($V2,[2,6]),o($V2,[2,8]),o($V2,[2,9]),o($Vl,[2,12]),o($Vl,[2,20]),o($Vl,[2,26]),o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,30]),{15:[1,76]},{15:[1,77]},{10:$Vo,15:$Vp,40:78},o($Vl,[2,29]),{10:$Vo,13:$Vt,40:79,47:82,70:$Vu,113:$Vv},{10:$Vo,40:84},{18:$Vw,41:85},{12:[1,88],15:$Vx,39:90,44:87,45:89,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{15:$V4,23:92,26:93,27:$V5,28:$V6,29:$V7,39:94,42:$Va,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{12:[1,95]},{70:[1,96]},{70:[1,97]},{70:[1,98]},{113:[1,99]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:100,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{15:$Vx,39:136,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{10:$Vo,13:$Vt,40:137,47:82,70:$Vu,113:$Vv},{10:$Vo,40:138},{18:$Vw,41:139},{18:$Vw,41:140},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,71:$VP,74:141,75:142,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VQ,[2,80]),{13:[1,144],70:[1,145],113:$VR},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:147,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{18:$Vw,41:148},o($Vl,[2,38]),{15:$VS,20:[1,150],30:152,31:159,32:160,33:161,34:158,36:175,39:176,49:149,50:151,51:153,52:154,53:155,54:156,55:157,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,69:$Vc,72:$Vd,73:$Ve,79:$VT,81:194,82:45,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71},{12:[1,196],48:[1,197]},{18:[2,41]},o($V81,[2,46]),{15:[1,198],46:[1,199]},o($Vs,$Vp),o($Vl,[2,32]),{15:$Vm,39:200,42:$Vn,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{15:[1,201]},{18:$Vw,41:202},{71:[1,203]},{71:[1,204]},{71:[1,205]},{15:$Vx,30:207,39:176,121:206,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vr,[2,103]),o([12,13,15,20,27,28,29,35,37,42,43,48,69,72,73,95,114,120,122,123,124,125,183],[2,151],{127:[1,208]}),o($V91,[2,153],{129:$Va1}),o($Vb1,[2,155],{131:$Vc1}),o($Vd1,[2,157]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,134:211,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vd1,[2,159]),o($Vd1,[2,161],{136:212,137:[1,215],138:[1,216],139:[1,217],140:[1,218],141:[1,219],142:[1,220],143:$Ve1,145:$Vf1}),o($Vg1,[2,170],{146:$Vh1,148:$Vi1}),o($Vj1,[2,173]),o($Vj1,[2,175],{150:[1,223]}),o($Vk1,[2,178],{77:[1,224],78:[1,225]}),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,152:226,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vl1,[2,180]),o($Vl1,[2,181]),o($Vl1,[2,182]),o($Vl1,[2,183]),o($Vl1,[2,184]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:227,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vl1,[2,186]),o($Vl1,[2,187]),o($Vl1,[2,188]),o($Vl1,[2,189]),o($Vl1,[2,190],{47:228,83:229,10:$Vm1,80:$Vn1,113:$Vv,187:$Vo1}),o($Vl1,[2,193]),o($Vl1,[2,194]),o($Vl1,[2,195]),o($Vl1,[2,196]),o($Vl1,[2,197]),o($Vl1,[2,198]),o($Vl1,[2,199]),{80:[1,233]},{18:$Vp1,177:234,178:235},{10:[1,237]},{10:[1,238]},{10:[1,239]},{48:[1,240]},{18:$Vw,41:241},{18:$Vw,41:242},o($Vl,[2,37]),o($Vl,[2,35]),{13:[1,243]},{13:[1,244]},{15:[1,245]},o($VQ,[2,81]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:246,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:247,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{114:[1,248]},o($Vl,[2,36]),{15:$VS,20:[1,249],30:152,31:159,32:160,33:161,34:158,36:175,39:176,50:250,51:153,52:154,53:155,54:156,55:157,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,69:$Vc,72:$Vd,73:$Ve,79:$VT,81:194,82:45,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71},o($Vq1,[2,49]),o($Vr1,[2,50]),o($Vr1,[2,52]),o($Vr1,[2,53]),o($Vr1,[2,54]),o($Vr1,[2,55]),o($Vr1,[2,56]),o($Vr1,[2,57]),o($Vr1,[2,58]),o($Vr1,[2,59]),o($Vr1,[2,60]),o($Vr1,[2,61]),o($Vr1,[2,62]),o($Vr1,[2,63]),o($Vr1,[2,64]),o($Vr1,[2,65]),o($Vr1,[2,66]),o($Vr1,[2,67]),o($Vr1,[2,68]),o($Vr1,[2,69]),o($Vr1,[2,70]),o($Vr1,[2,71]),{13:[1,251],70:[1,253],76:252,77:[1,254],78:[1,255],84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1},{13:[1,260]},{13:[1,261]},{13:[1,262]},{15:[1,263]},{10:[1,264]},{10:[1,265]},{13:[1,266]},{10:$Vy,11:$Vz,13:[1,268],15:$VA,18:$VB,66:124,74:267,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{13:[1,269]},{10:[1,270]},{10:[1,271]},{10:[1,272]},{18:$Vw,41:273},{10:[1,274]},{18:$Vw,41:275},{10:[1,276]},{15:[1,277]},{10:[1,278]},{10:[1,279]},{10:$Vm1,15:$Vp,47:280,70:[1,283],76:282,77:[1,284],78:[1,285],80:$Vn1,83:281,84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1,113:$Vv,187:$Vo1},{80:[1,286]},{70:[1,287]},{10:[1,288]},{18:[2,40]},{15:$Vx,39:90,45:289,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($V81,[2,42],{47:290,113:$Vv}),{15:[1,291]},{15:[1,292]},{10:$Vo,40:79},o($Vl,[2,39]),{69:[1,293]},{72:[1,294]},{73:[1,295]},{15:$Vx,30:297,39:176,114:[1,296],122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($Vw1,[2,144]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,128:298,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,130:299,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,132:300,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vd1,[2,158]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,135:301,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,144:302,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,144:303,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vx1,[2,162]),o($Vx1,[2,163]),o($Vx1,[2,164]),o($Vx1,[2,165]),o($Vx1,[2,166]),o($Vx1,[2,167]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,145:$VE,147:304,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,145:$VE,147:305,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,79:$VC,81:130,145:$VE,147:306,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vk1,[2,176]),o($Vk1,[2,177]),o($Vl1,[2,179]),{12:[1,307]},o($Vl1,[2,191],{80:$Vy1,113:$VR}),o($Vl1,[2,192],{80:$Vz1}),{15:$VA1,165:310,166:311,167:$VB1,168:$VC1,169:$VD1,171:$VE1,172:$VF1,173:$VG1,174:$VH1,175:$VI1},{15:[1,322],188:321},{10:$Vy,11:$Vz,12:[1,323],15:$VA,18:$VB,66:124,74:325,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,176:324,184:$VM,185:$VN,186:$VO},{15:[1,327],66:326},{20:[1,328],48:[1,329]},o($VJ1,[2,225]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:325,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,176:330,184:$VM,185:$VN,186:$VO},{15:[1,331]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:332,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:333,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{15:[1,334]},o($Vl,[2,33]),o($Vl,[2,34]),o($VQ,[2,79]),o($VQ,[2,83]),{10:$Vm1,83:335},{13:[1,336]},{114:[1,337]},o($VK1,[2,134]),o($Vq1,[2,48]),o($Vr1,[2,51]),o($Vr1,[2,72]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:338,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VL1,$VM1,{75:339,71:$VP}),{13:[2,90]},{13:[2,91]},o($VL1,[2,107]),o($VL1,[2,108]),o($VL1,[2,109]),o($VL1,[2,110]),o($Vr1,[2,73]),o($Vr1,[2,74]),o($Vr1,[2,75]),{13:$Vt,47:82,70:$Vu,113:$Vv},{15:[1,340]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:341,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vr1,[2,141]),{13:[1,342]},o($Vr1,[2,140]),o($Vr1,[2,142]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:343,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:344,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:345,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{102:[1,346]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:347,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{105:[1,348]},{107:[1,349]},{18:$Vw,41:350},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:351,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:352,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{70:$VN1,76:353,80:$Vy1,84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1,113:$VR},{80:$Vz1},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:355,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VL1,$VM1,{75:356,71:$VP}),{13:[2,88]},{13:[2,89]},{15:[1,357],66:358},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:359,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{15:[1,360]},o($V81,[2,47]),o($V81,[2,44],{113:$VR}),o($V81,[2,43],{47:361,113:$Vv}),{10:$Vo,40:137},{10:[1,362]},{10:[1,363]},{10:[1,364]},{13:[1,365]},o($Vw1,[2,145]),o($V91,[2,152],{129:$Va1}),o($Vb1,[2,154],{131:$Vc1}),o($Vd1,[2,156]),o($Vd1,[2,160],{143:$Ve1,145:$Vf1}),o($Vg1,[2,168],{146:$Vh1,148:$Vi1}),o($Vg1,[2,169],{146:$Vh1,148:$Vi1}),o($Vj1,[2,171]),o($Vj1,[2,172]),o($Vj1,[2,174]),o($Vl1,[2,185]),{15:$VA1,165:366,166:311,167:$VB1,168:$VC1,169:$VD1,171:$VE1,172:$VF1,173:$VG1,174:$VH1,175:$VI1},{15:$VA1,165:367,166:311,167:$VB1,168:$VC1,169:$VD1,171:$VE1,172:$VF1,173:$VG1,174:$VH1,175:$VI1},o($VO1,[2,200],{80:$VP1}),o($VQ1,[2,218]),o($VQ1,[2,207],{47:369,83:370,10:$Vm1,113:$Vv}),{10:[1,371]},{10:[1,372]},{10:[1,373]},{10:[1,374]},{10:[1,375]},{10:[1,376]},{10:[1,377]},o($VQ1,[2,217]),o([12,13,15,20,27,28,29,35,37,42,43,48,69,70,72,73,77,78,95,114,120,122,123,124,125,127,129,131,137,138,139,140,141,142,143,145,146,148,150,183],[2,234],{187:[1,378]}),o($VR1,[2,235]),o($VQ1,[2,222]),{12:[1,379],48:$VS1},o($VT1,[2,220]),o($Vl1,[2,203]),o($Vl1,[2,204],{47:381,83:382,10:$Vm1,80:$Vn1,113:$Vv}),o($Vl1,[2,224]),{18:$Vp1,178:383},{20:[1,384],48:$VS1},{12:[1,385]},{12:[1,386]},{12:[1,387]},{12:[1,388]},{13:[2,105]},o($VQ,[2,82]),o($VK1,[2,135]),{13:[2,86]},{13:[2,87]},{48:[1,389]},{12:[1,390]},o($Vr1,[2,139]),{12:[1,391]},{12:[1,392]},{12:[1,393]},{10:[1,394]},{48:[1,395]},{10:[1,396]},{95:[1,397]},o($Vr1,[2,131]),{12:[1,398]},{48:[1,399]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:400,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VL1,$VM1),{13:[2,84]},{13:[2,85]},{10:$Vm1,47:405,70:[1,402],76:401,77:[1,403],78:[1,404],80:$Vn1,83:281,84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1,113:$Vv},{70:[1,407],76:406,77:[1,408],78:[1,409],84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1},{13:[2,102]},{12:[1,410]},o($V81,[2,45],{113:$VR}),{15:$Vx,39:411,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{15:$Vx,39:412,122:$Vg,123:$Vh,124:$Vi,125:$Vj},{15:$Vx,39:413,122:$Vg,123:$Vh,124:$Vi,125:$Vj},o($VU1,[2,143]),o($VO1,[2,201],{80:$VP1}),o($VO1,[2,202],{80:$VP1}),{15:$VA1,166:414,167:$VB1,168:$VC1,169:$VD1,171:$VE1,172:$VF1,173:$VG1,174:$VH1,175:$VI1},o($VQ1,[2,208],{113:$VR}),o($VQ1,[2,209]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:415,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:416,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{170:[1,417]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:418,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{12:[1,419]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:420,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:421,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{15:[1,422]},o($VQ1,[2,223]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:423,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vl1,[2,205],{80:$Vy1,113:$VR}),o($Vl1,[2,206],{80:$Vz1}),o($VJ1,[2,226]),o($VJ1,[2,227]),o($Vl1,[2,231]),o($Vl1,[2,232]),o($Vl1,[2,233]),o([13,15,20,27,28,29,35,37,42,43,69,70,72,73,120,122,123,124,125,183],[2,230]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:424,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{13:[1,425]},{18:[1,426]},{18:[1,427]},{18:$Vw,41:428},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:429,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:430,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:431,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{15:[1,432]},{18:$Vw,41:433},{15:[1,434]},{13:[2,92]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:435,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VL1,$VM1,{75:436,71:$VP}),{13:[2,97]},{13:[2,98]},{70:$VN1,76:437,80:$Vy1,84:$Vs1,85:$Vt1,86:$Vu1,87:$Vv1,113:$VR},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:438,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($VL1,$VM1,{75:439,71:$VP}),{13:[2,99]},{13:[2,100]},{13:[2,237]},{12:[1,440]},{12:[1,441]},{12:[1,442]},o($VQ1,[2,219]),{12:[1,443]},{12:[1,444]},o($VQ1,[2,212]),{12:[1,445]},o($VQ1,[2,214]),{12:[1,446]},{12:[1,447]},o($VR1,[2,236]),o($VT1,[2,221]),{12:[1,449],48:[1,448]},o($Vr1,[2,138]),{20:[1,450],88:452,89:$VV1,90:451,91:$VW1},{20:[1,457],93:458,94:$VX1,96:456,97:$VY1,98:455},o($Vr1,[2,126]),{12:[1,461]},{12:[1,462]},{12:[1,463]},{13:[1,464]},o($Vr1,[2,132]),{12:[1,465]},{13:[2,93]},{13:[2,94]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:466,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{13:[2,95]},{13:[2,96]},{13:[1,467]},{13:[1,468]},{13:[1,469]},o($VQ1,[2,210]),o($VQ1,[2,211]),o($VQ1,[2,213]),o($VQ1,[2,215]),o($VQ1,[2,216]),{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:470,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{13:[1,471]},o($Vr1,[2,113]),{20:[1,473],88:472,89:$VV1},{20:[1,474],90:475,91:$VW1},{18:$Vw,41:476},{18:$Vw,41:477},{20:[1,479],93:480,94:$VX1,96:478,97:$VY1},{20:[1,481]},o($Vr1,[2,125]),o($VZ1,[2,120]),{95:[1,482]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:483,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{13:[1,484]},{18:$Vw,41:485},{13:[1,486]},{108:[1,487]},{13:[1,488]},{13:[2,101]},o($VU1,[2,76]),o($VU1,[2,77]),o($VU1,[2,78]),{12:[1,489]},o($Vr1,[2,137]),{20:[1,490]},o($Vr1,[2,115]),o($Vr1,[2,116]),{20:[1,491]},o([20,89],[2,112]),o([20,91],[2,111]),{20:[1,492]},o($Vr1,[2,123]),o($VZ1,[2,121]),o($Vr1,[2,124]),{15:$VS,30:152,31:159,32:160,33:161,34:158,36:175,39:176,49:493,50:151,51:153,52:154,53:155,54:156,55:157,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,69:$Vc,72:$Vd,73:$Ve,79:$VT,81:194,82:45,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71},{95:[1,494]},o($Vr1,[2,127]),o($Vr1,[2,128]),o($Vr1,[2,129]),{95:[1,495]},o($Vr1,[2,133]),{13:[1,496]},o($Vr1,[2,114]),o($Vr1,[2,117]),o($Vr1,[2,122]),{15:$VS,20:[2,119],30:152,31:159,32:160,33:161,34:158,36:175,39:176,50:250,51:153,52:154,53:155,54:156,55:157,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,69:$Vc,72:$Vd,73:$Ve,79:$VT,81:194,82:45,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71},{15:$VS,30:152,31:159,32:160,33:161,34:158,36:175,39:176,49:497,50:151,51:153,52:154,53:155,54:156,55:157,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,69:$Vc,72:$Vd,73:$Ve,79:$VT,81:194,82:45,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:498,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},o($Vr1,[2,136]),o($VZ1,[2,118],{82:45,30:152,51:153,52:154,53:155,54:156,55:157,34:158,31:159,32:160,33:161,56:162,57:163,58:164,59:165,60:166,61:167,62:168,63:169,64:170,65:171,66:172,67:173,68:174,36:175,39:176,81:194,50:250,15:$VS,69:$Vc,72:$Vd,73:$Ve,79:$VT,92:$VU,99:$VV,100:$VW,101:$VX,103:$VY,104:$VZ,106:$V_,110:$V$,111:$V01,112:$V11,115:$V21,116:$V31,117:$V41,118:$V51,119:$V61,120:$Vf,122:$Vg,123:$Vh,124:$Vi,125:$Vj,183:$Vk,189:$V71}),{13:[1,499]},{109:[1,500]},{95:[1,501]},{10:$Vy,11:$Vz,15:$VA,18:$VB,66:124,74:502,79:$VC,81:130,126:101,128:102,130:103,132:104,133:$VD,134:106,135:107,144:108,145:$VE,147:109,149:110,151:111,152:113,153:$VF,154:$VG,155:$VH,156:$VI,157:$VJ,158:$VK,159:$VL,160:125,161:126,162:127,163:128,164:129,184:$VM,185:$VN,186:$VO},{12:[1,503]},{18:$Vw,41:504},o($Vr1,[2,130])],
defaultActions: {8:[2,1],88:[2,41],196:[2,40],254:[2,90],255:[2,91],284:[2,88],285:[2,89],335:[2,105],338:[2,86],339:[2,87],355:[2,84],356:[2,85],359:[2,102],400:[2,92],403:[2,97],404:[2,98],408:[2,99],409:[2,100],410:[2,237],435:[2,93],436:[2,94],438:[2,95],439:[2,96],466:[2,101]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	var listaPrueba =[];
	var Clase = require("./Arbol/Clase");
	var arreglin = require("./Arbol/arreglo");
    var Atributo = require("./Arbol/Atributo");
    var Archivo = require("./Arbol/Archivo");
    
    var  Acceso = require("./Arbol/Expresion/Acceso");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica");
    var Booleano = require("./Arbol/Expresion/Booleano");
    var Cadena = require("./Arbol/Expresion/Cadena");
    var Caracter = require("./Arbol/Expresion/Caracter");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero");
    var Decimal = require("./Arbol/Expresion/Decimal");
    var Entero = require("./Arbol/Expresion/Entero");
    var Este = require("./Arbol/Expresion/Este");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa");
    var Instancia = require("./Arbol/Expresion/Instancia");
    var  Llamada = require("./Arbol/Expresion/Llamada");
    var  Logica = require("./Arbol/Expresion/Logica");
    var  Negativo = require("./Arbol/Expresion/Negativo");
    var  Not_logica= require("./Arbol/Expresion/Not_logica");
    var  Nulo= require("./Arbol/Expresion/Nulo");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo");
    var  Relacional= require("./Arbol/Expresion/Relacional");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria");
    var  t_id= require("./Arbol/Expresion/t_id");
    var  Unario= require("./Arbol/Expresion/Unario");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero");


    var  Constructor = require("./Arbol/Funciones/Constructor");
    var  Funcion = require("./Arbol/Funciones/Funcion");
    var  Parametro = require("./Arbol/Funciones/Parametro");
    var  Principal = require("./Arbol/Funciones/Principal");

    var Asignacion = require("./Arbol/Sentencias/Asignacion");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla");
    var  Caso= require("./Arbol/Sentencias/Caso");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X");
    var Concatenar = require("./Arbol/Sentencias/Concatenar");
    var  Contador= require("./Arbol/Sentencias/Contador");
    var Continuar = require("./Arbol/Sentencias/Continuar");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar");
    var  Estructura= require("./Arbol/Sentencias/Estructura");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras");
    var  Importar= require("./Arbol/Sentencias/Importar");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir");
    var  Leer_Teclado= require("./Arbol/Sentencias/LeerTeclado");
    var  Puntero= require("./Arbol/Sentencias/Puntero");
    var  Repetir= require("./Arbol/Sentencias/Repetir");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras");
    var  Retorno= require("./Arbol/Sentencias/Retorno");
    var  Romper= require("./Arbol/Sentencias/Romper");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona");
    var  Si= require("./Arbol/Sentencias/Si");
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip whitespace */
break;
case 2:/ *skip whitespace */
break;
case 3:return 183
break;
case 4:return 184
break;
case 5:return 185
break;
case 6:return 186
break;
case 7:return 187
break;
case 8:return 189
break;
case 9:return 175
break;
case 10:return 100
break;
case 11:return 101
break;
case 12:return 102
break;
case 13:return 103
break;
case 14:return 104
break;
case 15:return 105
break;
case 16:return 106
break;
case 17:return 107
break;
case 18:return 108
break;
case 19:return 109
break;
case 20:return 110
break;
case 21:return 111
break;
case 22:return 112
break;
case 23:return 99
break;
case 24:return 94
break;
case 25:return 97
break;
case 26:return 89
break;
case 27:return 91
break;
case 28:return 92
break;
case 29:return 69
break;
case 30:return 72
break;
case 31:return 73
break;
case 32:return 167
break;
case 33:return 173
break;
case 34:return 174
break;
case 35:return 171
break;
case 36:return 172
break;
case 37:return 9
break;
case 38:return 37
break;
case 39:return 38
break;
case 40:return 115
break;
case 41:return 48
break;
case 42:return 182
break;
case 43:return 180
break;
case 44:return 116
break;
case 45:return 117
break;
case 46:return 118
break;
case 47:return 43
break;
case 48:return 71
break;
case 49:return 27
break;
case 50:return 28
break;
case 51:return 29
break;
case 52:return 119
break;
case 53:return 157
break;
case 54:return 157
break;
case 55:'nulo'
break;
case 56:return 137
break;
case 57:return 138
break;
case 58:return 139
break;
case 59:return 140
break;
case 60:return 142
break;
case 61:return 141
break;
case 62:return 17
break;
case 63:return 14
break;
case 64:return 79
break;
case 65:return 46
break;
case 66:return 42
break;
case 67:return 156
break;
case 68:return 156 
break;
case 69:return 120
break;
case 70:return 80
break;
case 71:return 122
break;
case 72:return 123
break;
case 73:return 125
break;
case 74:return 124
break;
case 75:return 84
break;
case 76:return 85
break;
case 77:return 86
break;
case 78:return 87
break;
case 79:return 70
break;
case 80:return 77
break;
case 81:return 78
break;
case 82:return 146
break;
case 83:return 148
break;
case 84:return 145
break;
case 85:return 143
break;
case 86:return 150
break;
case 87:return 10
break;
case 88:return 12
break;
case 89:return 18
break;
case 90:return 20
break;
case 91:return 113
break;
case 92:return 114
break;
case 93:return 127
break;
case 94:return 131
break;
case 95:return 129
break;
case 96:return 133
break;
case 97:return 13
break;
case 98:return 95
break;
case 99:return 11;
break;
case 100:return 15
break;
case 101:return 154
break;
case 102:return 153
break;
case 103:return 155
break;
case 104:return 5
break;
case 105:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\/\/].*)/i,/^(?:\/\*.\*\/)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}