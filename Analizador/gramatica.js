/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[5,41,46],$V4=[5,34],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[13,17,19,21,23,27,36],$Vc=[1,44],$Vd=[1,47],$Ve=[1,48],$Vf=[1,49],$Vg=[1,60],$Vh=[1,61],$Vi=[1,62],$Vj=[1,63],$Vk=[1,59],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,115],$Vq=[1,102],$Vr=[1,103],$Vs=[1,104],$Vt=[1,116],$Vu=[1,105],$Vv=[1,106],$Vw=[1,107],$Vx=[1,108],$Vy=[1,109],$Vz=[1,110],$VA=[1,111],$VB=[1,112],$VC=[1,113],$VD=[1,114],$VE=[1,96],$VF=[1,97],$VG=[1,99],$VH=[1,98],$VI=[1,100],$VJ=[1,101],$VK=[1,120],$VL=[1,118],$VM=[1,136],$VN=[1,139],$VO=[1,140],$VP=[8,9,10,15],$VQ=[1,150],$VR=[1,149],$VS=[2,179],$VT=[1,154],$VU=[8,70,98,101,102,150,151,152,153,208],$VV=[8,44,74,76],$VW=[8,15,98,101,102,108,120,122,125,127,128,129,131,132,134,138,139,140,143,144,145,146,147,148,150,151,152,153,208,214],$VX=[1,162],$VY=[1,163],$VZ=[1,164],$V_=[1,165],$V$=[1,198],$V01=[1,189],$V11=[1,190],$V21=[1,207],$V31=[1,193],$V41=[1,194],$V51=[1,206],$V61=[1,180],$V71=[1,187],$V81=[1,191],$V91=[1,192],$Va1=[1,195],$Vb1=[1,196],$Vc1=[1,197],$Vd1=[1,208],$Ve1=[1,209],$Vf1=[1,210],$Vg1=[1,220],$Vh1=[1,236],$Vi1=[1,227],$Vj1=[1,235],$Vk1=[1,234],$Vl1=[8,15,55,56,57,63,65,70,71,98,101,102,148,150,151,152,153,208],$Vm1=[1,267],$Vn1=[8,9,10,14,42,43,108,161,173,181,182,183,184,185,209,210,211],$Vo1=[2,135],$Vp1=[1,270],$Vq1=[1,272],$Vr1=[1,271],$Vs1=[15,44,45,76,123,142,155],$Vt1=[1,278],$Vu1=[15,44,45,76,123,142,155,157],$Vv1=[1,279],$Vw1=[15,44,45,76,123,142,155,157,159],$Vx1=[1,282],$Vy1=[1,283],$Vz1=[15,44,45,76,123,142,155,157,159,165,166,167,168,169,170,171,173],$VA1=[1,290],$VB1=[1,291],$VC1=[15,44,45,76,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176],$VD1=[15,44,45,76,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],$VE1=[15,44,45,76,106,107,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],$VF1=[1,302],$VG1=[1,324],$VH1=[1,325],$VI1=[1,326],$VJ1=[1,327],$VK1=[1,328],$VL1=[1,329],$VM1=[1,330],$VN1=[1,331],$VO1=[1,332],$VP1=[1,336],$VQ1=[1,333],$VR1=[1,335],$VS1=[1,337],$VT1=[44,76],$VU1=[8,15,55,56,57,63,65,70,71,98,101,102,108,120,122,125,127,128,129,131,132,134,138,139,140,142,143,144,145,146,147,148,150,151,152,153,208,214],$VV1=[8,9,10,14,42,43,108,173,181,182,183,184,185,209,210,211],$VW1=[15,76],$VX1=[8,15,55,56,57,63,65,70,71,98,101,102,108,117,119,120,122,125,127,128,129,130,131,132,133,134,138,139,140,143,144,145,146,147,148,150,151,152,153,208,214],$VY1=[15,44,45,76,99,106,107,112,113,114,115,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],$VZ1=[1,405],$V_1=[15,44,45,76,99,106,107,109,112,113,114,115,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],$V$1=[15,44,45,76,99,106,107,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178,212],$V02=[1,422],$V12=[15,44,76],$V22=[8,142,150,151,152,153],$V32=[15,44,45,76,99,106,107,109,112,113,114,115,123,141,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],$V42=[1,497],$V52=[1,496],$V62=[1,503],$V72=[1,502],$V82=[8,15,55,56,57,63,65,70,71,98,101,102,108,120,122,125,127,128,129,131,132,134,138,139,140,143,144,145,146,147,148,150,151,152,153,208,214],$V92=[15,122,125];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"LECCIONES":6,"VAL_TERM_TITULO":7,"id":8,"entero":9,"decimal":10,"TERM_TITULO":11,"TITULO":12,"titulo":13,"abreLlave":14,"cierraLlave":15,"DESCRIPCION":16,"descripcion":17,"TAREA":18,"tarea":19,"RESULTADO":20,"resultado":21,"TIPO_LECCION":22,"tipo":23,"abrellave":24,"tipoLeccion":25,"EJEMPLO":26,"ejemplo":27,"FUNCION":28,"EJEMPLO2":29,"SENTENCIAS":30,"gcoach":31,"acoach":32,"LECCION":33,"abreLeccion":34,"VALORES_LECCION":35,"cierraLeccion":36,"VALOR_LECCION":37,"SENT_ARCHIVO":38,"IMPORTAR":39,"CLASE":40,"importar":41,"abrePar":42,"cadena":43,"cierraPar":44,"puntoComa":45,"clase":46,"CUERPO_CLASE":47,"hereda_de":48,"SENTENCIAS_CLASE":49,"SENTENCIA_CLASE":50,"ATRIBUTO":51,"FUNCION_SOBRE":52,"PRINCIPAL":53,"VISIBILIDAD":54,"publico":55,"protegido":56,"privado":57,"DECLARACION":58,"DECLA_LISTA":59,"DECLA_PILA":60,"DECLA_COLA":61,"ESTRUCTURA":62,"VISIBLIDAD":63,"DECLA_PUNTERO":64,"arroba":65,"sobreescribir":66,"TIPO_DECLARACION":67,"LISTA_PARAMETROS":68,"CUERPO_FUNCION":69,"vacio":70,"principal":71,"PARAMETROS":72,"PARAMETRO":73,"puntero":74,"COL_ARREGLO":75,"coma":76,"SENTENCIA":77,"CONCATENAR":78,"IMPRIMIR":79,"ROMPER":80,"RETORNO":81,"CONTINUAR":82,"SI":83,"SWITCH":84,"REPETIR_MIENTRAS":85,"HACER_MIENTRAS":86,"CICLO_X":87,"REPETIR":88,"REPETIR_CONTANDO":89,"ENCICLAR":90,"CONTADOR":91,"LEER_TECLADO":92,"ACCESO":93,"ASIGNACION":94,"DESTRUIR_PUNTERO":95,"LLAMADA":96,"PARAMETROS_LLAMADA":97,"Lista":98,"igual":99,"nuevo":100,"Pila":101,"Cola":102,"EXPRESION":103,"INSTANCIA":104,"SIMB_IGUAL":105,"masMas":106,"menosMenos":107,"este":108,"punto":109,"VALOR_PUNTERO":110,"CREAR_PUNTERO":111,"masIgual":112,"menosIgual":113,"porIgual":114,"divIgual":115,"SI_FALSO":116,"Es_falso":117,"SI_VERDADERO":118,"Es_verdadero":119,"Si":120,"CASO":121,"Es_igual_a":122,"dosPuntos":123,"DEFECTO":124,"defecto":125,"LISTA_CASOS":126,"Evaluar_si":127,"Repetir_Mientras":128,"hacer":129,"mientras":130,"Ciclo_doble_condicion":131,"Repetir":132,"hasta_que":133,"Repetir_contando":134,"variable":135,"desde":136,"hasta":137,"Enciclar":138,"Contador":139,"Leer_Teclado":140,"abreCor":141,"cierraCor":142,"concatenar":143,"imprimir":144,"retorno":145,"romper":146,"continuar":147,"estructura":148,"LISTA_DECLARACIONES":149,"t_entero":150,"t_caracter":151,"t_decimal":152,"t_booleano":153,"LOGICA":154,"or":155,"XOR":156,"xor":157,"AND":158,"and":159,"NOT":160,"not":161,"REL":162,"ARITMETICA":163,"SIMB_REL":164,"menor":165,"mayor":166,"menorIgual":167,"mayorIgual":168,"distintoA":169,"igualIgual":170,"mas":171,"MUL":172,"menos":173,"por":174,"POT":175,"division":176,"UNARIO":177,"potencia":178,"NEG":179,"VALOR":180,"caracter":181,"booleano":182,"nulo":183,"CONVERTIR_CADENA":184,"CONVERTIR_ENTERO":185,"ESTE":186,"CUERPO_ARREGLO":187,"OBTENER_DIRECCION":188,"RESERVAR_MEMORIA":189,"OBTENER_TAMANIO":190,"ATRI":191,"ATRI_":192,"insertar":193,"Apilar":194,"Desapilar":195,"Encolar":196,"Desencolar":197,"obtener":198,"buscar":199,"tamanio":200,"LISTA_EXPRESIONES":201,"LISTA_CUERPO_ARREGLO":202,"ELEMENTO_FILA":203,"CONVERTIR_A_CADENA":204,"convertirACadena":205,"CONVERTIR_A_ENTERO":206,"convertirAEntero":207,"crearPuntero":208,"obtenerDireccion":209,"reservarMemoria":210,"consultarTamanio":211,"flecha":212,"COMPLE_PUNTERO":213,"destruirPuntero":214,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"id",9:"entero",10:"decimal",13:"titulo",14:"abreLlave",15:"cierraLlave",17:"descripcion",19:"tarea",21:"resultado",23:"tipo",24:"abrellave",27:"ejemplo",31:"gcoach",32:"acoach",34:"abreLeccion",36:"cierraLeccion",41:"importar",42:"abrePar",43:"cadena",44:"cierraPar",45:"puntoComa",46:"clase",48:"hereda_de",55:"publico",56:"protegido",57:"privado",63:"VISIBLIDAD",65:"arroba",66:"sobreescribir",70:"vacio",71:"principal",74:"puntero",76:"coma",98:"Lista",99:"igual",100:"nuevo",101:"Pila",102:"Cola",106:"masMas",107:"menosMenos",108:"este",109:"punto",112:"masIgual",113:"menosIgual",114:"porIgual",115:"divIgual",117:"Es_falso",119:"Es_verdadero",120:"Si",122:"Es_igual_a",123:"dosPuntos",125:"defecto",127:"Evaluar_si",128:"Repetir_Mientras",129:"hacer",130:"mientras",131:"Ciclo_doble_condicion",132:"Repetir",133:"hasta_que",134:"Repetir_contando",135:"variable",136:"desde",137:"hasta",138:"Enciclar",139:"Contador",140:"Leer_Teclado",141:"abreCor",142:"cierraCor",143:"concatenar",144:"imprimir",145:"retorno",146:"romper",147:"continuar",148:"estructura",150:"t_entero",151:"t_caracter",152:"t_decimal",153:"t_booleano",155:"or",157:"xor",159:"and",161:"not",165:"menor",166:"mayor",167:"menorIgual",168:"mayorIgual",169:"distintoA",170:"igualIgual",171:"mas",173:"menos",174:"por",176:"division",178:"potencia",181:"caracter",182:"booleano",183:"nulo",184:"CONVERTIR_CADENA",185:"CONVERTIR_ENTERO",193:"insertar",194:"Apilar",195:"Desapilar",196:"Encolar",197:"Desencolar",198:"obtener",199:"buscar",200:"tamanio",205:"convertirACadena",207:"convertirAEntero",208:"crearPuntero",209:"obtenerDireccion",210:"reservarMemoria",211:"consultarTamanio",212:"flecha",214:"destruirPuntero"},
productions_: [0,[3,2],[3,2],[7,1],[7,1],[7,1],[11,2],[11,1],[12,4],[16,4],[18,4],[20,4],[22,4],[26,4],[29,4],[25,1],[25,1],[6,1],[6,2],[33,3],[35,1],[35,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[4,1],[4,2],[38,1],[38,1],[39,5],[40,3],[40,5],[47,3],[47,2],[49,1],[49,2],[50,1],[50,1],[50,1],[50,1],[54,1],[54,1],[54,1],[51,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,2],[51,2],[51,2],[51,2],[51,3],[51,2],[52,3],[28,5],[28,5],[28,4],[28,4],[28,4],[28,3],[53,4],[68,3],[68,2],[73,2],[73,3],[73,3],[73,4],[72,1],[72,3],[69,3],[69,2],[30,1],[30,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,2],[77,2],[77,2],[77,2],[77,2],[96,2],[59,9],[60,9],[61,9],[58,5],[58,3],[58,4],[58,6],[58,5],[94,3],[94,3],[94,3],[94,3],[94,2],[94,2],[94,2],[94,2],[94,4],[94,5],[94,5],[94,5],[94,5],[94,4],[94,4],[94,4],[94,4],[94,6],[94,3],[64,3],[64,1],[104,3],[105,1],[105,1],[105,1],[105,1],[105,1],[116,2],[118,2],[83,6],[83,8],[83,7],[83,7],[83,8],[121,4],[124,3],[126,1],[126,2],[84,8],[84,7],[84,7],[84,6],[85,5],[86,7],[87,7],[88,7],[89,15],[90,3],[91,5],[92,7],[75,3],[75,4],[78,9],[78,7],[79,5],[81,3],[81,2],[80,2],[82,2],[62,6],[149,1],[149,2],[67,1],[67,1],[67,1],[67,1],[67,1],[103,1],[154,3],[154,1],[156,3],[156,1],[158,3],[158,1],[160,2],[160,1],[162,3],[162,1],[164,1],[164,1],[164,1],[164,1],[164,1],[164,1],[163,3],[163,3],[163,1],[172,3],[172,3],[172,1],[175,3],[175,1],[177,2],[177,2],[177,1],[179,2],[179,1],[180,1],[180,1],[180,1],[180,1],[180,3],[180,1],[180,1],[180,1],[180,1],[180,1],[180,2],[180,2],[180,1],[180,1],[180,1],[180,1],[180,1],[180,1],[180,1],[93,3],[93,4],[93,4],[186,3],[186,3],[186,4],[186,4],[192,1],[192,2],[192,2],[192,4],[192,4],[192,3],[192,4],[192,3],[192,4],[192,4],[192,1],[191,1],[191,3],[201,1],[201,3],[97,2],[97,3],[187,3],[202,1],[202,3],[203,3],[204,5],[206,5],[111,6],[188,4],[189,4],[190,4],[110,3],[213,1],[213,3],[95,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 29:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 30: case 78:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 31: case 32: case 40: case 41: case 42: case 43: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 179: case 180: case 182: case 184: case 186: case 188: case 190: case 199: case 202: case 204: case 207: case 209: case 218: case 222: case 223: case 224: case 225: case 226: case 227: case 228:
this.$=$$[$0];
break;
case 33:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 34:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36: case 75: case 256:
this.$= $$[$0-1];
break;
case 37: case 68:
this.$=[];
break;
case 38:

			
			this.$=[];
			this.$.push($$[$0]);
				/*for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
			
		
break;
case 39:

			this.$=$$[$0-1];
			this.$.push($$[$0]);
			

		/*	for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
		
break;
case 44:
this.$="publico";
break;
case 45:
this.$="protegido";
break;
case 46:
this.$="privado";
break;
case 47: case 53: case 54: case 55: case 56:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 48: case 49: case 50: case 51: case 52:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 57:

			var a = new Atributo();
			a.setValores($$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 58:

			var a = new Atributo();
			a.setValores("publico",$$[$0-1]);
			this.$=a;
		
break;
case 59:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 60:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 61:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 62:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 63:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 64:

			var a = new Funcion();
			a.setValores($$[$0-3],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			a.cambiarAConstructor();
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 65:

			var a = new Funcion();
			a.cambiarAConstructor();
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 66:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 67: case 99: case 100: case 101: case 102: case 103: case 253:
this.$=$$[$0-1];
break;
case 69:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-1],1,idA);
			this.$=a;
		
break;
case 70:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],2,idA);
			this.$=a;
		
break;
case 71:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 72:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 73: case 77: case 264:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 74: case 265:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 76: case 251:
this.$= [];
break;
case 104: case 221:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i;
break;
case 105:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 106:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 107:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 108:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 109:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 110:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 111:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var idA= new t_id();
		idA.setValorId($$[$0-4]);
		var asigna = new AsignacionArreglo(); asigna.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],17);	 //setValores = function(elemento,dimensiones,igual,valor,tipo)
		//console.dir(asigna);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 112:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],2);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,a,3);
		this.$= asigDec;
	
break;
case 113:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 114:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 115:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 116:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 117:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",5); this.$=a; 
break;
case 118:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",5); this.$=a; 
break;
case 119:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 120:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 121:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 122:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 123:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 124:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 125:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 126:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 127:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 128:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 129:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 130:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 131:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 132:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 133:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 134:

		var nodoI = new Instancia();
		nodoI.setValores($$[$0-1],$$[$0]);
		this.$ = nodoI;
	
break;
case 135:
this.$="=";
break;
case 136:
this.$="+=";
break;
case 137:
this.$="-=";
break;
case 138:
this.$="*=";
break;
case 139:
this.$="/=";
break;
case 140: case 141:
this.$= $$[$0];
break;
case 142:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 143:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 144:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 145:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 146:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 147:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 148:
this.$= $$[$0]
break;
case 149:

			
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 150:

			
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 151:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 152:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 153:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 154:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 155:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 156:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 157:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 158:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 159:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 160:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 161:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 162:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 163:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 164:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 165:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 166:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 167:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 168:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 169:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 170:
 this.$ = new Romper();
break;
case 171:
this.$ = new Continuar();
break;
case 172:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 173:
var a = []; a.push($$[$0]); this.$= a;
break;
case 174:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 175:
this.$="entero";
break;
case 176:
this.$="caracter";
break;
case 177:
this.$="decimal";
break;
case 178:
this.$="booleano";
break;
case 181:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 183:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 185:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 187:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 189:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 191:
this.$="<";
break;
case 192:
this.$=">";
break;
case 193:
this.$="<=";
break;
case 194:
this.$=">=";
break;
case 195:
this.$="!=";
break;
case 196:
this.$="==";
break;
case 197:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 198:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 200:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 201:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 203:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 205:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 206:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 208:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 210:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 211:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 212:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 213:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 214:
 this.$=$$[$0-1];
break;
case 215:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 216:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 217:
this.$=S1;
break;
case 219:
 var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 220:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 229:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 230:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 231:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 232:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 233:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 234:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 235:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 236:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 237:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 238:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 239: case 240: case 242: case 244: case 245:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 241: case 243:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], null);
			this.$=a;
		
break;
case 246:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 247:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 248:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 249:
 var arreglo = []; var g= arreglo.push($$[$0]); this.$= arreglo;
break;
case 250:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]);  this.$= arreglo;
break;
case 252:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 254:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 255:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 257:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 258:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
case 259:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 260:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 261:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 262:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 263:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 266:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{3:1,4:2,6:3,33:5,34:$V0,38:4,39:6,40:7,41:$V1,46:$V2},{1:[3]},{5:[1,11],38:12,39:6,40:7,41:$V1,46:$V2},{5:[1,13],33:14,34:$V0},o($V3,[2,29]),o($V4,[2,17]),o($V3,[2,31]),o($V3,[2,32]),{12:17,13:$V5,16:18,17:$V6,18:19,19:$V7,20:20,21:$V8,22:21,23:$V9,26:22,27:$Va,29:23,35:15,37:16},{42:[1,30]},{8:[1,31]},{1:[2,1]},o($V3,[2,30]),{1:[2,2]},o($V4,[2,18]),{12:17,13:$V5,16:18,17:$V6,18:19,19:$V7,20:20,21:$V8,22:21,23:$V9,26:22,27:$Va,29:23,36:[1,32],37:33},o($Vb,[2,20]),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),o($Vb,[2,28]),{14:[1,34]},{14:[1,35]},{14:[1,36]},{14:[1,37]},{24:[1,38]},{14:[1,40],24:[1,39]},{43:[1,41]},{14:$Vc,47:42,48:[1,43]},o($V4,[2,19]),o($Vb,[2,21]),{7:46,8:$Vd,9:$Ve,10:$Vf,11:45},{7:46,8:$Vd,9:$Ve,10:$Vf,11:50},{7:46,8:$Vd,9:$Ve,10:$Vf,11:51},{7:46,8:$Vd,9:$Ve,10:$Vf,11:52},{25:53,31:[1,54],32:[1,55]},{8:$Vg,28:56,54:57,55:$Vh,56:$Vi,57:$Vj,67:58,70:$Vk,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{8:$Vp,30:68,58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:69,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},{44:[1,121]},o($V3,[2,34]),{8:[1,122]},{8:$Vg,15:[1,124],28:127,49:123,50:125,51:126,52:128,53:129,54:130,55:$Vh,56:$Vi,57:$Vj,58:131,59:132,60:133,61:134,62:135,63:$VM,64:137,65:$VN,67:138,70:$Vk,71:$VO,98:$Vq,101:$Vr,102:$Vs,111:119,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK},{7:142,8:$Vd,9:$Ve,10:$Vf,15:[1,141]},o($VP,[2,7]),o($VP,[2,3]),o($VP,[2,4]),o($VP,[2,5]),{7:142,8:$Vd,9:$Ve,10:$Vf,15:[1,143]},{7:142,8:$Vd,9:$Ve,10:$Vf,15:[1,144]},{7:142,8:$Vd,9:$Ve,10:$Vf,15:[1,145]},{15:[1,146]},{15:[2,15]},{15:[2,16]},{15:[1,147]},{8:$VQ,67:148,70:$VR,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{8:[1,151]},{8:[1,152]},{8:$VS,42:$VT,68:153},o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VV,[2,175]),o($VV,[2,176]),o($VV,[2,177]),o($VV,[2,178]),{8:$Vp,15:[1,155],58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:156,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},o($VW,[2,77]),o($VW,[2,79]),o($VW,[2,80]),o($VW,[2,81]),o($VW,[2,82]),o($VW,[2,83]),o($VW,[2,84]),o($VW,[2,85]),o($VW,[2,86]),o($VW,[2,87]),o($VW,[2,88]),o($VW,[2,89]),o($VW,[2,90]),o($VW,[2,91]),o($VW,[2,92]),o($VW,[2,93]),o($VW,[2,94]),o($VW,[2,95]),o($VW,[2,96]),o($VW,[2,97]),o($VW,[2,98]),{45:[1,157],99:[1,159],105:158,106:[1,160],107:[1,161],112:$VX,113:$VY,114:$VZ,115:$V_},{45:[1,166]},{45:[1,167]},{45:[1,168]},{45:[1,169]},{8:[1,170]},{42:[1,171]},{42:[1,172]},{45:[1,173]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,45:[1,175],93:199,103:174,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{45:[1,211]},{8:[1,212]},{8:[1,213]},{8:[1,214]},{8:[1,215]},{42:[1,216]},{42:[1,217]},{42:[1,218]},{14:$Vg1,69:219},{42:[1,221]},{14:$Vg1,69:222},{42:[1,223]},{8:[1,224]},{42:[1,225]},{42:[1,226]},{8:$VS,42:$Vh1,75:228,97:229,99:[1,231],105:230,106:[1,232],107:[1,233],109:$Vi1,112:$VX,113:$VY,114:$VZ,115:$V_,141:$Vj1,212:$Vk1},{109:[1,237]},{99:[1,238]},{42:[1,239]},{45:[2,133],99:[1,240]},{42:[1,241]},{45:[1,242]},{14:$Vc,47:243},{8:$Vg,15:[1,244],28:127,50:245,51:126,52:128,53:129,54:130,55:$Vh,56:$Vi,57:$Vj,58:131,59:132,60:133,61:134,62:135,63:$VM,64:137,65:$VN,67:138,70:$Vk,71:$VO,98:$Vq,101:$Vr,102:$Vs,111:119,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK},o($V3,[2,37]),o($Vl1,[2,38]),o($Vl1,[2,40]),o($Vl1,[2,41]),o($Vl1,[2,42]),o($Vl1,[2,43]),{8:$VQ,58:246,59:247,60:249,61:248,64:250,67:251,70:$VR,98:$Vq,101:$Vr,102:$Vs,111:119,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK},o($Vl1,[2,48]),o($Vl1,[2,49]),o($Vl1,[2,50]),o($Vl1,[2,51]),o($Vl1,[2,52]),{62:252,148:$VJ},{45:[1,253]},{8:[1,254]},{66:[1,255]},{42:[1,256]},o($Vb,[2,8]),o($VP,[2,6]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{8:[1,257]},{8:[1,258]},{8:$VS,42:$VT,68:259},{42:$VT,68:260},{42:$VT,68:261},{14:$Vg1,69:262},{8:$Vm1,44:[1,264],67:266,72:263,73:265,150:$Vl,151:$Vm,152:$Vn,153:$Vo},o($Vb,[2,14]),o($VW,[2,78]),o($VW,[2,99]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:268,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vn1,$Vo1,{104:269,100:$Vp1}),{45:[2,119]},{45:[2,120]},o($Vn1,[2,136]),o($Vn1,[2,137]),o($Vn1,[2,138]),o($Vn1,[2,139]),o($VW,[2,100]),o($VW,[2,101]),o($VW,[2,102]),o($VW,[2,103]),{45:$Vq1,75:273,99:$Vr1,141:$Vj1},{8:[1,274]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:275,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VW,[2,170]),{45:[1,276]},o($VW,[2,169]),o([15,44,45,76,123,142],[2,180],{155:[1,277]}),o($Vs1,[2,182],{157:$Vt1}),o($Vu1,[2,184],{159:$Vv1}),o($Vw1,[2,186]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,162:280,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vw1,[2,188]),o($Vw1,[2,190],{164:281,165:[1,284],166:[1,285],167:[1,286],168:[1,287],169:[1,288],170:[1,289],171:$Vx1,173:$Vy1}),o($Vz1,[2,199],{174:$VA1,176:$VB1}),o($VC1,[2,202]),o($VC1,[2,204],{178:[1,292]}),o($VD1,[2,207],{106:[1,293],107:[1,294]}),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,180:295,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VE1,[2,209]),o($VE1,[2,210]),o($VE1,[2,211]),o($VE1,[2,212]),o($VE1,[2,213]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:296,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VE1,[2,215]),o($VE1,[2,216]),o($VE1,[2,217]),o($VE1,[2,218]),o($VE1,[2,219],{75:297,97:298,42:$Vh1,109:$Vi1,141:$Vj1,212:$Vk1}),o($VE1,[2,222]),o($VE1,[2,223]),o($VE1,[2,224]),o($VE1,[2,225]),o($VE1,[2,226]),o($VE1,[2,227]),o($VE1,[2,228]),{109:[1,299]},{14:$VF1,202:300,203:301},{42:[1,303]},{42:[1,304]},{42:[1,305]},o($VW,[2,171]),{141:[1,306]},{99:[1,307]},{99:[1,308]},{99:[1,309]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:310,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:311,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:312,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{130:[1,313]},{8:$Vp,15:[1,315],30:314,58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:69,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:316,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{133:[1,317]},{135:[1,318]},{14:$Vg1,69:319},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:320,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:321,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$VG1,191:322,192:323,193:$VH1,194:$VI1,195:$VJ1,196:$VK1,197:$VL1,198:$VM1,199:$VN1,200:$VO1},{99:$VP1,105:334,109:$VQ1,112:$VX,113:$VY,114:$VZ,115:$V_,141:$VR1},{45:[2,104],109:$VS1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:338,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vn1,$Vo1,{104:339,100:$Vp1}),{45:[2,117]},{45:[2,118]},{8:[1,341],213:340},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:342,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,44:[1,343],93:199,103:345,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,201:344,209:$Vd1,210:$Ve1,211:$Vf1},{8:[1,346],93:347},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:348,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:[1,349]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:350,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$Vm1,67:351,150:$Vl,151:$Vm,152:$Vn,153:$Vo},o($V3,[2,33]),o($V3,[2,35]),o($V3,[2,36]),o($Vl1,[2,39]),o($Vl1,[2,47]),o($Vl1,[2,53]),o($Vl1,[2,54]),o($Vl1,[2,55]),{45:[1,352]},{8:[1,353]},o($Vl1,[2,56]),o($Vl1,[2,58]),{42:$VT,45:$Vq1,68:260,75:273,99:$Vr1,141:$Vj1},{8:$Vg,28:354,54:57,55:$Vh,56:$Vi,57:$Vj,67:58,70:$Vk,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{44:[1,355]},{42:$VT,68:356},{42:$VT,68:357},{14:$Vg1,69:358},{14:$Vg1,69:359},{14:$Vg1,69:360},o($Vl1,[2,65]),{44:[1,361],76:[1,362]},{14:[2,68]},o($VT1,[2,73]),{8:[1,363],74:[1,364]},o($VV,$VS),{45:[2,115]},{45:[2,116]},{8:[1,365]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,100:$Vp1,103:366,104:367,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VU1,[2,109]),{45:[1,368],99:[1,369],141:$VR1},{76:[1,370]},{44:[1,371]},o($VW,[2,168]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,156:372,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,158:373,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,160:374,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vw1,[2,187]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,163:375,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,172:376,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,172:377,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VV1,[2,191]),o($VV1,[2,192]),o($VV1,[2,193]),o($VV1,[2,194]),o($VV1,[2,195]),o($VV1,[2,196]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,173:$V71,175:378,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,173:$V71,175:379,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,108:$V51,110:205,173:$V71,175:380,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VD1,[2,205]),o($VD1,[2,206]),o($VE1,[2,208]),{44:[1,381]},o($VE1,[2,220],{109:$VQ1,141:$VR1}),o($VE1,[2,221],{109:$VS1}),{8:[1,383],93:382},{15:[1,384],76:[1,385]},o($VW1,[2,254]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:345,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,201:386,209:$Vd1,210:$Ve1,211:$Vf1},{8:[1,387]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:388,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:389,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$Vm1,58:391,67:95,149:390,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{100:[1,392]},{100:[1,393]},{100:[1,394]},{44:[1,395]},{44:[1,396]},{44:[1,397]},{42:[1,398]},{8:$Vp,15:[1,399],58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:156,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},o($VX1,[2,76]),{76:[1,400]},{42:[1,401]},{123:[1,402]},o($VW,[2,160]),{44:[1,403]},{76:[1,404]},o($VY1,[2,229],{109:$VZ1}),o($V_1,[2,247]),o($V_1,[2,236],{75:406,97:407,42:$Vh1,141:$Vj1}),{42:[1,408]},{42:[1,409]},{42:[1,410]},{42:[1,411]},{42:[1,412]},{42:[1,413]},{42:[1,414]},o($V_1,[2,246]),{8:$VG1,191:415,192:323,193:$VH1,194:$VI1,195:$VJ1,196:$VK1,197:$VL1,198:$VM1,199:$VN1,200:$VO1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:416,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:417,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vn1,$Vo1),{8:$VG1,191:418,192:323,193:$VH1,194:$VI1,195:$VJ1,196:$VK1,197:$VL1,198:$VM1,199:$VN1,200:$VO1},{45:[2,113]},{45:[2,114]},o([15,44,45,76,99,106,107,123,142,155,157,159,165,166,167,168,169,170,171,173,174,176,178],[2,263],{212:[1,419]}),o($V$1,[2,264]),{142:[1,420]},o($V_1,[2,251]),{44:[1,421],76:$V02},o($V12,[2,249]),{42:$Vh1,75:427,97:428,99:[1,424],105:423,106:[1,425],107:[1,426],109:$Vi1,112:$VX,113:$VY,114:$VZ,115:$V_,141:$Vj1},{99:[1,430],105:429,106:[1,431],107:[1,432],112:$VX,113:$VY,114:$VZ,115:$V_},{45:[2,131]},{44:[1,433]},{45:[2,132]},{76:[1,434]},o($Vl1,[2,57]),{42:$VT,45:$Vq1,68:356,75:273,99:$Vr1,141:$Vj1},o($Vl1,[2,59]),{14:$Vg1,69:435},{14:$Vg1,69:436},{14:$Vg1,69:437},o($Vl1,[2,64]),o($Vl1,[2,62]),o($Vl1,[2,63]),{14:[2,67]},{8:$Vm1,67:266,73:438,150:$Vl,151:$Vm,152:$Vn,153:$Vo},o($VT1,[2,69],{75:439,141:$Vj1}),{8:[1,440]},{42:$Vh1,97:441},{45:[1,442]},{45:[1,443]},o($VU1,[2,110]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:444,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:445,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{45:[1,446]},o($Vs1,[2,181],{157:$Vt1}),o($Vu1,[2,183],{159:$Vv1}),o($Vw1,[2,185]),o($Vw1,[2,189],{171:$Vx1,173:$Vy1}),o($Vz1,[2,197],{174:$VA1,176:$VB1}),o($Vz1,[2,198],{174:$VA1,176:$VB1}),o($VC1,[2,200]),o($VC1,[2,201]),o($VC1,[2,203]),o($VE1,[2,214]),o($VE1,[2,232]),o($VE1,[2,233],{75:447,97:448,42:$Vh1,109:$Vi1,141:$Vj1}),o($VE1,[2,253]),{14:$VF1,203:449},{15:[1,450],76:$V02},{44:[1,451]},{44:[1,452]},{44:[1,453]},{8:$Vm1,58:455,67:95,142:[1,454],150:$Vl,151:$Vm,152:$Vn,153:$Vo},o($V22,[2,173]),{98:[1,456]},{101:[1,457]},{102:[1,458]},{14:[1,459]},{14:[1,460]},{14:$Vg1,69:461},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:462,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VX1,[2,75]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:463,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:464,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:[1,465]},{14:$Vg1,69:466},{8:[1,467]},{8:$VG1,192:468,193:$VH1,194:$VI1,195:$VJ1,196:$VK1,197:$VL1,198:$VM1,199:$VN1,200:$VO1},o($V_1,[2,237],{141:$VR1}),o($V_1,[2,238]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:469,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:470,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{44:[1,471]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:472,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{44:[1,473]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:474,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:475,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VY1,[2,230],{109:$VZ1}),{45:[2,121]},{142:[1,476]},o($VY1,[2,231],{109:$VZ1}),{8:[1,477]},o($V32,[2,163]),o($V_1,[2,252]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:478,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:479,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vn1,$Vo1,{104:480,100:$Vp1}),{45:[2,126]},{45:[2,127]},{99:$VP1,105:481,109:$VQ1,112:$VX,113:$VY,114:$VZ,115:$V_,141:$VR1},{109:$VS1},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:482,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($Vn1,$Vo1,{104:483,100:$Vp1}),{45:[2,128]},{45:[2,129]},{45:[2,266]},{8:[1,484]},o($Vl1,[2,66]),o($Vl1,[2,60]),o($Vl1,[2,61]),o($VT1,[2,74]),o($VT1,[2,71],{141:$VR1}),o($VT1,[2,70],{75:485,141:$Vj1}),{45:[2,134]},o($VU1,[2,108]),o($VU1,[2,112]),{45:[1,486]},{44:[1,488],76:[1,487]},o($VW,[2,167]),o($VE1,[2,234],{109:$VQ1,141:$VR1}),o($VE1,[2,235],{109:$VS1}),o($VW1,[2,255]),o($VW1,[2,256]),o($VE1,[2,260]),o($VE1,[2,261]),o($VE1,[2,262]),{45:[1,489]},o($V22,[2,174]),{42:[1,490]},{42:[1,491]},{42:[1,492]},{15:[1,493],116:495,117:$V42,118:494,119:$V52},{15:[1,500],121:501,122:$V62,124:499,125:$V72,126:498},o($VW,[2,155]),{44:[1,504]},{44:[1,505]},{44:[1,506]},{45:[1,507]},o($VW,[2,161]),{44:[1,508]},o($V_1,[2,248]),{44:[1,509]},{44:[1,510]},o($V_1,[2,241]),{44:[1,511]},o($V_1,[2,243]),{44:[1,512]},{44:[1,513]},o($V32,[2,164]),o($V$1,[2,265]),o($V12,[2,250]),{45:[2,122]},{45:[2,123]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:514,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{45:[2,124]},{45:[2,125]},{44:[1,515]},o($VT1,[2,72],{141:$VR1}),o($VU1,[2,111]),{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:516,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{45:[1,517]},o($V82,[2,172]),{8:$Vm1,67:518,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{8:$Vm1,67:519,150:$Vl,151:$Vm,152:$Vn,153:$Vo},{8:$Vm1,67:520,150:$Vl,151:$Vm,152:$Vn,153:$Vo},o($VW,[2,142]),{15:[1,522],116:521,117:$V42},{15:[1,523],118:524,119:$V52},{14:$Vg1,69:525},{14:$Vg1,69:526},{15:[1,528],121:529,122:$V62,124:527,125:$V72},{15:[1,530]},o($VW,[2,154]),o($V92,[2,149]),{123:[1,531]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:532,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{45:[1,533]},{14:$Vg1,69:534},{45:[1,535]},{136:[1,536]},{45:[1,537]},o($V_1,[2,239]),o($V_1,[2,240]),o($V_1,[2,242]),o($V_1,[2,244]),o($V_1,[2,245]),{45:[2,130]},o([45,99],[2,259]),{44:[1,538]},o($VW,[2,166]),{44:[1,539]},{44:[1,540]},{44:[1,541]},{15:[1,542]},o($VW,[2,144]),o($VW,[2,145]),{15:[1,543]},o([15,117],[2,141]),o([15,119],[2,140]),{15:[1,544]},o($VW,[2,152]),o($V92,[2,150]),o($VW,[2,153]),{8:$Vp,30:545,58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:69,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},{123:[1,546]},o($VW,[2,156]),o($VW,[2,157]),o($VW,[2,158]),{123:[1,547]},o($VW,[2,162]),{45:[1,548]},{45:[1,549]},{45:[1,550]},{45:[1,551]},o($VW,[2,143]),o($VW,[2,146]),o($VW,[2,151]),{8:$Vp,15:[2,148],58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:156,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},{8:$Vp,30:552,58:70,59:77,60:78,61:79,62:76,64:93,67:95,77:69,78:71,79:72,80:73,81:74,82:75,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,96:94,98:$Vq,101:$Vr,102:$Vs,108:$Vt,110:117,111:119,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:553,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},o($VW,[2,165]),o($V82,[2,105]),o($V82,[2,106]),o($V82,[2,107]),o($V92,[2,147],{58:70,78:71,79:72,80:73,81:74,82:75,62:76,59:77,60:78,61:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:92,64:93,96:94,67:95,110:117,111:119,77:156,8:$Vp,98:$Vq,101:$Vr,102:$Vs,108:$Vt,120:$Vu,127:$Vv,128:$Vw,129:$Vx,131:$Vy,132:$Vz,134:$VA,138:$VB,139:$VC,140:$VD,143:$VE,144:$VF,145:$VG,146:$VH,147:$VI,148:$VJ,150:$Vl,151:$Vm,152:$Vn,153:$Vo,208:$VK,214:$VL}),{45:[1,554]},{137:[1,555]},{123:[1,556]},{8:$V$,9:$V01,10:$V11,14:$V21,42:$V31,43:$V41,93:199,103:557,108:$V51,110:205,154:176,156:177,158:178,160:179,161:$V61,162:181,163:182,172:183,173:$V71,175:184,177:185,179:186,180:188,181:$V81,182:$V91,183:$Va1,184:$Vb1,185:$Vc1,186:200,187:201,188:202,189:203,190:204,209:$Vd1,210:$Ve1,211:$Vf1},{44:[1,558]},{14:$Vg1,69:559},o($VW,[2,159])],
defaultActions: {11:[2,1],13:[2,2],54:[2,15],55:[2,16],160:[2,119],161:[2,120],232:[2,117],233:[2,118],264:[2,68],268:[2,115],269:[2,116],338:[2,113],339:[2,114],348:[2,131],350:[2,132],361:[2,67],416:[2,121],425:[2,126],426:[2,127],431:[2,128],432:[2,129],433:[2,266],441:[2,134],479:[2,122],480:[2,123],482:[2,124],483:[2,125],514:[2,130]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	var listaPrueba =[];
	var Clase = require("./Arbol/Clase");
	var arreglin = require("./Arbol/arreglo");
    var Atributo = require("./Arbol/Atributo");
    var Archivo = require("./Arbol/Archivo");
    
    var  Acceso = require("./Arbol/Expresion/Acceso");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica");
    var Booleano = require("./Arbol/Expresion/Booleano");
    var Cadena = require("./Arbol/Expresion/Cadena");
    var Caracter = require("./Arbol/Expresion/Caracter");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero");
    var Decimal = require("./Arbol/Expresion/Decimal");
    var Entero = require("./Arbol/Expresion/Entero");
    var Este = require("./Arbol/Expresion/Este");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa");
    var Instancia = require("./Arbol/Expresion/Instancia");
    var  Llamada = require("./Arbol/Expresion/Llamada");
    var  Logica = require("./Arbol/Expresion/Logica");
    var  Negativo = require("./Arbol/Expresion/Negativo");
    var  Not_logica= require("./Arbol/Expresion/Not_logica");
    var  Nulo= require("./Arbol/Expresion/Nulo");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo");
    var  Relacional= require("./Arbol/Expresion/Relacional");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria");
    var  t_id= require("./Arbol/Expresion/t_id");
    var  Unario= require("./Arbol/Expresion/Unario");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero");


    var  Constructor = require("./Arbol/Funciones/Constructor");
    var  Funcion = require("./Arbol/Funciones/Funcion");
    var  Parametro = require("./Arbol/Funciones/Parametro");
    var  Principal = require("./Arbol/Funciones/Principal");

    var Asignacion = require("./Arbol/Sentencias/Asignacion");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla");
    var  Caso= require("./Arbol/Sentencias/Caso");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X");
    var Concatenar = require("./Arbol/Sentencias/Concatenar");
    var  Contador= require("./Arbol/Sentencias/Contador");
    var Continuar = require("./Arbol/Sentencias/Continuar");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar");
    var  Estructura= require("./Arbol/Sentencias/Estructura");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras");
    var  Importar= require("./Arbol/Sentencias/Importar");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir");
    var  Leer_Teclado= require("./Arbol/Sentencias/LeerTeclado");
    var  Puntero= require("./Arbol/Sentencias/Puntero");
    var  Repetir= require("./Arbol/Sentencias/Repetir");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras");
    var  Retorno= require("./Arbol/Sentencias/Retorno");
    var  Romper= require("./Arbol/Sentencias/Romper");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona");
    var  Si= require("./Arbol/Sentencias/Si");
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 115
break;
case 4:return 176
break;
case 5:return 34
break;
case 6:return 36
break;
case 7:return 32
break;
case 8:return 31
break;
case 9:return 13
break;
case 10:return 17
break;
case 11:return 23
break;
case 12:return 27
break;
case 13:return 19
break;
case 14:return 21
break;
case 15:return 208
break;
case 16:return 209
break;
case 17:return 210
break;
case 18:return 211
break;
case 19:return 212
break;
case 20:return 214
break;
case 21:return 200
break;
case 22:return 128
break;
case 23:return 129
break;
case 24:return 130
break;
case 25:return 131
break;
case 26:return 132
break;
case 27:return 133
break;
case 28:return 134
break;
case 29:return 135
break;
case 30:return 136
break;
case 31:return 137
break;
case 32:return 138
break;
case 33:return 139
break;
case 34:return 140
break;
case 35:return 127
break;
case 36:return 122
break;
case 37:return 125
break;
case 38:return 117
break;
case 39:return 119
break;
case 40:return 120
break;
case 41:return 98
break;
case 42:return 101
break;
case 43:return 102
break;
case 44:return 193
break;
case 45:return 198
break;
case 46:return 199
break;
case 47:return 196
break;
case 48:return 197
break;
case 49:return 195
break;
case 50:return 194
break;
case 51:return 41
break;
case 52:return 65
break;
case 53:return 66
break;
case 54:return 143
break;
case 55:return 76
break;
case 56:return 207
break;
case 57:return 205
break;
case 58:return 144
break;
case 59:return 145
break;
case 60:return 146
break;
case 61:return 71
break;
case 62:return 100
break;
case 63:return 55
break;
case 64:return 56
break;
case 65:return 57
break;
case 66:return 147
break;
case 67:return 183
break;
case 68:return 183
break;
case 69:'nulo'
break;
case 70:return 167
break;
case 71:return 168
break;
case 72:return 170
break;
case 73:return 169
break;
case 74:return 165
break;
case 75:return 166
break;
case 76:return 48
break;
case 77:return 46
break;
case 78:return 108
break;
case 79:return 74
break;
case 80:return 70
break;
case 81:return 182
break;
case 82:return 182 
break;
case 83:return 148
break;
case 84:return 109
break;
case 85:return 150
break;
case 86:return 151
break;
case 87:return 153
break;
case 88:return 152
break;
case 89:return 112
break;
case 90:return 113
break;
case 91:return 114
break;
case 92:return 99
break;
case 93:return 106
break;
case 94:return 107
break;
case 95:return 174
break;
case 96:return 173
break;
case 97:return 171
break;
case 98:return 178
break;
case 99:return 42
break;
case 100:return 44
break;
case 101:return 14
break;
case 102:return 15
break;
case 103:return 141
break;
case 104:return 142
break;
case 105:return 155
break;
case 106:return 159
break;
case 107:return 157
break;
case 108:return 161
break;
case 109:return 45
break;
case 110:return 123
break;
case 111:return 43;
break;
case 112:return 8
break;
case 113:return 10
break;
case 114:return 9
break;
case 115:return 181
break;
case 116:return 5
break;
case 117:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:\{%)/i,/^(?:%\})/i,/^(?:a-coach\b)/i,/^(?:g-coach\b)/i,/^(?:titulo\b)/i,/^(?:descripcion\b)/i,/^(?:tipo\b)/i,/^(?:ejemplo\b)/i,/^(?:tarea\b)/i,/^(?:resultado\b)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:desapilar\b)/i,/^(?:apilar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}