/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[5,9,14],$V3=[1,17],$V4=[1,37],$V5=[1,40],$V6=[1,41],$V7=[1,42],$V8=[1,33],$V9=[1,38],$Va=[1,36],$Vb=[1,39],$Vc=[1,43],$Vd=[1,44],$Ve=[1,45],$Vf=[1,46],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[15,20,27,28,29,35,37,42,43,71,74,75,122,124,125,126,127,182],$Vm=[1,64],$Vn=[1,63],$Vo=[1,70],$Vp=[2,155],$Vq=[15,42,71,74,75,124,125,126,127,182],$Vr=[12,15,46,48],$Vs=[1,85],$Vt=[1,84],$Vu=[1,87],$Vv=[1,90],$Vw=[1,95],$Vx=[1,122],$Vy=[1,123],$Vz=[1,127],$VA=[1,138],$VB=[1,137],$VC=[1,109],$VD=[1,116],$VE=[1,118],$VF=[1,119],$VG=[1,120],$VH=[1,121],$VI=[1,124],$VJ=[1,135],$VK=[1,136],$VL=[1,139],$VM=[1,140],$VN=[1,141],$VO=[1,149],$VP=[15,20,27,28,29,35,37,42,43,71,74,75,79,93,96,99,101,102,103,105,106,108,112,113,114,116,117,118,119,120,121,122,124,125,126,127,182,188],$VQ=[1,152],$VR=[1,199],$VS=[1,200],$VT=[1,189],$VU=[1,190],$VV=[1,191],$VW=[1,192],$VX=[1,193],$VY=[1,194],$VZ=[1,195],$V_=[1,196],$V$=[1,197],$V01=[1,198],$V11=[1,184],$V21=[1,185],$V31=[1,187],$V41=[1,186],$V51=[1,188],$V61=[1,202],$V71=[12,48],$V81=[12,13,20,48,97,116,129],$V91=[1,216],$Va1=[12,13,20,48,97,116,129,131],$Vb1=[1,217],$Vc1=[12,13,20,48,97,116,129,131,133],$Vd1=[1,220],$Ve1=[1,221],$Vf1=[12,13,20,48,97,116,129,131,133,139,140,141,142,143,144,145,147],$Vg1=[1,228],$Vh1=[1,229],$Vi1=[12,13,20,48,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150],$Vj1=[12,13,20,48,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],$Vk1=[12,13,20,48,81,82,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],$Vl1=[1,239],$Vm1=[1,237],$Vn1=[1,238],$Vo1=[1,245],$Vp1=[15,20,27,28,29,35,37,42,43,71,74,75,79,90,92,93,96,99,101,102,103,104,105,106,107,108,112,113,114,117,118,119,120,121,122,124,125,126,127,182,188],$Vq1=[15,20,71,74,75,79,93,96,99,101,102,103,105,106,108,112,113,114,117,118,119,120,121,122,124,125,126,127,182,188],$Vr1=[1,265],$Vs1=[1,266],$Vt1=[1,267],$Vu1=[1,268],$Vv1=[15,116,124,125,126,127],$Vw1=[10,11,15,18,79,147,155,156,157,158,159,180,181,183,184,185],$Vx1=[1,318],$Vy1=[1,319],$Vz1=[1,322],$VA1=[1,323],$VB1=[1,324],$VC1=[1,325],$VD1=[1,326],$VE1=[1,327],$VF1=[1,328],$VG1=[1,329],$VH1=[1,330],$VI1=[20,48],$VJ1=[12,13,20,48,72,80,81,82,85,86,87,88,97,115,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],$VK1=[10,11,15,18,79,135,147,155,156,157,158,159,180,181,183,184,185],$VL1=[2,111],$VM1=[12,13,20,48,72,81,82,85,86,87,88,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],$VN1=[1,380],$VO1=[12,13,20,48,72,80,81,82,85,86,87,88,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],$VP1=[12,13,20,48,72,81,82,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152,186],$VQ1=[1,392],$VR1=[12,20,48],$VS1=[15,20,27,28,29,35,37,42,43,71,74,75,79,93,96,99,101,102,103,105,106,108,112,113,114,117,118,119,120,121,122,124,125,126,127,182,188],$VT1=[1,471],$VU1=[1,470],$VV1=[1,477],$VW1=[1,476],$VX1=[20,96,99];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"SENT_ARCHIVO":6,"IMPORTAR":7,"CLASE":8,"importar":9,"abrePar":10,"cadena":11,"cierraPar":12,"puntoComa":13,"clase":14,"id":15,"CUERPO_CLASE":16,"hereda_de":17,"abreLlave":18,"SENTENCIAS_CLASE":19,"cierraLlave":20,"SENTENCIA_CLASE":21,"ATRIBUTO":22,"FUNCION":23,"FUNCION_SOBRE":24,"PRINCIPAL":25,"VISIBILIDAD":26,"publico":27,"protegido":28,"privado":29,"DECLARACION":30,"DECLA_LISTA":31,"DECLA_PILA":32,"DECLA_COLA":33,"ESTRUCTURA":34,"VISIBLIDAD":35,"DECLA_PUNTERO":36,"arroba":37,"sobreescribir":38,"TIPO_DECLARACION":39,"LISTA_PARAMETROS":40,"CUERPO_FUNCION":41,"vacio":42,"principal":43,"PARAMETROS":44,"PARAMETRO":45,"puntero":46,"COL_ARREGLO":47,"coma":48,"SENTENCIAS":49,"SENTENCIA":50,"CONCATENAR":51,"IMPRIMIR":52,"ROMPER":53,"RETORNO":54,"CONTINUAR":55,"SI":56,"SWITCH":57,"REPETIR_MIENTRAS":58,"HACER_MIENTRAS":59,"CICLO_X":60,"REPETIR":61,"REPETIR_CONTANDO":62,"ENCICLAR":63,"CONTADOR":64,"LEER_TECLADO":65,"ACCESO":66,"ASIGNACION":67,"DESTRUIR_PUNTERO":68,"LLAMADA":69,"PARAMETROS_LLAMADA":70,"Lista":71,"igual":72,"nuevo":73,"Pila":74,"Cola":75,"EXPRESION":76,"INSTANCIA":77,"SIMB_IGUAL":78,"este":79,"punto":80,"masMas":81,"menosMenos":82,"VALOR_PUNTERO":83,"CREAR_PUNTERO":84,"masIgual":85,"menosIgual":86,"porIgual":87,"divIgual":88,"SI_FALSO":89,"Es_falso":90,"SI_VERDADERO":91,"Es_verdadero":92,"Si":93,"finSi":94,"CASO":95,"Es_igual_a":96,"dosPuntos":97,"DEFECTO":98,"defecto":99,"LISTA_CASOS":100,"Evaluar_si":101,"Repetir_Mientras":102,"hacer":103,"mientras":104,"Ciclo_doble_condicion":105,"Repetir":106,"hasta_que":107,"Repetir_contando":108,"variable":109,"desde":110,"hasta":111,"Enciclar":112,"Contador":113,"Leer_Teclado":114,"abreCor":115,"cierraCor":116,"concatenar":117,"imprimir":118,"retorno":119,"romper":120,"continuar":121,"estructura":122,"LISTA_DECLARACIONES":123,"t_entero":124,"t_caracter":125,"t_decimal":126,"t_booleano":127,"LOGICA":128,"or":129,"XOR":130,"xor":131,"AND":132,"and":133,"NOT":134,"not":135,"REL":136,"ARITMETICA":137,"SIMB_REL":138,"menor":139,"mayor":140,"menorIgual":141,"mayorIgual":142,"distintoA":143,"igualIgual":144,"mas":145,"MUL":146,"menos":147,"por":148,"POT":149,"division":150,"UNARIO":151,"potencia":152,"NEG":153,"VALOR":154,"entero":155,"decimal":156,"caracter":157,"booleano":158,"nulo":159,"CONVERTIR_CADENA":160,"CONVERTIR_ENTERO":161,"ESTE":162,"CUERPO_ARREGLO":163,"OBTENER_DIRECCION":164,"RESERVAR_MEMORIA":165,"OBTENER_TAMANIO":166,"ATRI":167,"ATRI_":168,"insertar":169,"Apilar":170,"Desapilar":171,"Encolar":172,"Desencolar":173,"obtener":174,"buscar":175,"tamanio":176,"LISTA_EXPRESIONES":177,"LISTA_CUERPO_ARREGLO":178,"ELEMENTO_FILA":179,"convertirACadena":180,"convertirAEntero":181,"crearPuntero":182,"obtenerDireccion":183,"reservarMemoria":184,"consultarTamanio":185,"flecha":186,"COMPLE_PUNTERO":187,"destruirPuntero":188,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"importar",10:"abrePar",11:"cadena",12:"cierraPar",13:"puntoComa",14:"clase",15:"id",17:"hereda_de",18:"abreLlave",20:"cierraLlave",27:"publico",28:"protegido",29:"privado",35:"VISIBLIDAD",37:"arroba",38:"sobreescribir",42:"vacio",43:"principal",46:"puntero",48:"coma",71:"Lista",72:"igual",73:"nuevo",74:"Pila",75:"Cola",79:"este",80:"punto",81:"masMas",82:"menosMenos",85:"masIgual",86:"menosIgual",87:"porIgual",88:"divIgual",90:"Es_falso",92:"Es_verdadero",93:"Si",94:"finSi",96:"Es_igual_a",97:"dosPuntos",99:"defecto",101:"Evaluar_si",102:"Repetir_Mientras",103:"hacer",104:"mientras",105:"Ciclo_doble_condicion",106:"Repetir",107:"hasta_que",108:"Repetir_contando",109:"variable",110:"desde",111:"hasta",112:"Enciclar",113:"Contador",114:"Leer_Teclado",115:"abreCor",116:"cierraCor",117:"concatenar",118:"imprimir",119:"retorno",120:"romper",121:"continuar",122:"estructura",124:"t_entero",125:"t_caracter",126:"t_decimal",127:"t_booleano",129:"or",131:"xor",133:"and",135:"not",139:"menor",140:"mayor",141:"menorIgual",142:"mayorIgual",143:"distintoA",144:"igualIgual",145:"mas",147:"menos",148:"por",150:"division",152:"potencia",155:"entero",156:"decimal",157:"caracter",158:"booleano",159:"nulo",169:"insertar",170:"Apilar",171:"Desapilar",172:"Encolar",173:"Desencolar",174:"obtener",175:"buscar",176:"tamanio",180:"convertirACadena",181:"convertirAEntero",182:"crearPuntero",183:"obtenerDireccion",184:"reservarMemoria",185:"consultarTamanio",186:"flecha",188:"destruirPuntero"},
productions_: [0,[3,2],[3,2],[4,1],[4,2],[6,1],[6,1],[7,5],[8,3],[8,5],[16,3],[16,2],[19,1],[19,2],[21,1],[21,1],[21,1],[21,1],[26,1],[26,1],[26,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,2],[22,3],[22,2],[24,3],[23,5],[23,5],[23,4],[23,4],[23,4],[23,3],[25,4],[40,3],[40,2],[45,2],[45,3],[45,3],[45,4],[44,1],[44,3],[41,3],[41,2],[49,1],[49,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[50,2],[50,2],[50,2],[69,2],[31,9],[32,9],[33,9],[30,5],[30,3],[30,4],[30,6],[30,5],[67,3],[67,3],[67,4],[67,4],[67,3],[67,3],[67,5],[67,5],[67,5],[67,5],[67,6],[67,6],[67,2],[67,2],[67,2],[67,2],[67,4],[67,4],[67,4],[67,4],[67,3],[36,3],[36,1],[77,3],[78,1],[78,1],[78,1],[78,1],[78,1],[89,2],[91,2],[56,7],[56,9],[56,8],[56,8],[56,9],[95,4],[98,3],[100,1],[100,2],[57,8],[57,7],[57,7],[57,6],[58,5],[59,7],[60,7],[61,7],[62,15],[63,3],[64,5],[65,7],[47,3],[47,4],[51,9],[51,7],[52,5],[54,3],[54,2],[53,2],[55,2],[34,6],[123,1],[123,2],[39,1],[39,1],[39,1],[39,1],[39,1],[76,1],[128,3],[128,1],[130,3],[130,1],[132,3],[132,1],[134,2],[134,1],[136,3],[136,1],[138,1],[138,1],[138,1],[138,1],[138,1],[138,1],[137,3],[137,3],[137,1],[146,3],[146,3],[146,1],[149,3],[149,1],[151,2],[151,2],[151,1],[153,2],[153,1],[154,1],[154,1],[154,1],[154,1],[154,3],[154,1],[154,1],[154,1],[154,1],[154,1],[154,2],[154,2],[154,1],[154,1],[154,1],[154,1],[154,1],[154,1],[154,1],[66,3],[66,4],[66,4],[162,3],[162,3],[162,4],[162,4],[168,1],[168,2],[168,2],[168,4],[168,4],[168,3],[168,4],[168,3],[168,4],[168,4],[168,1],[167,1],[167,3],[177,1],[177,3],[70,2],[70,3],[163,3],[178,1],[178,3],[179,3],[160,4],[161,4],[84,6],[164,4],[165,4],[166,4],[83,3],[187,1],[187,3],[68,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

		var er = new errores();
        er.insertarErrorPos("Sintactico", "Ha ocurrido un error "+ yytext);
		return null;
	 
break;
case 3:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 4: case 52:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 5: case 6: case 14: case 15: case 16: case 17: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 155: case 156: case 158: case 160: case 162: case 164: case 166: case 175: case 178: case 180: case 183: case 185: case 193: case 194: case 198: case 199: case 200: case 201: case 202: case 203: case 204:
this.$=$$[$0];
break;
case 7:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 8:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 9:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 10: case 49: case 232:
this.$= $$[$0-1];
break;
case 11: case 42:
this.$=[];
break;
case 12:

			
			this.$=[];
			this.$.push($$[$0]);
		
break;
case 13:

			this.$=$$[$0-1];
			this.$.push($$[$0]);

		
break;
case 18:
this.$="publico";
break;
case 19:
this.$="protegido";
break;
case 20:
this.$="privado";
break;
case 21: case 27: case 28: case 29: case 30:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 22: case 23: case 24: case 25: case 26:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 31:

			var a = new Atributo();
			a.setValores($$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 32:

			var a = new Atributo();
			a.setValores("publico",$$[$0-1]);
			this.$=a;
		
break;
case 33:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 34:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 37:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 38:

			var a = new Funcion();
			a.setValores($$[$0-3],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			a.cambiarAConstructor();
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 39:

			var a = new Funcion();
			a.cambiarAConstructor();
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 40:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 41: case 73: case 74: case 75: case 76: case 77: case 229:
this.$=$$[$0-1];
break;
case 43:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-1],1,idA);
			this.$=a;
		
break;
case 44:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],2,idA);
			this.$=a;
		
break;
case 45:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 46:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 47: case 51: case 240:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 48: case 241:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 50: case 227:
this.$= [];
break;
case 78: case 197:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i;
break;
case 79:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 80:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 81:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 82:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 83:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 84:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 85:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var idA= new t_id();
		idA.setValorId($$[$0-4]);
		var asigna = new AsignacionArreglo(); asigna.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],17);	 //setValores = function(elemento,dimensiones,igual,valor,tipo)
		//console.dir(asigna);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 86:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],2);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,a,3);
		this.$= asigDec;
	
break;
case 87:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 88:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 89:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 91:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 92:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 93:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 94:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 95:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 96:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 97:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 99:

			 var b = new t_id();
			 b.setValorId($$[$0-1]);
			 var a = new AsignacionUnario(); 
			 a.setValores(b,"++",5);
			 this.$=a;
		 
break;
case 100:

			 var b = new t_id();
			 b.setValorId($$[$0-1]);
			 var a = new AsignacionUnario(); 
			 a.setValores(b,"--",5);
			 this.$=a;
		 
break;
case 101:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 102:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 103:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 104:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 105:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 106:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 107:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 108:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 109:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 110:

		var nodoI = new Instancia();
		nodoI.setValores($$[$0-1],$$[$0]);
		this.$ = nodoI;
	
break;
case 111:
this.$="=";
break;
case 112:
this.$="+=";
break;
case 113:
this.$="-=";
break;
case 114:
this.$="*=";
break;
case 115:
this.$="/=";
break;
case 116: case 117:
this.$= $$[$0];
break;
case 118:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],a,b);
			this.$=c;
		
break;
case 119:

			var c = new Si();
			c.setValores($$[$0-6],$$[$0-3],$$[$0-2]);
			this.$=c;
		
break;
case 120:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],b);
			this.$=c;
		
break;
case 121:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-5],a,$$[$0-2]);
			this.$=c;
		
break;
case 122:

			var c = new Si();
			c.setValores($$[$0-6],$$[$0-2],$$[$0-3]);
			this.$=c;
		
break;
case 123:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 124:
this.$= $$[$0]
break;
case 125:

			
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 126:

			
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 127:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 128:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 129:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 130:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 131:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 132:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 133:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 134:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 135:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 136:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 137:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 138:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 139:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 140:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 141:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 142:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 143:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 144:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 145:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 146:
 this.$ = new Romper();
break;
case 147:
this.$ = new Continuar();
break;
case 148:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 149:
var a = []; a.push($$[$0]); this.$= a;
break;
case 150:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 151:
this.$="entero";
break;
case 152:
this.$="caracter";
break;
case 153:
this.$="decimal";
break;
case 154:
this.$="booleano";
break;
case 157:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 159:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 161:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 163:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 165:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 167:
this.$="<";
break;
case 168:
this.$=">";
break;
case 169:
this.$="<=";
break;
case 170:
this.$=">=";
break;
case 171:
this.$="!=";
break;
case 172:
this.$="==";
break;
case 173:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 174:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 176:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 177:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 179:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 181:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 182:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 184:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 186:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 187:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 188:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 189:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 190:
 this.$=$$[$0-1];
break;
case 191:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 192:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 195:
 var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 196:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 205:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 206:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 207:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 208:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 209:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 210:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 211:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 212:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 213:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 214:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 215: case 216: case 218: case 220: case 221:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 217: case 219:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], null);
			this.$=a;
		
break;
case 222:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 223:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 224:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 225:
 var arreglo = []; var g= arreglo.push($$[$0]); this.$= arreglo;
break;
case 226:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]);  this.$= arreglo;
break;
case 228:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 230:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 231:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 233:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-1]); this.$= a;
break;
case 234:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-1]); this.$=a;
break;
case 235:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 236:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 237:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 238:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 239:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 242:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:$V0,14:$V1},{1:[3]},{5:[1,9],6:10,7:5,8:6,9:$V0,14:$V1},{5:[1,11]},o($V2,[2,3]),o($V2,[2,5]),o($V2,[2,6]),{10:[1,12]},{15:[1,13]},{1:[2,1]},o($V2,[2,4]),{1:[2,2]},{11:[1,14]},{16:15,17:[1,16],18:$V3},{12:[1,18]},o($V2,[2,8]),{15:[1,19]},{15:$V4,19:20,20:[1,21],21:22,22:23,23:24,24:25,25:26,26:27,27:$V5,28:$V6,29:$V7,30:28,31:29,32:30,33:31,34:32,35:$V8,36:34,37:$V9,39:35,42:$Va,43:$Vb,71:$Vc,74:$Vd,75:$Ve,84:47,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk},{13:[1,53]},{16:54,18:$V3},{15:$V4,20:[1,55],21:56,22:23,23:24,24:25,25:26,26:27,27:$V5,28:$V6,29:$V7,30:28,31:29,32:30,33:31,34:32,35:$V8,36:34,37:$V9,39:35,42:$Va,43:$Vb,71:$Vc,74:$Vd,75:$Ve,84:47,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk},o($V2,[2,11]),o($Vl,[2,12]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),{15:$Vm,30:57,31:58,32:60,33:59,36:61,39:62,42:$Vn,71:$Vc,74:$Vd,75:$Ve,84:47,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk},o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),{34:65,122:$Vf},{13:[1,66]},{15:[1,67]},{15:[1,68]},{10:$Vo,15:$Vp,40:69},{38:[1,71]},{10:[1,72]},o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),{15:[1,73]},{15:[1,74]},{15:[1,75]},{15:[1,76]},{13:[2,109],72:[1,77]},o($Vr,[2,151]),o($Vr,[2,152]),o($Vr,[2,153]),o($Vr,[2,154]),{10:[1,78]},o($V2,[2,7]),o($V2,[2,9]),o($V2,[2,10]),o($Vl,[2,13]),o($Vl,[2,21]),o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,29]),{13:[1,79]},{15:[1,80]},{15:[1,81]},{10:$Vo,15:$Vp,40:82},o($Vl,[2,30]),o($Vl,[2,32]),{10:$Vo,13:$Vs,40:83,47:86,72:$Vt,115:$Vu},{10:$Vo,40:88},{18:$Vv,41:89},{12:[1,92],15:$Vw,39:94,44:91,45:93,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{15:$V4,23:96,26:97,27:$V5,28:$V6,29:$V7,39:98,42:$Va,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{12:[1,99]},{72:[1,100]},{72:[1,101]},{72:[1,102]},{115:[1,103]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:104,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:$Vw,39:142,124:$Vg,125:$Vh,126:$Vi,127:$Vj},o($Vl,[2,31]),{10:$Vo,13:$Vs,40:143,47:86,72:$Vt,115:$Vu},{10:$Vo,40:144},{18:$Vv,41:145},{18:$Vv,41:146},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,73:$VO,76:147,77:148,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VP,[2,83]),{13:[1,150],72:[1,151],115:$VQ},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:153,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{18:$Vv,41:154},o($Vl,[2,39]),{15:$VR,20:[1,156],30:158,31:165,32:166,33:167,34:164,36:181,39:183,49:155,50:157,51:159,52:160,53:161,54:162,55:163,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,69:182,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:201,84:47,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61},{12:[1,203],48:[1,204]},{18:[2,42]},o($V71,[2,47]),{15:[1,205],46:[1,206]},o($Vr,$Vp),o($Vl,[2,33]),{15:$Vm,39:207,42:$Vn,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{15:[1,208]},{18:$Vv,41:209},{73:[1,210]},{73:[1,211]},{73:[1,212]},{15:$Vw,30:214,39:183,123:213,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{13:[2,108]},o([12,13,20,48,97,116],[2,156],{129:[1,215]}),o($V81,[2,158],{131:$V91}),o($Va1,[2,160],{133:$Vb1}),o($Vc1,[2,162]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,136:218,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vc1,[2,164]),o($Vc1,[2,166],{138:219,139:[1,222],140:[1,223],141:[1,224],142:[1,225],143:[1,226],144:[1,227],145:$Vd1,147:$Ve1}),o($Vf1,[2,175],{148:$Vg1,150:$Vh1}),o($Vi1,[2,178]),o($Vi1,[2,180],{152:[1,230]}),o($Vj1,[2,183],{81:[1,231],82:[1,232]}),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,154:233,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vk1,[2,185]),o($Vk1,[2,186]),o($Vk1,[2,187]),o($Vk1,[2,188]),o($Vk1,[2,189]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:234,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vk1,[2,191]),o($Vk1,[2,192]),o($Vk1,[2,193]),o($Vk1,[2,194]),o($Vk1,[2,195],{47:235,70:236,10:$Vl1,80:$Vm1,115:$Vu,186:$Vn1}),o($Vk1,[2,198]),o($Vk1,[2,199]),o($Vk1,[2,200]),o($Vk1,[2,201]),o($Vk1,[2,202]),o($Vk1,[2,203]),o($Vk1,[2,204]),{10:[1,240]},{10:[1,241]},{80:[1,242]},{18:$Vo1,178:243,179:244},{10:[1,246]},{10:[1,247]},{10:[1,248]},{48:[1,249]},{18:$Vv,41:250},{18:$Vv,41:251},o($Vl,[2,38]),o($Vl,[2,36]),{13:[1,252]},{13:[1,253]},{15:[1,254]},o($VP,[2,84]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:255,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:256,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{116:[1,257]},o($Vl,[2,37]),{15:$VR,20:[1,258],30:158,31:165,32:166,33:167,34:164,36:181,39:183,50:259,51:159,52:160,53:161,54:162,55:163,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,69:182,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:201,84:47,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61},o($Vp1,[2,50]),o($Vq1,[2,51]),o($Vq1,[2,53]),o($Vq1,[2,54]),o($Vq1,[2,55]),o($Vq1,[2,56]),o($Vq1,[2,57]),o($Vq1,[2,58]),o($Vq1,[2,59]),o($Vq1,[2,60]),o($Vq1,[2,61]),o($Vq1,[2,62]),o($Vq1,[2,63]),o($Vq1,[2,64]),o($Vq1,[2,65]),o($Vq1,[2,66]),o($Vq1,[2,67]),o($Vq1,[2,68]),o($Vq1,[2,69]),o($Vq1,[2,70]),o($Vq1,[2,71]),o($Vq1,[2,72]),{13:[1,260],72:[1,262],78:261,81:[1,263],82:[1,264],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[1,269]},{13:[1,270]},{13:[1,271]},{13:[1,272]},{15:[1,273]},{10:[1,274]},{10:[1,275]},{13:[1,276]},{10:$Vx,11:$Vy,13:[1,278],15:$Vz,18:$VA,66:128,76:277,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{13:[1,279]},{10:[1,280]},{10:[1,281]},{10:[1,282]},{18:$Vv,41:283},{10:[1,284]},{18:$Vv,41:285},{10:[1,286]},{15:[1,287]},{10:[1,288]},{10:[1,289]},{10:$Vl1,15:$Vp,47:290,70:291,72:[1,293],78:292,80:$Vm1,81:[1,294],82:[1,295],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,115:$Vu,186:$Vn1},{80:[1,296]},{72:[1,297]},{10:[1,298]},{18:[2,41]},{15:$Vw,39:94,45:299,124:$Vg,125:$Vh,126:$Vi,127:$Vj},o($V71,[2,43],{47:300,115:$Vu}),{15:[1,301]},{15:[1,302]},{10:$Vo,40:83},o($Vl,[2,40]),{71:[1,303]},{74:[1,304]},{75:[1,305]},{15:$Vw,30:307,39:183,116:[1,306],124:$Vg,125:$Vh,126:$Vi,127:$Vj},o($Vv1,[2,149]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,130:308,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,132:309,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,134:310,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vc1,[2,163]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,137:311,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,146:312,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,146:313,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vw1,[2,167]),o($Vw1,[2,168]),o($Vw1,[2,169]),o($Vw1,[2,170]),o($Vw1,[2,171]),o($Vw1,[2,172]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,147:$VD,149:314,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,147:$VD,149:315,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,79:$VB,83:134,147:$VD,149:316,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vj1,[2,181]),o($Vj1,[2,182]),o($Vk1,[2,184]),{12:[1,317]},o($Vk1,[2,196],{80:$Vx1,115:$VQ}),o($Vk1,[2,197],{80:$Vy1}),{15:$Vz1,167:320,168:321,169:$VA1,170:$VB1,171:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},{15:[1,332],187:331},{10:$Vx,11:$Vy,12:[1,333],15:$Vz,18:$VA,66:128,76:335,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,177:334,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:336,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:337,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:[1,339],66:338},{20:[1,340],48:[1,341]},o($VI1,[2,230]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:335,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,177:342,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:343,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:344,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:[1,345]},{15:[1,346]},o($Vl,[2,34]),o($Vl,[2,35]),o($VP,[2,82]),o($VP,[2,86]),{10:$Vl1,70:347},{13:[1,348]},{116:[1,349]},o($VJ1,[2,139]),o($Vp1,[2,49]),o($Vq1,[2,52]),o($Vq1,[2,73]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:350,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:351,73:$VO}),{13:[2,101]},{13:[2,102]},o($VK1,[2,112]),o($VK1,[2,113]),o($VK1,[2,114]),o($VK1,[2,115]),o($Vq1,[2,74]),o($Vq1,[2,75]),o($Vq1,[2,76]),o($Vq1,[2,77]),{13:$Vs,47:86,72:$Vt,115:$Vu},{15:[1,352]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:353,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vq1,[2,146]),{13:[1,354]},o($Vq1,[2,145]),o($Vq1,[2,147]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:355,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:356,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:357,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{104:[1,358]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:359,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{107:[1,360]},{109:[1,361]},{18:$Vv,41:362},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:363,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{11:[1,364]},{72:[1,366],78:365,80:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,115:$VQ},{13:[2,78],80:$Vy1},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:367,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:368,73:$VO}),{13:[2,99]},{13:[2,100]},{15:[1,369],66:370},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:371,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:[1,372]},o($V71,[2,48]),o($V71,[2,45],{115:$VQ}),o($V71,[2,44],{47:373,115:$Vu}),{10:$Vo,40:143},{10:[1,374]},{10:[1,375]},{10:[1,376]},{13:[1,377]},o($Vv1,[2,150]),o($V81,[2,157],{131:$V91}),o($Va1,[2,159],{133:$Vb1}),o($Vc1,[2,161]),o($Vc1,[2,165],{145:$Vd1,147:$Ve1}),o($Vf1,[2,173],{148:$Vg1,150:$Vh1}),o($Vf1,[2,174],{148:$Vg1,150:$Vh1}),o($Vi1,[2,176]),o($Vi1,[2,177]),o($Vi1,[2,179]),o($Vk1,[2,190]),{15:$Vz1,167:378,168:321,169:$VA1,170:$VB1,171:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},{15:$Vz1,167:379,168:321,169:$VA1,170:$VB1,171:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},o($VM1,[2,205],{80:$VN1}),o($VO1,[2,223]),o($VO1,[2,212],{47:381,70:382,10:$Vl1,115:$Vu}),{10:[1,383]},{10:[1,384]},{10:[1,385]},{10:[1,386]},{10:[1,387]},{10:[1,388]},{10:[1,389]},o($VO1,[2,222]),o([12,13,20,48,72,81,82,97,116,129,131,133,139,140,141,142,143,144,145,147,148,150,152],[2,239],{186:[1,390]}),o($VP1,[2,240]),o($VO1,[2,227]),{12:[1,391],48:$VQ1},o($VR1,[2,225]),{12:[1,393]},{12:[1,394]},o($Vk1,[2,208]),o($Vk1,[2,209],{47:395,70:396,10:$Vl1,80:$Vm1,115:$Vu}),o($Vk1,[2,229]),{18:$Vo1,179:397},{20:[1,398],48:$VQ1},{12:[1,399]},{12:[1,400]},{12:[1,401]},{12:[1,402]},{13:[2,110]},o($VP,[2,85]),o($VJ1,[2,140]),{13:[2,91]},{13:[2,92]},{48:[1,403]},{12:[1,404]},o($Vq1,[2,144]),{12:[1,405]},{12:[1,406]},{12:[1,407]},{10:[1,408]},{48:[1,409]},{10:[1,410]},{97:[1,411]},o($Vq1,[2,136]),{12:[1,412]},{48:[1,413]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:414,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:415,73:$VO}),{13:[2,87]},{13:[2,88]},{10:$Vl1,47:418,70:421,72:[1,417],78:416,80:$Vm1,81:[1,419],82:[1,420],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,115:$Vu},{72:[1,423],78:422,81:[1,424],82:[1,425],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[2,107]},{12:[1,426]},o($V71,[2,46],{115:$VQ}),{15:$Vw,39:427,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{15:$Vw,39:428,124:$Vg,125:$Vh,126:$Vi,127:$Vj},{15:$Vw,39:429,124:$Vg,125:$Vh,126:$Vi,127:$Vj},o($VS1,[2,148]),o($VM1,[2,206],{80:$VN1}),o($VM1,[2,207],{80:$VN1}),{15:$Vz1,168:430,169:$VA1,170:$VB1,171:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},o($VO1,[2,213],{115:$VQ}),o($VO1,[2,214]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:431,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:432,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{12:[1,433]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:434,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{12:[1,435]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:436,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:437,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:[1,438]},o($VO1,[2,228]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:439,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vk1,[2,233]),o($Vk1,[2,234]),o($Vk1,[2,210],{80:$Vx1,115:$VQ}),o($Vk1,[2,211],{80:$Vy1}),o($VI1,[2,231]),o($VI1,[2,232]),o($Vk1,[2,236]),o($Vk1,[2,237]),o($Vk1,[2,238]),o([13,72],[2,235]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:440,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{13:[1,441]},{18:[1,442]},{18:[1,443]},{18:$Vv,41:444},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:445,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:446,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:447,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{15:[1,448]},{18:$Vv,41:449},{15:[1,450]},{13:[2,89]},{13:[2,90]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:451,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:452,73:$VO}),{72:[1,454],78:453,80:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,115:$VQ},{13:[2,103]},{13:[2,104]},{80:$Vy1},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:455,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:456,73:$VO}),{13:[2,105]},{13:[2,106]},{13:[2,242]},{12:[1,457]},{12:[1,458]},{12:[1,459]},o($VO1,[2,224]),{12:[1,460]},{12:[1,461]},o($VO1,[2,217]),{12:[1,462]},o($VO1,[2,219]),{12:[1,463]},{12:[1,464]},o($VP1,[2,241]),o($VR1,[2,226]),{12:[1,466],48:[1,465]},o($Vq1,[2,143]),{20:[1,467],89:469,90:$VT1,91:468,92:$VU1},{20:[1,474],95:475,96:$VV1,98:473,99:$VW1,100:472},o($Vq1,[2,131]),{12:[1,478]},{12:[1,479]},{12:[1,480]},{13:[1,481]},o($Vq1,[2,137]),{12:[1,482]},{13:[2,93]},{13:[2,94]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:483,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($VK1,$VL1,{77:484,73:$VO}),{13:[2,95]},{13:[2,96]},{13:[1,485]},{13:[1,486]},{13:[1,487]},o($VO1,[2,215]),o($VO1,[2,216]),o($VO1,[2,218]),o($VO1,[2,220]),o($VO1,[2,221]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:488,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{13:[1,489]},{94:[1,490]},{20:[1,492],89:491,90:$VT1},{20:[1,493],91:494,92:$VU1},{18:$Vv,41:495},{18:$Vv,41:496},{20:[1,498],95:499,96:$VV1,98:497,99:$VW1},{20:[1,500]},o($Vq1,[2,130]),o($VX1,[2,125]),{97:[1,501]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:502,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{13:[1,503]},{18:$Vv,41:504},{13:[1,505]},{110:[1,506]},{13:[1,507]},{13:[2,97]},{13:[2,98]},o($VS1,[2,79]),o($VS1,[2,80]),o($VS1,[2,81]),{12:[1,508]},o($Vq1,[2,142]),o($Vq1,[2,118]),{20:[1,509]},{94:[1,510]},{94:[1,511]},{20:[1,512]},o([20,90],[2,117]),o([20,92],[2,116]),{20:[1,513]},o($Vq1,[2,128]),o($VX1,[2,126]),o($Vq1,[2,129]),{15:$VR,30:158,31:165,32:166,33:167,34:164,36:181,39:183,49:514,50:157,51:159,52:160,53:161,54:162,55:163,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,69:182,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:201,84:47,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61},{97:[1,515]},o($Vq1,[2,132]),o($Vq1,[2,133]),o($Vq1,[2,134]),{97:[1,516]},o($Vq1,[2,138]),{13:[1,517]},{94:[1,518]},o($Vq1,[2,120]),o($Vq1,[2,121]),{94:[1,519]},o($Vq1,[2,127]),{15:$VR,20:[2,124],30:158,31:165,32:166,33:167,34:164,36:181,39:183,50:259,51:159,52:160,53:161,54:162,55:163,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,69:182,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:201,84:47,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61},{15:$VR,30:158,31:165,32:166,33:167,34:164,36:181,39:183,49:520,50:157,51:159,52:160,53:161,54:162,55:163,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,69:182,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:201,84:47,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:521,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},o($Vq1,[2,141]),o($Vq1,[2,119]),o($Vq1,[2,122]),o($VX1,[2,123],{84:47,30:158,51:159,52:160,53:161,54:162,55:163,34:164,31:165,32:166,33:167,56:168,57:169,58:170,59:171,60:172,61:173,62:174,63:175,64:176,65:177,66:178,67:179,68:180,36:181,69:182,39:183,83:201,50:259,15:$VR,71:$Vc,74:$Vd,75:$Ve,79:$VS,93:$VT,101:$VU,102:$VV,103:$VW,105:$VX,106:$VY,108:$VZ,112:$V_,113:$V$,114:$V01,117:$V11,118:$V21,119:$V31,120:$V41,121:$V51,122:$Vf,124:$Vg,125:$Vh,126:$Vi,127:$Vj,182:$Vk,188:$V61}),{13:[1,522]},{111:[1,523]},{97:[1,524]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:128,76:525,79:$VB,83:134,128:105,130:106,132:107,134:108,135:$VC,136:110,137:111,146:112,147:$VD,149:113,151:114,153:115,154:117,155:$VE,156:$VF,157:$VG,158:$VH,159:$VI,160:125,161:126,162:129,163:130,164:131,165:132,166:133,180:$VJ,181:$VK,183:$VL,184:$VM,185:$VN},{12:[1,526]},{18:$Vv,41:527},o($Vq1,[2,135])],
defaultActions: {9:[2,1],11:[2,2],92:[2,42],104:[2,108],203:[2,41],263:[2,101],264:[2,102],294:[2,99],295:[2,100],347:[2,110],350:[2,91],351:[2,92],367:[2,87],368:[2,88],371:[2,107],414:[2,89],415:[2,90],419:[2,103],420:[2,104],424:[2,105],425:[2,106],426:[2,242],451:[2,93],452:[2,94],455:[2,95],456:[2,96],483:[2,97],484:[2,98]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
	var listaPrueba =[];
	var Clase = require("./Arbol/Clase");
	var arreglin = require("./Arbol/arreglo");
    var Atributo = require("./Arbol/Atributo");
    var Archivo = require("./Arbol/Archivo");
    
    var  Acceso = require("./Arbol/Expresion/Acceso");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica");
    var Booleano = require("./Arbol/Expresion/Booleano");
    var Cadena = require("./Arbol/Expresion/Cadena");
    var Caracter = require("./Arbol/Expresion/Caracter");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero");
    var Decimal = require("./Arbol/Expresion/Decimal");
    var Entero = require("./Arbol/Expresion/Entero");
    var Este = require("./Arbol/Expresion/Este");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa");
    var Instancia = require("./Arbol/Expresion/Instancia");
    var  Llamada = require("./Arbol/Expresion/Llamada");
    var  Logica = require("./Arbol/Expresion/Logica");
    var  Negativo = require("./Arbol/Expresion/Negativo");
    var  Not_logica= require("./Arbol/Expresion/Not_logica");
    var  Nulo= require("./Arbol/Expresion/Nulo");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo");
    var  Relacional= require("./Arbol/Expresion/Relacional");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria");
    var  t_id= require("./Arbol/Expresion/t_id");
    var  Unario= require("./Arbol/Expresion/Unario");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero");


    var  Constructor = require("./Arbol/Funciones/Constructor");
    var  Funcion = require("./Arbol/Funciones/Funcion");
    var  Parametro = require("./Arbol/Funciones/Parametro");
    var  Principal = require("./Arbol/Funciones/Principal");

    var Asignacion = require("./Arbol/Sentencias/Asignacion");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla");
    var  Caso= require("./Arbol/Sentencias/Caso");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X");
    var Concatenar = require("./Arbol/Sentencias/Concatenar");
    var  Contador= require("./Arbol/Sentencias/Contador");
    var Continuar = require("./Arbol/Sentencias/Continuar");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar");
    var  Estructura= require("./Arbol/Sentencias/Estructura");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras");
    var  Importar= require("./Arbol/Sentencias/Importar");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir");
    var  LeerTeclado= require("./Arbol/Sentencias/LeerTeclado");
    var  Puntero= require("./Arbol/Sentencias/Puntero");
    var  Repetir= require("./Arbol/Sentencias/Repetir");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras");
    var  Retorno= require("./Arbol/Sentencias/Retorno");
    var  Romper= require("./Arbol/Sentencias/Romper");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona");
    var  Si= require("./Arbol/Sentencias/Si");

       var errores = require("./Errores/listaErrores");

    function errorSintactico(valor, linea){
        var er = new errores();
        er.insertarErrorPos("Sintactico", "Ha ocurrido un error "+ valor,linea);
    }

    function errosLexico (valor){
        var er= new errores();
        er.insertarErrorPos("Lexico", "Ha ocurrido un error "+valor);
    }


	 
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 88
break;
case 4:return 150
break;
case 5:return 182
break;
case 6:return 183
break;
case 7:return 184
break;
case 8:return 185
break;
case 9:return 186
break;
case 10:return 188
break;
case 11:return 94
break;
case 12:return 176
break;
case 13:return 102
break;
case 14:return 103
break;
case 15:return 104
break;
case 16:return 105
break;
case 17:return 106
break;
case 18:return 107
break;
case 19:return 108
break;
case 20:return 109
break;
case 21:return 110
break;
case 22:return 111
break;
case 23:return 112
break;
case 24:return 113
break;
case 25:return 114
break;
case 26:return 101
break;
case 27:return 96
break;
case 28:return 99
break;
case 29:return 90
break;
case 30:return 92
break;
case 31:return 93
break;
case 32:return 71
break;
case 33:return 74
break;
case 34:return 75
break;
case 35:return 169
break;
case 36:return 174
break;
case 37:return 175
break;
case 38:return 172
break;
case 39:return 173
break;
case 40:return 171
break;
case 41:return 170
break;
case 42:return 9
break;
case 43:return 37
break;
case 44:return 38
break;
case 45:return 117
break;
case 46:return 48
break;
case 47:return 181
break;
case 48:return 180
break;
case 49:return 118
break;
case 50:return 119
break;
case 51:return 120
break;
case 52:return 43
break;
case 53:return 73
break;
case 54:return 27
break;
case 55:return 28
break;
case 56:return 29
break;
case 57:return 121
break;
case 58:return 159
break;
case 59:return 159
break;
case 60:'nulo'
break;
case 61:return 141
break;
case 62:return 142
break;
case 63:return 144
break;
case 64:return 143
break;
case 65:return 139
break;
case 66:return 140
break;
case 67:return 17
break;
case 68:return 14
break;
case 69:return 79
break;
case 70:return 46
break;
case 71:return 42
break;
case 72:return 158
break;
case 73:return 158 
break;
case 74:return 122
break;
case 75:return 80
break;
case 76:return 124
break;
case 77:return 125
break;
case 78:return 127
break;
case 79:return 126
break;
case 80:return 85
break;
case 81:return 86
break;
case 82:return 87
break;
case 83:return 72
break;
case 84:return 81
break;
case 85:return 82
break;
case 86:return 148
break;
case 87:return 147
break;
case 88:return 145
break;
case 89:return 152
break;
case 90:return 10
break;
case 91:return 12
break;
case 92:return 18
break;
case 93:return 20
break;
case 94:return 115
break;
case 95:return 116
break;
case 96:return 129
break;
case 97:return 133
break;
case 98:return 131
break;
case 99:return 135
break;
case 100:return 13
break;
case 101:return 97
break;
case 102:return 11;
break;
case 103:return 15
break;
case 104:return 156
break;
case 105:return 155
break;
case 106:return 157
break;
case 107:return 5
break;
case 108:errosLexico(yy_.yytext);   return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:fin-si\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:desapilar\b)/i,/^(?:apilar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}