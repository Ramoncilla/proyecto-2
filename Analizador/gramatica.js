/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[1,10],$V3=[5,40,45],$V4=[5,33],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[13,17,19,21,23,26,35],$Vc=[1,43],$Vd=[1,46],$Ve=[1,47],$Vf=[1,48],$Vg=[1,62],$Vh=[1,63],$Vi=[1,64],$Vj=[1,59],$Vk=[1,100],$Vl=[1,101],$Vm=[1,102],$Vn=[1,113],$Vo=[1,103],$Vp=[1,104],$Vq=[1,105],$Vr=[1,106],$Vs=[1,107],$Vt=[1,108],$Vu=[1,109],$Vv=[1,110],$Vw=[1,111],$Vx=[1,112],$Vy=[1,94],$Vz=[1,95],$VA=[1,97],$VB=[1,96],$VC=[1,98],$VD=[1,99],$VE=[1,65],$VF=[1,66],$VG=[1,67],$VH=[1,68],$VI=[1,117],$VJ=[1,115],$VK=[1,135],$VL=[1,133],$VM=[1,136],$VN=[1,137],$VO=[8,9,10,15],$VP=[1,148],$VQ=[1,151],$VR=[1,150],$VS=[2,179],$VT=[1,159],$VU=[1,160],$VV=[1,161],$VW=[1,155],$VX=[1,165],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,164],$V01=[1,162],$V11=[8,15,97,100,101,107,119,121,124,126,127,128,130,131,133,137,138,139,142,143,144,145,146,147,149,150,151,152,207,213],$V21=[8,69,97,100,101,149,150,151,152,207],$V31=[8,43,73,75],$V41=[1,205],$V51=[1,196],$V61=[1,197],$V71=[1,214],$V81=[1,200],$V91=[1,201],$Va1=[1,213],$Vb1=[1,187],$Vc1=[1,194],$Vd1=[1,198],$Ve1=[1,199],$Vf1=[1,202],$Vg1=[1,203],$Vh1=[1,204],$Vi1=[1,215],$Vj1=[1,216],$Vk1=[1,217],$Vl1=[1,227],$Vm1=[8,15,54,55,56,62,64,69,70,97,100,101,147,149,150,151,152,207],$Vn1=[1,251],$Vo1=[1,255],$Vp1=[1,261],$Vq1=[1,260],$Vr1=[1,267],$Vs1=[1,268],$Vt1=[1,269],$Vu1=[1,270],$Vv1=[1,271],$Vw1=[1,272],$Vx1=[1,273],$Vy1=[1,274],$Vz1=[1,275],$VA1=[1,279],$VB1=[1,276],$VC1=[1,278],$VD1=[1,280],$VE1=[8,9,10,14,41,42,107,160,172,180,181,182,183,184,208,209,210],$VF1=[2,135],$VG1=[1,283],$VH1=[15,43,44,75,122,141,154],$VI1=[1,300],$VJ1=[15,43,44,75,122,141,154,156],$VK1=[1,301],$VL1=[15,43,44,75,122,141,154,156,158],$VM1=[1,304],$VN1=[1,305],$VO1=[15,43,44,75,122,141,154,156,158,164,165,166,167,168,169,170,172],$VP1=[1,312],$VQ1=[1,313],$VR1=[15,43,44,75,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175],$VS1=[15,43,44,75,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$VT1=[15,43,44,75,105,106,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$VU1=[1,324],$VV1=[1,350],$VW1=[8,15,54,55,56,62,64,69,70,97,100,101,107,119,121,124,126,127,128,130,131,133,137,138,139,141,142,143,144,145,146,147,149,150,151,152,207,213],$VX1=[15,43,44,75,98,105,106,111,112,113,114,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$VY1=[1,367],$VZ1=[15,43,44,75,98,105,106,108,111,112,113,114,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$V_1=[15,43,44,75,98,105,106,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177,211],$V$1=[2,68],$V02=[1,386],$V12=[43,75],$V22=[15,43,75],$V32=[8,9,10,14,41,42,107,172,180,181,182,183,184,208,209,210],$V42=[15,75],$V52=[8,15,54,55,56,62,64,69,70,97,100,101,107,116,118,119,121,124,126,127,128,129,130,131,132,133,137,138,139,142,143,144,145,146,147,149,150,151,152,207,213],$V62=[15,43,44,75,98,105,106,108,111,112,113,114,122,140,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$V72=[8,141,149,150,151,152],$V82=[1,505],$V92=[1,504],$Va2=[1,511],$Vb2=[1,510],$Vc2=[8,15,54,55,56,62,64,69,70,97,100,101,107,119,121,124,126,127,128,130,131,133,137,138,139,142,143,144,145,146,147,149,150,151,152,207,213],$Vd2=[15,121,124];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"LECCIONES":6,"VAL_TERM_TITULO":7,"id":8,"entero":9,"decimal":10,"TERM_TITULO":11,"TITULO":12,"titulo":13,"abreLlave":14,"cierraLlave":15,"DESCRIPCION":16,"descripcion":17,"TAREA":18,"tarea":19,"RESULTADO":20,"resultado":21,"TIPO_LECCION":22,"tipo":23,"tipoLeccion":24,"EJEMPLO":25,"ejemplo":26,"FUNCION":27,"EJEMPLO2":28,"SENTENCIAS":29,"gcoach":30,"acoach":31,"LECCION":32,"abreLeccion":33,"VALORES_LECCION":34,"cierraLeccion":35,"VALOR_LECCION":36,"SENT_ARCHIVO":37,"IMPORTAR":38,"CLASE":39,"importar":40,"abrePar":41,"cadena":42,"cierraPar":43,"puntoComa":44,"clase":45,"CUERPO_CLASE":46,"hereda_de":47,"SENTENCIAS_CLASE":48,"SENTENCIA_CLASE":49,"ATRIBUTO":50,"FUNCION_SOBRE":51,"PRINCIPAL":52,"VISIBILIDAD":53,"publico":54,"protegido":55,"privado":56,"DECLARACION":57,"DECLA_LISTA":58,"DECLA_PILA":59,"DECLA_COLA":60,"ESTRUCTURA":61,"VISIBLIDAD":62,"DECLA_PUNTERO":63,"arroba":64,"sobreescribir":65,"TIPO_DECLARACION":66,"LISTA_PARAMETROS":67,"CUERPO_FUNCION":68,"vacio":69,"principal":70,"PARAMETROS":71,"PARAMETRO":72,"puntero":73,"COL_ARREGLO":74,"coma":75,"SENTENCIA":76,"CONCATENAR":77,"IMPRIMIR":78,"ROMPER":79,"RETORNO":80,"CONTINUAR":81,"SI":82,"SWITCH":83,"REPETIR_MIENTRAS":84,"HACER_MIENTRAS":85,"CICLO_X":86,"REPETIR":87,"REPETIR_CONTANDO":88,"ENCICLAR":89,"CONTADOR":90,"LEER_TECLADO":91,"ACCESO":92,"ASIGNACION":93,"DESTRUIR_PUNTERO":94,"LLAMADA":95,"PARAMETROS_LLAMADA":96,"Lista":97,"igual":98,"nuevo":99,"Pila":100,"Cola":101,"EXPRESION":102,"INSTANCIA":103,"SIMB_IGUAL":104,"masMas":105,"menosMenos":106,"este":107,"punto":108,"VALOR_PUNTERO":109,"CREAR_PUNTERO":110,"masIgual":111,"menosIgual":112,"porIgual":113,"divIgual":114,"SI_FALSO":115,"Es_falso":116,"SI_VERDADERO":117,"Es_verdadero":118,"Si":119,"CASO":120,"Es_igual_a":121,"dosPuntos":122,"DEFECTO":123,"defecto":124,"LISTA_CASOS":125,"Evaluar_si":126,"Repetir_Mientras":127,"hacer":128,"mientras":129,"Ciclo_doble_condicion":130,"Repetir":131,"hasta_que":132,"Repetir_contando":133,"variable":134,"desde":135,"hasta":136,"Enciclar":137,"Contador":138,"Leer_Teclado":139,"abreCor":140,"cierraCor":141,"concatenar":142,"imprimir":143,"retorno":144,"romper":145,"continuar":146,"estructura":147,"LISTA_DECLARACIONES":148,"t_entero":149,"t_caracter":150,"t_decimal":151,"t_booleano":152,"LOGICA":153,"or":154,"XOR":155,"xor":156,"AND":157,"and":158,"NOT":159,"not":160,"REL":161,"ARITMETICA":162,"SIMB_REL":163,"menor":164,"mayor":165,"menorIgual":166,"mayorIgual":167,"distintoA":168,"igualIgual":169,"mas":170,"MUL":171,"menos":172,"por":173,"POT":174,"division":175,"UNARIO":176,"potencia":177,"NEG":178,"VALOR":179,"caracter":180,"booleano":181,"nulo":182,"CONVERTIR_CADENA":183,"CONVERTIR_ENTERO":184,"ESTE":185,"CUERPO_ARREGLO":186,"OBTENER_DIRECCION":187,"RESERVAR_MEMORIA":188,"OBTENER_TAMANIO":189,"ATRI":190,"ATRI_":191,"insertar":192,"Apilar":193,"Desapilar":194,"Encolar":195,"Desencolar":196,"obtener":197,"buscar":198,"tamanio":199,"LISTA_EXPRESIONES":200,"LISTA_CUERPO_ARREGLO":201,"ELEMENTO_FILA":202,"CONVERTIR_A_CADENA":203,"convertirACadena":204,"CONVERTIR_A_ENTERO":205,"convertirAEntero":206,"crearPuntero":207,"obtenerDireccion":208,"reservarMemoria":209,"consultarTamanio":210,"flecha":211,"COMPLE_PUNTERO":212,"destruirPuntero":213,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"id",9:"entero",10:"decimal",13:"titulo",14:"abreLlave",15:"cierraLlave",17:"descripcion",19:"tarea",21:"resultado",23:"tipo",26:"ejemplo",30:"gcoach",31:"acoach",33:"abreLeccion",35:"cierraLeccion",40:"importar",41:"abrePar",42:"cadena",43:"cierraPar",44:"puntoComa",45:"clase",47:"hereda_de",54:"publico",55:"protegido",56:"privado",62:"VISIBLIDAD",64:"arroba",65:"sobreescribir",69:"vacio",70:"principal",73:"puntero",75:"coma",97:"Lista",98:"igual",99:"nuevo",100:"Pila",101:"Cola",105:"masMas",106:"menosMenos",107:"este",108:"punto",111:"masIgual",112:"menosIgual",113:"porIgual",114:"divIgual",116:"Es_falso",118:"Es_verdadero",119:"Si",121:"Es_igual_a",122:"dosPuntos",124:"defecto",126:"Evaluar_si",127:"Repetir_Mientras",128:"hacer",129:"mientras",130:"Ciclo_doble_condicion",131:"Repetir",132:"hasta_que",133:"Repetir_contando",134:"variable",135:"desde",136:"hasta",137:"Enciclar",138:"Contador",139:"Leer_Teclado",140:"abreCor",141:"cierraCor",142:"concatenar",143:"imprimir",144:"retorno",145:"romper",146:"continuar",147:"estructura",149:"t_entero",150:"t_caracter",151:"t_decimal",152:"t_booleano",154:"or",156:"xor",158:"and",160:"not",164:"menor",165:"mayor",166:"menorIgual",167:"mayorIgual",168:"distintoA",169:"igualIgual",170:"mas",172:"menos",173:"por",175:"division",177:"potencia",180:"caracter",181:"booleano",182:"nulo",183:"CONVERTIR_CADENA",184:"CONVERTIR_ENTERO",192:"insertar",193:"Apilar",194:"Desapilar",195:"Encolar",196:"Desencolar",197:"obtener",198:"buscar",199:"tamanio",204:"convertirACadena",206:"convertirAEntero",207:"crearPuntero",208:"obtenerDireccion",209:"reservarMemoria",210:"consultarTamanio",211:"flecha",213:"destruirPuntero"},
productions_: [0,[3,2],[3,2],[7,1],[7,1],[7,1],[11,2],[11,1],[12,4],[16,4],[18,4],[20,4],[22,4],[25,4],[28,4],[24,1],[24,1],[6,1],[6,2],[32,3],[34,1],[34,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[4,1],[4,2],[37,1],[37,1],[38,5],[39,3],[39,5],[46,3],[46,2],[48,1],[48,2],[49,1],[49,1],[49,1],[49,1],[53,1],[53,1],[53,1],[50,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[50,2],[50,2],[50,3],[50,2],[51,3],[27,5],[27,5],[27,4],[27,4],[27,4],[27,3],[52,4],[67,3],[67,2],[72,2],[72,3],[72,3],[72,4],[71,1],[71,3],[68,3],[68,2],[29,1],[29,2],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,2],[76,2],[76,2],[76,2],[76,2],[95,2],[58,9],[59,9],[60,9],[57,5],[57,3],[57,4],[57,6],[57,5],[93,3],[93,3],[93,3],[93,3],[93,2],[93,2],[93,2],[93,2],[93,4],[93,5],[93,5],[93,5],[93,5],[93,4],[93,4],[93,4],[93,4],[93,6],[93,3],[63,3],[63,1],[103,3],[104,1],[104,1],[104,1],[104,1],[104,1],[115,2],[117,2],[82,6],[82,8],[82,7],[82,7],[82,8],[120,4],[123,3],[125,1],[125,2],[83,8],[83,7],[83,7],[83,6],[84,5],[85,7],[86,7],[87,7],[88,15],[89,3],[90,5],[91,7],[74,3],[74,4],[77,9],[77,7],[78,5],[80,3],[80,2],[79,2],[81,2],[61,6],[148,1],[148,2],[66,1],[66,1],[66,1],[66,1],[66,1],[102,1],[153,3],[153,1],[155,3],[155,1],[157,3],[157,1],[159,2],[159,1],[161,3],[161,1],[163,1],[163,1],[163,1],[163,1],[163,1],[163,1],[162,3],[162,3],[162,1],[171,3],[171,3],[171,1],[174,3],[174,1],[176,2],[176,2],[176,1],[178,2],[178,1],[179,1],[179,1],[179,1],[179,1],[179,3],[179,1],[179,1],[179,1],[179,1],[179,1],[179,2],[179,2],[179,1],[179,1],[179,1],[179,1],[179,1],[179,1],[179,1],[92,3],[92,4],[92,4],[185,3],[185,3],[185,4],[185,4],[191,1],[191,2],[191,2],[191,4],[191,4],[191,3],[191,4],[191,3],[191,4],[191,4],[191,1],[190,1],[190,3],[200,1],[200,3],[96,2],[96,3],[186,3],[201,1],[201,3],[202,3],[203,5],[205,5],[110,6],[187,4],[188,4],[189,4],[109,3],[212,1],[212,3],[94,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

			return $$[$0-1];
		
break;
case 3: case 4: case 5: case 7: case 15: case 16: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 31: case 32: case 40: case 41: case 42: case 43: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 179: case 180: case 182: case 184: case 186: case 188: case 190: case 199: case 202: case 204: case 207: case 209: case 218: case 222: case 223: case 224: case 225: case 226: case 227: case 228:
this.$=$$[$0];
break;
case 6:
this.$=$$[$0-1]+" "+$$[$0];
break;
case 8:
this.$ = new tituloLeccion($$[$0-1]);
break;
case 9:
this.$ = new descripcionLeccion($$[$0-1]);
break;
case 10:
this.$ = new tareaLeccion($$[$0-1]); 
break;
case 11:
this.$ = new resultadoLeccion($$[$0-1]); 
break;
case 12:
this.$ = new tipoLeccion($$[$0-1]); 
break;
case 13: case 14:
this.$ = new ejemploLeccion($$[$0-1]); 
break;
case 17:

					this.$ =new listaLecciones(); 
					this.$.saveLesson($$[$0]);
				
break;
case 18:

				this.$= $$[$0-1];
				this.$.saveLesson($$[$0]);
			
break;
case 19: case 36: case 75: case 256:
this.$= $$[$0-1];
break;
case 20:

					this.$ = new Leccion(); 
					this.$.insertarValor($$[$0]);
				
break;
case 21:

				this.$ = $$[$0-1];
				this.$.insertarValor($$[$0]);
			
break;
case 29:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 30: case 78:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 33:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 34:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 37: case 68:
this.$=[];
break;
case 38:

			
			this.$=[];
			this.$.push($$[$0]);
				/*for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
			
		
break;
case 39:

			this.$=$$[$0-1];
			this.$.push($$[$0]);
			

		/*	for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
		
break;
case 44:
this.$="publico";
break;
case 45:
this.$="protegido";
break;
case 46:
this.$="privado";
break;
case 47: case 53: case 54: case 55: case 56:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 48: case 49: case 50: case 51: case 52:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 57:

			var a = new Atributo();
			a.setValores($$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 58:

			var a = new Atributo();
			a.setValores("publico",$$[$0-1]);
			this.$=a;
		
break;
case 59:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 60:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 61:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 62:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 63:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 64:

			var a = new Funcion();
			a.setValores($$[$0-3],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			a.cambiarAConstructor();
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 65:

			var a = new Funcion();
			a.cambiarAConstructor();
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 66:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 67: case 99: case 100: case 101: case 102: case 103: case 253:
this.$=$$[$0-1];
break;
case 69:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-1],1,idA);
			this.$=a;
		
break;
case 70:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],2,idA);
			this.$=a;
		
break;
case 71:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 72:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 73: case 77: case 264:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 74: case 265:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 76: case 251:
this.$= [];
break;
case 104: case 221:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i;
break;
case 105:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 106:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 107:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 108:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 109:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 110:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 111:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var idA= new t_id();
		idA.setValorId($$[$0-4]);
		var asigna = new AsignacionArreglo(); asigna.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],17);	 //setValores = function(elemento,dimensiones,igual,valor,tipo)
		//console.dir(asigna);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 112:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],2);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,a,3);
		this.$= asigDec;
	
break;
case 113:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 114:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 115:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 116:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 117:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",5); this.$=a; 
break;
case 118:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",5); this.$=a; 
break;
case 119:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 120:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 121:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 122:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 123:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 124:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 125:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 126:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 127:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 128:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 129:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 130:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 131:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 132:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 133:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 134:

		var nodoI = new Instancia();
		nodoI.setValores($$[$0-1],$$[$0]);
		this.$ = nodoI;
	
break;
case 135:
this.$="=";
break;
case 136:
this.$="+=";
break;
case 137:
this.$="-=";
break;
case 138:
this.$="*=";
break;
case 139:
this.$="/=";
break;
case 140: case 141:
this.$= $$[$0];
break;
case 142:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 143:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 144:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 145:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 146:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 147:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 148:
this.$= $$[$0]
break;
case 149:

			
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 150:

			
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 151:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 152:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 153:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 154:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 155:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 156:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 157:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 158:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 159:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 160:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 161:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 162:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 163:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 164:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 165:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 166:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 167:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 168:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 169:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 170:
 this.$ = new Romper();
break;
case 171:
this.$ = new Continuar();
break;
case 172:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 173:
var a = []; a.push($$[$0]); this.$= a;
break;
case 174:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 175:
this.$="entero";
break;
case 176:
this.$="caracter";
break;
case 177:
this.$="decimal";
break;
case 178:
this.$="booleano";
break;
case 181:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 183:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 185:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 187:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 189:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 191:
this.$="<";
break;
case 192:
this.$=">";
break;
case 193:
this.$="<=";
break;
case 194:
this.$=">=";
break;
case 195:
this.$="!=";
break;
case 196:
this.$="==";
break;
case 197:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 198:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 200:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 201:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 203:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 205:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 206:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 208:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 210:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 211:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 212:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 213:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 214:
 this.$=$$[$0-1];
break;
case 215:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 216:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 217:
this.$=S1;
break;
case 219:
 var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 220:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 229:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 230:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 231:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 232:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 233:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 234:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 235:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 236:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 237:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 238:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 239: case 240: case 242: case 244: case 245:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 241: case 243:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], null);
			this.$=a;
		
break;
case 246:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 247:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 248:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 249:
 var arreglo = []; var g= arreglo.push($$[$0]); this.$= arreglo;
break;
case 250:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]);  this.$= arreglo;
break;
case 252:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 254:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 255:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 257:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 258:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
case 259:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 260:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 261:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 262:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 263:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 266:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{3:1,4:2,6:3,32:5,33:$V0,37:4,38:6,39:7,40:$V1,45:$V2},{1:[3]},{5:[1,11],37:12,38:6,39:7,40:$V1,45:$V2},{5:[1,13],32:14,33:$V0},o($V3,[2,29]),o($V4,[2,17]),o($V3,[2,31]),o($V3,[2,32]),{12:17,13:$V5,16:18,17:$V6,18:19,19:$V7,20:20,21:$V8,22:21,23:$V9,25:22,26:$Va,28:23,34:15,36:16},{41:[1,30]},{8:[1,31]},{1:[2,1]},o($V3,[2,30]),{1:[2,2]},o($V4,[2,18]),{12:17,13:$V5,16:18,17:$V6,18:19,19:$V7,20:20,21:$V8,22:21,23:$V9,25:22,26:$Va,28:23,35:[1,32],36:33},o($Vb,[2,20]),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),o($Vb,[2,28]),{14:[1,34]},{14:[1,35]},{14:[1,36]},{14:[1,37]},{14:[1,38]},{14:[1,39]},{42:[1,40]},{14:$Vc,46:41,47:[1,42]},o($V4,[2,19]),o($Vb,[2,21]),{7:45,8:$Vd,9:$Ve,10:$Vf,11:44},{7:45,8:$Vd,9:$Ve,10:$Vf,11:49},{7:45,8:$Vd,9:$Ve,10:$Vf,11:50},{7:45,8:$Vd,9:$Ve,10:$Vf,11:51},{24:52,30:[1,53],31:[1,54]},{8:[1,60],27:55,29:56,53:57,54:$Vg,55:$Vh,56:$Vi,57:69,58:76,59:77,60:78,61:75,63:92,66:58,69:$Vj,76:61,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{43:[1,118]},o($V3,[2,34]),{8:[1,119]},{8:$VK,15:[1,121],27:124,48:120,49:122,50:123,51:125,52:126,53:127,54:$Vg,55:$Vh,56:$Vi,57:128,58:129,59:130,60:131,61:132,62:$VL,63:134,64:$VM,66:58,69:$Vj,70:$VN,97:$Vk,100:$Vl,101:$Vm,110:116,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI},{7:139,8:$Vd,9:$Ve,10:$Vf,15:[1,138]},o($VO,[2,7]),o($VO,[2,3]),o($VO,[2,4]),o($VO,[2,5]),{7:139,8:$Vd,9:$Ve,10:$Vf,15:[1,140]},{7:139,8:$Vd,9:$Ve,10:$Vf,15:[1,141]},{7:139,8:$Vd,9:$Ve,10:$Vf,15:[1,142]},{15:[1,143]},{15:[2,15]},{15:[2,16]},{15:[1,144]},{8:$VP,15:[1,145],57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:146,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{8:$VQ,66:149,69:$VR,149:$VE,150:$VF,151:$VG,152:$VH},{8:[1,152]},{8:[1,153]},{8:$VS,41:[1,163],67:154,74:156,96:157,98:$VT,104:158,105:$VU,106:$VV,108:$VW,111:$VX,112:$VY,113:$VZ,114:$V_,140:$V$,211:$V01},o($V11,[2,77]),o($V21,[2,44]),o($V21,[2,45]),o($V21,[2,46]),o($V31,[2,175]),o($V31,[2,176]),o($V31,[2,177]),o($V31,[2,178]),o($V11,[2,79]),o($V11,[2,80]),o($V11,[2,81]),o($V11,[2,82]),o($V11,[2,83]),o($V11,[2,84]),o($V11,[2,85]),o($V11,[2,86]),o($V11,[2,87]),o($V11,[2,88]),o($V11,[2,89]),o($V11,[2,90]),o($V11,[2,91]),o($V11,[2,92]),o($V11,[2,93]),o($V11,[2,94]),o($V11,[2,95]),o($V11,[2,96]),o($V11,[2,97]),o($V11,[2,98]),{44:[1,169],98:[1,171],104:170,105:[1,172],106:[1,173],111:$VX,112:$VY,113:$VZ,114:$V_},{44:[1,174]},{44:[1,175]},{44:[1,176]},{44:[1,177]},{41:[1,178]},{41:[1,179]},{44:[1,180]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,44:[1,182],92:206,102:181,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{44:[1,218]},{8:[1,219]},{8:[1,220]},{8:[1,221]},{8:[1,222]},{41:[1,223]},{41:[1,224]},{41:[1,225]},{14:$Vl1,68:226},{41:[1,228]},{14:$Vl1,68:229},{41:[1,230]},{8:[1,231]},{41:[1,232]},{41:[1,233]},{108:[1,234]},{98:[1,235]},{41:[1,236]},{44:[2,133],98:[1,237]},{41:[1,238]},{44:[1,239]},{14:$Vc,46:240},{8:$VK,15:[1,241],27:124,49:242,50:123,51:125,52:126,53:127,54:$Vg,55:$Vh,56:$Vi,57:128,58:129,59:130,60:131,61:132,62:$VL,63:134,64:$VM,66:58,69:$Vj,70:$VN,97:$Vk,100:$Vl,101:$Vm,110:116,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI},o($V3,[2,37]),o($Vm1,[2,38]),o($Vm1,[2,40]),o($Vm1,[2,41]),o($Vm1,[2,42]),o($Vm1,[2,43]),{8:$VQ,57:243,58:244,59:246,60:245,63:247,66:248,69:$VR,97:$Vk,100:$Vl,101:$Vm,110:116,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI},o($Vm1,[2,48]),o($Vm1,[2,49]),o($Vm1,[2,50]),o($Vm1,[2,51]),o($Vm1,[2,52]),{61:249,147:$VD},{44:[1,250]},{8:$VS,41:$Vn1,67:154},{65:[1,252]},{41:[1,253]},o($Vb,[2,8]),o($VO,[2,6]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($V11,[2,78]),{8:[1,254]},{8:$VS,41:$Vo1,74:156,96:157,98:$VT,104:158,105:$VU,106:$VV,108:$VW,111:$VX,112:$VY,113:$VZ,114:$V_,140:$V$,211:$V01},{8:[1,256]},{8:[1,257]},{8:$VS,41:$Vn1,67:258},{41:$Vn1,44:$Vp1,67:259,74:262,98:$Vq1,140:$V$},{41:$Vn1,67:263},{14:$Vl1,68:264},{8:$Vr1,190:265,191:266,192:$Vs1,193:$Vt1,194:$Vu1,195:$Vv1,196:$Vw1,197:$Vx1,198:$Vy1,199:$Vz1},{98:$VA1,104:277,108:$VB1,111:$VX,112:$VY,113:$VZ,114:$V_,140:$VC1},{44:[2,104],108:$VD1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:281,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,$VF1,{103:282,99:$VG1}),{44:[2,117]},{44:[2,118]},{8:[1,285],212:284},{8:[1,292],9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,43:[1,287],66:291,71:286,72:289,92:206,102:290,107:$Va1,109:212,149:$VE,150:$VF,151:$VG,152:$VH,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,200:288,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:293,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,[2,136]),o($VE1,[2,137]),o($VE1,[2,138]),o($VE1,[2,139]),o($V11,[2,99]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:294,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,$VF1,{103:295,99:$VG1}),{44:[2,119]},{44:[2,120]},o($V11,[2,100]),o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,103]),{8:[1,296]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:297,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($V11,[2,170]),{44:[1,298]},o($V11,[2,169]),o([15,43,44,75,122,141],[2,180],{154:[1,299]}),o($VH1,[2,182],{156:$VI1}),o($VJ1,[2,184],{158:$VK1}),o($VL1,[2,186]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,161:302,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VL1,[2,188]),o($VL1,[2,190],{163:303,164:[1,306],165:[1,307],166:[1,308],167:[1,309],168:[1,310],169:[1,311],170:$VM1,172:$VN1}),o($VO1,[2,199],{173:$VP1,175:$VQ1}),o($VR1,[2,202]),o($VR1,[2,204],{177:[1,314]}),o($VS1,[2,207],{105:[1,315],106:[1,316]}),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,179:317,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VT1,[2,209]),o($VT1,[2,210]),o($VT1,[2,211]),o($VT1,[2,212]),o($VT1,[2,213]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:318,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VT1,[2,215]),o($VT1,[2,216]),o($VT1,[2,217]),o($VT1,[2,218]),o($VT1,[2,219],{74:319,96:320,41:$Vo1,108:$VW,140:$V$,211:$V01}),o($VT1,[2,222]),o($VT1,[2,223]),o($VT1,[2,224]),o($VT1,[2,225]),o($VT1,[2,226]),o($VT1,[2,227]),o($VT1,[2,228]),{108:[1,321]},{14:$VU1,201:322,202:323},{41:[1,325]},{41:[1,326]},{41:[1,327]},o($V11,[2,171]),{140:[1,328]},{98:[1,329]},{98:[1,330]},{98:[1,331]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:332,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:333,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:334,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{129:[1,335]},{8:$VP,15:[1,337],29:336,57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:61,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:338,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{132:[1,339]},{134:[1,340]},{14:$Vl1,68:341},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:342,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:343,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:[1,344],92:345},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:346,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:[1,347]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:348,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$VV1,66:349,149:$VE,150:$VF,151:$VG,152:$VH},o($V3,[2,33]),o($V3,[2,35]),o($V3,[2,36]),o($Vm1,[2,39]),o($Vm1,[2,47]),o($Vm1,[2,53]),o($Vm1,[2,54]),o($Vm1,[2,55]),{44:[1,351]},{8:[1,352]},o($Vm1,[2,56]),o($Vm1,[2,58]),{8:$VV1,43:[1,353],66:291,71:286,72:289,149:$VE,150:$VF,151:$VG,152:$VH},{8:$VK,27:354,53:57,54:$Vg,55:$Vh,56:$Vi,66:355,69:$Vj,149:$VE,150:$VF,151:$VG,152:$VH},{43:[1,356]},{44:$Vp1,74:262,98:$Vq1,140:$V$},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,43:[1,357],92:206,102:290,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,200:288,208:$Vi1,209:$Vj1,210:$Vk1},{41:$Vn1,67:358},{41:$Vn1,67:359},{14:$Vl1,68:360},{14:$Vl1,68:361},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,99:$VG1,102:362,103:363,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VW1,[2,109]),{44:[1,364],98:[1,365],140:$VC1},{14:$Vl1,68:366},o($Vm1,[2,65]),o($VX1,[2,229],{108:$VY1}),o($VZ1,[2,247]),o($VZ1,[2,236],{74:368,96:369,41:$Vo1,140:$V$}),{41:[1,370]},{41:[1,371]},{41:[1,372]},{41:[1,373]},{41:[1,374]},{41:[1,375]},{41:[1,376]},o($VZ1,[2,246]),{8:$Vr1,190:377,191:266,192:$Vs1,193:$Vt1,194:$Vu1,195:$Vv1,196:$Vw1,197:$Vx1,198:$Vy1,199:$Vz1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:378,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:379,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,$VF1),{8:$Vr1,190:380,191:266,192:$Vs1,193:$Vt1,194:$Vu1,195:$Vv1,196:$Vw1,197:$Vx1,198:$Vy1,199:$Vz1},{44:[2,113]},{44:[2,114]},{8:[1,381]},o([15,43,44,75,98,105,106,122,141,154,156,158,164,165,166,167,168,169,170,172,173,175,177],[2,263],{211:[1,382]}),o($V_1,[2,264]),{43:[1,383],75:[1,384]},o([14,44,108],$V$1),{43:[1,385],75:$V02},o($V12,[2,73]),o($V22,[2,249]),{8:[1,387],73:[1,388]},o([8,43,73,75,105,106,154,156,158,164,165,166,167,168,169,170,172,173,175,177],$VS,{74:319,96:320,41:$Vo1,108:$VW,140:$V$,211:$V01}),{141:[1,389]},{44:[2,115]},{44:[2,116]},{75:[1,390]},{43:[1,391]},o($V11,[2,168]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,155:392,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,157:393,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,159:394,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VL1,[2,187]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,162:395,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,171:396,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,171:397,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($V32,[2,191]),o($V32,[2,192]),o($V32,[2,193]),o($V32,[2,194]),o($V32,[2,195]),o($V32,[2,196]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,172:$Vc1,174:398,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,172:$Vc1,174:399,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,107:$Va1,109:212,172:$Vc1,174:400,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VS1,[2,205]),o($VS1,[2,206]),o($VT1,[2,208]),{43:[1,401]},o($VT1,[2,220],{108:$VB1,140:$VC1}),o($VT1,[2,221],{108:$VD1}),{8:[1,403],92:402},{15:[1,404],75:[1,405]},o($V42,[2,254]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:290,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,200:406,208:$Vi1,209:$Vj1,210:$Vk1},{8:[1,407]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:408,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:409,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$VV1,57:411,66:147,148:410,149:$VE,150:$VF,151:$VG,152:$VH},{99:[1,412]},{99:[1,413]},{99:[1,414]},{43:[1,415]},{43:[1,416]},{43:[1,417]},{41:[1,418]},{8:$VP,15:[1,419],57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:146,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},o($V52,[2,76]),{75:[1,420]},{41:[1,421]},{122:[1,422]},o($V11,[2,160]),{43:[1,423]},{75:[1,424]},{41:$Vo1,74:429,96:430,98:[1,426],104:425,105:[1,427],106:[1,428],108:$VW,111:$VX,112:$VY,113:$VZ,114:$V_,140:$V$},{98:[1,432],104:431,105:[1,433],106:[1,434],111:$VX,112:$VY,113:$VZ,114:$V_},{44:[2,131]},{43:[1,435]},{44:[2,132]},{75:[1,436]},o($V31,$VS),o($Vm1,[2,57]),{41:$Vn1,44:$Vp1,67:358,74:262,98:$Vq1,140:$V$},{14:$V$1},o($Vm1,[2,59]),{8:[1,437]},{14:$Vl1,68:438},o($VZ1,[2,251]),{14:$Vl1,68:439},{14:$Vl1,68:440},o($Vm1,[2,64]),o($Vm1,[2,62]),{44:[1,441]},{44:[1,442]},o($VW1,[2,110]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:443,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($Vm1,[2,63]),{8:$Vr1,191:444,192:$Vs1,193:$Vt1,194:$Vu1,195:$Vv1,196:$Vw1,197:$Vx1,198:$Vy1,199:$Vz1},o($VZ1,[2,237],{140:$VC1}),o($VZ1,[2,238]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:445,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:446,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{43:[1,447]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:448,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{43:[1,449]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:450,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:451,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VX1,[2,230],{108:$VY1}),{44:[2,121]},{141:[1,452]},o($VX1,[2,231],{108:$VY1}),{41:$Vo1,96:453},{8:[1,454]},{14:[2,67]},{8:$VV1,66:291,72:455,149:$VE,150:$VF,151:$VG,152:$VH},o($VZ1,[2,252]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:456,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($V12,[2,69],{74:457,140:$V$}),{8:[1,458]},o($V62,[2,163]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:459,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{44:[1,460]},o($VH1,[2,181],{156:$VI1}),o($VJ1,[2,183],{158:$VK1}),o($VL1,[2,185]),o($VL1,[2,189],{170:$VM1,172:$VN1}),o($VO1,[2,197],{173:$VP1,175:$VQ1}),o($VO1,[2,198],{173:$VP1,175:$VQ1}),o($VR1,[2,200]),o($VR1,[2,201]),o($VR1,[2,203]),o($VT1,[2,214]),o($VT1,[2,232]),o($VT1,[2,233],{74:461,96:462,41:$Vo1,108:$VW,140:$V$}),o($VT1,[2,253]),{14:$VU1,202:463},{15:[1,464],75:$V02},{43:[1,465]},{43:[1,466]},{43:[1,467]},{8:$VV1,57:469,66:147,141:[1,468],149:$VE,150:$VF,151:$VG,152:$VH},o($V72,[2,173]),{97:[1,470]},{100:[1,471]},{101:[1,472]},{14:[1,473]},{14:[1,474]},{14:$Vl1,68:475},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:476,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($V52,[2,75]),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:477,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:478,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{8:[1,479]},{14:$Vl1,68:480},{8:[1,481]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:482,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,$VF1,{103:483,99:$VG1}),{44:[2,126]},{44:[2,127]},{98:$VA1,104:484,108:$VB1,111:$VX,112:$VY,113:$VZ,114:$V_,140:$VC1},{108:$VD1},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:485,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($VE1,$VF1,{103:486,99:$VG1}),{44:[2,128]},{44:[2,129]},{44:[2,266]},{8:[1,487]},{41:$Vn1,67:259},o($Vm1,[2,66]),o($Vm1,[2,60]),o($Vm1,[2,61]),o($VW1,[2,108]),o($VW1,[2,112]),{44:[1,488]},o($VZ1,[2,248]),{43:[1,489]},{43:[1,490]},o($VZ1,[2,241]),{43:[1,491]},o($VZ1,[2,243]),{43:[1,492]},{43:[1,493]},o($V62,[2,164]),{44:[2,134]},o($V_1,[2,265]),o($V12,[2,74]),o($V22,[2,250]),o($V12,[2,71],{140:$VC1}),o($V12,[2,70],{74:494,140:$V$}),{43:[1,496],75:[1,495]},o($V11,[2,167]),o($VT1,[2,234],{108:$VB1,140:$VC1}),o($VT1,[2,235],{108:$VD1}),o($V42,[2,255]),o($V42,[2,256]),o($VT1,[2,260]),o($VT1,[2,261]),o($VT1,[2,262]),{44:[1,497]},o($V72,[2,174]),{41:[1,498]},{41:[1,499]},{41:[1,500]},{15:[1,501],115:503,116:$V82,117:502,118:$V92},{15:[1,508],120:509,121:$Va2,123:507,124:$Vb2,125:506},o($V11,[2,155]),{43:[1,512]},{43:[1,513]},{43:[1,514]},{44:[1,515]},o($V11,[2,161]),{43:[1,516]},{44:[2,122]},{44:[2,123]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:517,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{44:[2,124]},{44:[2,125]},{43:[1,518]},o($VW1,[2,111]),o($VZ1,[2,239]),o($VZ1,[2,240]),o($VZ1,[2,242]),o($VZ1,[2,244]),o($VZ1,[2,245]),o($V12,[2,72],{140:$VC1}),{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:519,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{44:[1,520]},o($Vc2,[2,172]),{8:$VV1,66:521,149:$VE,150:$VF,151:$VG,152:$VH},{8:$VV1,66:522,149:$VE,150:$VF,151:$VG,152:$VH},{8:$VV1,66:523,149:$VE,150:$VF,151:$VG,152:$VH},o($V11,[2,142]),{15:[1,525],115:524,116:$V82},{15:[1,526],117:527,118:$V92},{14:$Vl1,68:528},{14:$Vl1,68:529},{15:[1,531],120:532,121:$Va2,123:530,124:$Vb2},{15:[1,533]},o($V11,[2,154]),o($Vd2,[2,149]),{122:[1,534]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:535,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{44:[1,536]},{14:$Vl1,68:537},{44:[1,538]},{135:[1,539]},{44:[1,540]},{44:[2,130]},o([44,98],[2,259]),{43:[1,541]},o($V11,[2,166]),{43:[1,542]},{43:[1,543]},{43:[1,544]},{15:[1,545]},o($V11,[2,144]),o($V11,[2,145]),{15:[1,546]},o([15,116],[2,141]),o([15,118],[2,140]),{15:[1,547]},o($V11,[2,152]),o($Vd2,[2,150]),o($V11,[2,153]),{8:$VP,29:548,57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:61,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{122:[1,549]},o($V11,[2,156]),o($V11,[2,157]),o($V11,[2,158]),{122:[1,550]},o($V11,[2,162]),{44:[1,551]},{44:[1,552]},{44:[1,553]},{44:[1,554]},o($V11,[2,143]),o($V11,[2,146]),o($V11,[2,151]),{8:$VP,15:[2,148],57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:146,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{8:$VP,29:555,57:69,58:76,59:77,60:78,61:75,63:92,66:147,76:61,77:70,78:71,79:72,80:73,81:74,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,95:93,97:$Vk,100:$Vl,101:$Vm,107:$Vn,109:114,110:116,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:556,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},o($V11,[2,165]),o($Vc2,[2,105]),o($Vc2,[2,106]),o($Vc2,[2,107]),o($Vd2,[2,147],{57:69,77:70,78:71,79:72,80:73,81:74,61:75,58:76,59:77,60:78,82:79,83:80,84:81,85:82,86:83,87:84,88:85,89:86,90:87,91:88,92:89,93:90,94:91,63:92,95:93,109:114,110:116,76:146,66:147,8:$VP,97:$Vk,100:$Vl,101:$Vm,107:$Vn,119:$Vo,126:$Vp,127:$Vq,128:$Vr,130:$Vs,131:$Vt,133:$Vu,137:$Vv,138:$Vw,139:$Vx,142:$Vy,143:$Vz,144:$VA,145:$VB,146:$VC,147:$VD,149:$VE,150:$VF,151:$VG,152:$VH,207:$VI,213:$VJ}),{44:[1,557]},{136:[1,558]},{122:[1,559]},{8:$V41,9:$V51,10:$V61,14:$V71,41:$V81,42:$V91,92:206,102:560,107:$Va1,109:212,153:183,155:184,157:185,159:186,160:$Vb1,161:188,162:189,171:190,172:$Vc1,174:191,176:192,178:193,179:195,180:$Vd1,181:$Ve1,182:$Vf1,183:$Vg1,184:$Vh1,185:207,186:208,187:209,188:210,189:211,208:$Vi1,209:$Vj1,210:$Vk1},{43:[1,561]},{14:$Vl1,68:562},o($V11,[2,159])],
defaultActions: {11:[2,1],13:[2,2],53:[2,15],54:[2,16],160:[2,117],161:[2,118],172:[2,119],173:[2,120],281:[2,113],282:[2,114],294:[2,115],295:[2,116],346:[2,131],348:[2,132],353:[2,68],378:[2,121],383:[2,67],427:[2,126],428:[2,127],433:[2,128],434:[2,129],435:[2,266],453:[2,134],482:[2,122],483:[2,123],485:[2,124],486:[2,125],517:[2,130]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	var listaPrueba =[];
	var Clase = require("./Arbol/Clase");
	var arreglin = require("./Arbol/arreglo");
    var Atributo = require("./Arbol/Atributo");
    var Archivo = require("./Arbol/Archivo");
    
    var  Acceso = require("./Arbol/Expresion/Acceso");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica");
    var Booleano = require("./Arbol/Expresion/Booleano");
    var Cadena = require("./Arbol/Expresion/Cadena");
    var Caracter = require("./Arbol/Expresion/Caracter");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero");
    var Decimal = require("./Arbol/Expresion/Decimal");
    var Entero = require("./Arbol/Expresion/Entero");
    var Este = require("./Arbol/Expresion/Este");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa");
    var Instancia = require("./Arbol/Expresion/Instancia");
    var  Llamada = require("./Arbol/Expresion/Llamada");
    var  Logica = require("./Arbol/Expresion/Logica");
    var  Negativo = require("./Arbol/Expresion/Negativo");
    var  Not_logica= require("./Arbol/Expresion/Not_logica");
    var  Nulo= require("./Arbol/Expresion/Nulo");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo");
    var  Relacional= require("./Arbol/Expresion/Relacional");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria");
    var  t_id= require("./Arbol/Expresion/t_id");
    var  Unario= require("./Arbol/Expresion/Unario");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero");


    var  Constructor = require("./Arbol/Funciones/Constructor");
    var  Funcion = require("./Arbol/Funciones/Funcion");
    var  Parametro = require("./Arbol/Funciones/Parametro");
    var  Principal = require("./Arbol/Funciones/Principal");

    var Asignacion = require("./Arbol/Sentencias/Asignacion");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla");
    var  Caso= require("./Arbol/Sentencias/Caso");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X");
    var Concatenar = require("./Arbol/Sentencias/Concatenar");
    var  Contador= require("./Arbol/Sentencias/Contador");
    var Continuar = require("./Arbol/Sentencias/Continuar");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar");
    var  Estructura= require("./Arbol/Sentencias/Estructura");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras");
    var  Importar= require("./Arbol/Sentencias/Importar");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir");
    var  Leer_Teclado= require("./Arbol/Sentencias/LeerTeclado");
    var  Puntero= require("./Arbol/Sentencias/Puntero");
    var  Repetir= require("./Arbol/Sentencias/Repetir");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras");
    var  Retorno= require("./Arbol/Sentencias/Retorno");
    var  Romper= require("./Arbol/Sentencias/Romper");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona");
    var  Si= require("./Arbol/Sentencias/Si");


	var tituloLeccion = require("./Lecciones/ArbolLecciones/titulo");
    var tipoLeccion = require("./Lecciones/ArbolLecciones/tipoLeccion");
    var tareaLeccion = require("./Lecciones/ArbolLecciones/tareaLeccion");
    var resultadoLeccion = require("./Lecciones/ArbolLecciones/resultadoLeccion");
    var ejemploLeccion = require("./Lecciones/ArbolLecciones/ejemploLeccion");
    var descripcionLeccion = require("./Lecciones/ArbolLecciones/descripcionLeccion");
	var Leccion = require("./Lecciones/Leccion");
	var listaLecciones = require("./Lecciones/listaLecciones");
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 114
break;
case 4:return 175
break;
case 5:return 33
break;
case 6:return 35
break;
case 7:return 31
break;
case 8:return 30
break;
case 9:return 13
break;
case 10:return 17
break;
case 11:return 23
break;
case 12:return 26
break;
case 13:return 19
break;
case 14:return 21
break;
case 15:return 207
break;
case 16:return 208
break;
case 17:return 209
break;
case 18:return 210
break;
case 19:return 211
break;
case 20:return 213
break;
case 21:return 199
break;
case 22:return 127
break;
case 23:return 128
break;
case 24:return 129
break;
case 25:return 130
break;
case 26:return 131
break;
case 27:return 132
break;
case 28:return 133
break;
case 29:return 134
break;
case 30:return 135
break;
case 31:return 136
break;
case 32:return 137
break;
case 33:return 138
break;
case 34:return 139
break;
case 35:return 126
break;
case 36:return 121
break;
case 37:return 124
break;
case 38:return 116
break;
case 39:return 118
break;
case 40:return 119
break;
case 41:return 97
break;
case 42:return 100
break;
case 43:return 101
break;
case 44:return 192
break;
case 45:return 197
break;
case 46:return 198
break;
case 47:return 195
break;
case 48:return 196
break;
case 49:return 194
break;
case 50:return 193
break;
case 51:return 40
break;
case 52:return 64
break;
case 53:return 65
break;
case 54:return 142
break;
case 55:return 75
break;
case 56:return 206
break;
case 57:return 204
break;
case 58:return 143
break;
case 59:return 144
break;
case 60:return 145
break;
case 61:return 70
break;
case 62:return 99
break;
case 63:return 54
break;
case 64:return 55
break;
case 65:return 56
break;
case 66:return 146
break;
case 67:return 182
break;
case 68:return 182
break;
case 69:'nulo'
break;
case 70:return 166
break;
case 71:return 167
break;
case 72:return 169
break;
case 73:return 168
break;
case 74:return 164
break;
case 75:return 165
break;
case 76:return 47
break;
case 77:return 45
break;
case 78:return 107
break;
case 79:return 73
break;
case 80:return 69
break;
case 81:return 181
break;
case 82:return 181 
break;
case 83:return 147
break;
case 84:return 108
break;
case 85:return 149
break;
case 86:return 150
break;
case 87:return 152
break;
case 88:return 151
break;
case 89:return 111
break;
case 90:return 112
break;
case 91:return 113
break;
case 92:return 98
break;
case 93:return 105
break;
case 94:return 106
break;
case 95:return 173
break;
case 96:return 172
break;
case 97:return 170
break;
case 98:return 177
break;
case 99:return 41
break;
case 100:return 43
break;
case 101:return 14
break;
case 102:return 15
break;
case 103:return 140
break;
case 104:return 141
break;
case 105:return 154
break;
case 106:return 158
break;
case 107:return 156
break;
case 108:return 160
break;
case 109:return 44
break;
case 110:return 122
break;
case 111:return 42;
break;
case 112:return 8
break;
case 113:return 10
break;
case 114:return 9
break;
case 115:return 180
break;
case 116:return 5
break;
case 117:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:\{%)/i,/^(?:%\})/i,/^(?:a-coach\b)/i,/^(?:g-coach\b)/i,/^(?:titulo\b)/i,/^(?:descripcion\b)/i,/^(?:tipo\b)/i,/^(?:ejemplo\b)/i,/^(?:tarea\b)/i,/^(?:resultado\b)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:desapilar\b)/i,/^(?:apilar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}