/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[5,9,14],$V3=[1,15],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,32],$V9=[1,36],$Va=[1,35],$Vb=[1,37],$Vc=[1,42],$Vd=[1,43],$Ve=[1,44],$Vf=[1,45],$Vg=[1,47],$Vh=[1,48],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[15,20,28,29,30,36,38,43,44,70,73,74,121,123,124,125,126,184],$Vm=[1,62],$Vn=[1,70],$Vo=[2,151],$Vp=[15,43,70,73,74,123,124,125,126,184],$Vq=[13,15,20,28,29,30,36,38,43,44,70,73,74,121,123,124,125,126,184],$Vr=[12,15,47,49],$Vs=[1,82],$Vt=[1,81],$Vu=[1,84],$Vv=[1,89],$Vw=[1,92],$Vx=[1,119],$Vy=[1,120],$Vz=[1,124],$VA=[1,133],$VB=[1,132],$VC=[1,106],$VD=[1,113],$VE=[1,115],$VF=[1,116],$VG=[1,117],$VH=[1,118],$VI=[1,121],$VJ=[1,122],$VK=[1,123],$VL=[1,134],$VM=[1,135],$VN=[1,136],$VO=[1,144],$VP=[15,20,28,29,30,36,38,43,44,70,73,74,80,93,95,98,100,101,102,104,105,107,111,112,113,115,116,117,118,119,120,121,123,124,125,126,184,190],$VQ=[1,147],$VR=[1,196],$VS=[1,197],$VT=[1,186],$VU=[1,187],$VV=[1,188],$VW=[1,189],$VX=[1,190],$VY=[1,191],$VZ=[1,192],$V_=[1,193],$V$=[1,194],$V01=[1,195],$V11=[1,181],$V21=[1,182],$V31=[1,184],$V41=[1,183],$V51=[1,185],$V61=[1,199],$V71=[12,49],$V81=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,184],$V91=[1,210],$Va1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,130,184],$Vb1=[1,211],$Vc1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,130,132,184],$Vd1=[1,214],$Ve1=[1,215],$Vf1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,184],$Vg1=[1,222],$Vh1=[1,223],$Vi1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,184],$Vj1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],$Vk1=[12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,78,79,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],$Vl1=[1,233],$Vm1=[1,231],$Vn1=[1,232],$Vo1=[1,237],$Vp1=[15,20,28,29,30,36,38,43,44,70,73,74,80,90,92,93,95,98,100,101,102,103,104,105,106,107,111,112,113,116,117,118,119,120,121,123,124,125,126,184,190],$Vq1=[15,20,70,73,74,80,93,95,98,100,101,102,104,105,107,111,112,113,116,117,118,119,120,121,123,124,125,126,184,190],$Vr1=[1,258],$Vs1=[1,259],$Vt1=[1,260],$Vu1=[1,261],$Vv1=[15,115,123,124,125,126],$Vw1=[10,11,15,18,80,146,154,155,156,157,158,159,160,185,186,187],$Vx1=[1,309],$Vy1=[1,310],$Vz1=[1,313],$VA1=[1,314],$VB1=[1,315],$VC1=[1,316],$VD1=[1,317],$VE1=[1,318],$VF1=[1,319],$VG1=[1,320],$VH1=[1,321],$VI1=[20,49],$VJ1=[12,13,15,20,28,29,30,36,38,43,44,49,70,71,73,74,78,79,81,85,86,87,88,96,114,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],$VK1=[10,11,15,18,80,134,146,154,155,156,157,158,159,160,185,186,187],$VL1=[2,107],$VM1=[1,355],$VN1=[12,13,15,20,28,29,30,36,38,43,44,49,70,71,73,74,78,79,85,86,87,88,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],$VO1=[1,369],$VP1=[12,13,15,20,28,29,30,36,38,43,44,49,70,71,73,74,78,79,81,85,86,87,88,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],$VQ1=[12,13,15,20,28,29,30,36,38,43,44,49,70,71,73,74,78,79,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184,188],$VR1=[1,381],$VS1=[12,20,49],$VT1=[15,20,28,29,30,36,38,43,44,70,73,74,80,93,95,98,100,101,102,104,105,107,111,112,113,116,117,118,119,120,121,123,124,125,126,184,190],$VU1=[1,455],$VV1=[1,454],$VW1=[1,461],$VX1=[1,460],$VY1=[20,95,98];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"SENT_ARCHIVO":6,"IMPORTAR":7,"CLASE":8,"importar":9,"abrePar":10,"cadena":11,"cierraPar":12,"puntoComa":13,"clase":14,"id":15,"CUERPO_CLASE":16,"hereda_de":17,"abreLlave":18,"SENTENCIAS_CLASE":19,"cierraLlave":20,"SENTENCIA_CLASE":21,"ATRIBUTO":22,"FUNCION":23,"FUNCION_SOBRE":24,"PRINCIPAL":25,"CONSTRUCTOR":26,"VISIBILIDAD":27,"publico":28,"protegido":29,"privado":30,"DECLARACION":31,"DECLA_LISTA":32,"DECLA_PILA":33,"DECLA_COLA":34,"ESTRUCTURA":35,"VISIBLIDAD":36,"DECLA_PUNTERO":37,"arroba":38,"sobreescribir":39,"TIPO_DECLARACION":40,"LISTA_PARAMETROS":41,"CUERPO_FUNCION":42,"vacio":43,"principal":44,"PARAMETROS":45,"PARAMETRO":46,"puntero":47,"COL_ARREGLO":48,"coma":49,"SENTENCIAS":50,"SENTENCIA":51,"CONCATENAR":52,"IMPRIMIR":53,"ROMPER":54,"RETORNO":55,"CONTINUAR":56,"SI":57,"SWITCH":58,"REPETIR_MIENTRAS":59,"HACER_MIENTRAS":60,"CICLO_X":61,"REPETIR":62,"REPETIR_CONTANDO":63,"ENCICLAR":64,"CONTADOR":65,"LEER_TECLADO":66,"ACCESO":67,"ASIGNACION":68,"DESTRUIR_PUNTERO":69,"Lista":70,"igual":71,"nuevo":72,"Pila":73,"Cola":74,"EXPRESION":75,"INSTANCIA":76,"SIMB_IGUAL":77,"masMas":78,"menosMenos":79,"este":80,"punto":81,"VALOR_PUNTERO":82,"CREAR_PUNTERO":83,"PARAMETROS_LLAMADA":84,"masIgual":85,"menosIgual":86,"porIgual":87,"divIgual":88,"SI_FALSO":89,"Es_falso":90,"SI_VERDADERO":91,"Es_verdadero":92,"Si":93,"CASO":94,"Es_igual_a":95,"dosPuntos":96,"DEFECTO":97,"defecto":98,"LISTA_CASOS":99,"Evaluar_si":100,"Repetir_Mientras":101,"hacer":102,"mientras":103,"Ciclo_doble_condicion":104,"Repetir":105,"hasta_que":106,"Repetir_contando":107,"variable":108,"desde":109,"hasta":110,"Enciclar":111,"Contador":112,"Leer_Teclado":113,"abreCor":114,"cierraCor":115,"concatenar":116,"imprimir":117,"retorno":118,"romper":119,"continuar":120,"estructura":121,"LISTA_DECLARACIONES":122,"t_entero":123,"t_caracter":124,"t_decimal":125,"t_booleano":126,"LOGICA":127,"or":128,"XOR":129,"xor":130,"AND":131,"and":132,"NOT":133,"not":134,"REL":135,"ARITMETICA":136,"SIMB_REL":137,"menor":138,"mayor":139,"menorIgual":140,"mayorIgual":141,"distintoA":142,"igualIgual":143,"mas":144,"MUL":145,"menos":146,"por":147,"POT":148,"division":149,"UNARIO":150,"potencia":151,"NEG":152,"VALOR":153,"entero":154,"decimal":155,"caracter":156,"booleano":157,"nulo":158,"CONVERTIR_CADENA":159,"CONVERTIR_ENTERO":160,"ESTE":161,"CUERPO_ARREGLO":162,"OBTENER_DIRECCION":163,"RESERVAR_MEMORIA":164,"OBTENER_TAMANIO":165,"ATRI":166,"ATRI_":167,"insertar":168,"Apilar":169,"Desapilar":170,"cierrPar":171,"Encolar":172,"Desencolar":173,"obtener":174,"buscar":175,"tamanio":176,"LISTA_EXPRESIONES":177,"LISTA_CUERPO_ARREGLO":178,"ELEMENTO_FILA":179,"CONVERTIR_A_CADENA":180,"convertirACadena":181,"CONVERTIR_A_ENTERO":182,"convertirAEntero":183,"crearPuntero":184,"obtenerDireccion":185,"reservarMemoria":186,"consultarTamanio":187,"flecha":188,"COMPLE_PUNTERO":189,"destruirPuntero":190,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"importar",10:"abrePar",11:"cadena",12:"cierraPar",13:"puntoComa",14:"clase",15:"id",17:"hereda_de",18:"abreLlave",20:"cierraLlave",28:"publico",29:"protegido",30:"privado",36:"VISIBLIDAD",38:"arroba",39:"sobreescribir",43:"vacio",44:"principal",47:"puntero",49:"coma",70:"Lista",71:"igual",72:"nuevo",73:"Pila",74:"Cola",78:"masMas",79:"menosMenos",80:"este",81:"punto",85:"masIgual",86:"menosIgual",87:"porIgual",88:"divIgual",90:"Es_falso",92:"Es_verdadero",93:"Si",95:"Es_igual_a",96:"dosPuntos",98:"defecto",100:"Evaluar_si",101:"Repetir_Mientras",102:"hacer",103:"mientras",104:"Ciclo_doble_condicion",105:"Repetir",106:"hasta_que",107:"Repetir_contando",108:"variable",109:"desde",110:"hasta",111:"Enciclar",112:"Contador",113:"Leer_Teclado",114:"abreCor",115:"cierraCor",116:"concatenar",117:"imprimir",118:"retorno",119:"romper",120:"continuar",121:"estructura",123:"t_entero",124:"t_caracter",125:"t_decimal",126:"t_booleano",128:"or",130:"xor",132:"and",134:"not",138:"menor",139:"mayor",140:"menorIgual",141:"mayorIgual",142:"distintoA",143:"igualIgual",144:"mas",146:"menos",147:"por",149:"division",151:"potencia",154:"entero",155:"decimal",156:"caracter",157:"booleano",158:"nulo",159:"CONVERTIR_CADENA",160:"CONVERTIR_ENTERO",168:"insertar",169:"Apilar",170:"Desapilar",171:"cierrPar",172:"Encolar",173:"Desencolar",174:"obtener",175:"buscar",176:"tamanio",181:"convertirACadena",183:"convertirAEntero",184:"crearPuntero",185:"obtenerDireccion",186:"reservarMemoria",187:"consultarTamanio",188:"flecha",190:"destruirPuntero"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[7,5],[8,3],[8,5],[16,3],[16,2],[19,1],[19,2],[21,1],[21,1],[21,1],[21,1],[21,1],[27,1],[27,1],[27,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,2],[22,2],[22,1],[24,3],[23,5],[23,5],[23,4],[23,4],[25,4],[26,4],[26,3],[41,3],[41,2],[46,2],[46,3],[46,3],[46,4],[45,1],[45,3],[42,3],[42,2],[50,1],[50,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,2],[51,2],[51,2],[51,2],[32,9],[33,9],[34,9],[31,5],[31,3],[31,4],[31,6],[31,5],[68,3],[68,3],[68,3],[68,3],[68,2],[68,2],[68,2],[68,2],[68,4],[68,5],[68,5],[68,5],[68,5],[68,4],[68,4],[68,4],[68,4],[68,6],[68,3],[37,3],[37,1],[76,3],[77,1],[77,1],[77,1],[77,1],[77,1],[89,2],[91,2],[57,6],[57,8],[57,7],[57,7],[57,8],[94,4],[97,3],[99,1],[99,2],[58,8],[58,7],[58,7],[58,6],[59,5],[60,7],[61,7],[62,7],[63,15],[64,3],[65,5],[66,7],[48,3],[48,4],[52,9],[52,7],[53,5],[55,3],[55,2],[54,2],[56,2],[35,6],[122,1],[122,2],[40,1],[40,1],[40,1],[40,1],[40,1],[75,1],[127,3],[127,1],[129,3],[129,1],[131,3],[131,1],[133,2],[133,1],[135,3],[135,1],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[136,3],[136,3],[136,1],[145,3],[145,3],[145,1],[148,3],[148,1],[150,2],[150,2],[150,1],[152,2],[152,1],[153,1],[153,1],[153,1],[153,1],[153,3],[153,1],[153,1],[153,1],[153,1],[153,1],[153,2],[153,2],[153,1],[153,1],[153,1],[153,1],[153,1],[153,1],[153,1],[67,3],[67,4],[67,4],[161,3],[161,3],[161,4],[161,4],[167,1],[167,2],[167,2],[167,4],[167,4],[167,3],[167,4],[167,3],[167,4],[167,4],[167,1],[166,1],[166,3],[177,1],[177,3],[84,2],[84,3],[162,3],[178,1],[178,3],[179,3],[180,5],[182,5],[83,6],[163,4],[164,4],[165,4],[82,3],[189,1],[189,3],[69,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 3: case 12: case 52:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 4: case 5: case 13: case 14: case 15: case 16: case 17: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 151: case 152: case 154: case 156: case 158: case 160: case 162: case 171: case 174: case 176: case 179: case 181: case 190: case 194: case 195: case 196: case 197: case 198: case 199: case 200:
this.$=$$[$0];
break;
case 6:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 7:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 8:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 9: case 49: case 228:
this.$= $$[$0-1];
break;
case 10: case 42:
this.$=[];
break;
case 11:

			var a = [];
			a.push($$[$0]);
			if($$[$0] instanceof Atributo){
			console.log("visiblidad   "+ $$[$0].getVisibilidad());
			}
			this.$=a;
		
break;
case 18:
this.$="publico";
break;
case 19:
this.$="protegido";
break;
case 20:
this.$="privado";
break;
case 21: case 27: case 28: case 29: case 30: case 31:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 22:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			console.log(a.getVisibilidad()+"<----");
			this.$=a;
		
break;
case 23: case 24: case 25: case 26: case 32:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 33:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 34:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 37:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 38:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 39:

			var a = new Constructor();
			//function(visib, nombre,para,sent) 
			a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 40:

			var a = new Constructor();
			//function(visib, nombre,para,sent) 
			a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 41: case 73: case 74: case 75: case 76: case 225:
this.$=$$[$0-1];
break;
case 43:

			var a = new Parametro();
			a.setValores($$[$0-1],1,$$[$0]);
			this.$=a;
		
break;
case 44:

			var a = new Parametro();
			a.setValores($$[$0-2],2,$$[$0]);
			this.$=a;
		
break;
case 45:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 46:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 47: case 51: case 236:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 48: case 237:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 50: case 223:
this.$= [];
break;
case 77:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 78:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 79:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 80:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 81:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 82:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 83:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var asigna = new AsignacionArreglo(); asigna.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],7);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 84:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],4);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,3);
		this.$= asigDec;
	
break;
case 85:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 86:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 87:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 88:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 89:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",5); this.$=a; 
break;
case 90:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",5); this.$=a; 
break;
case 91:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 92:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 93:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 94:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 95:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 96:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 97:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 98:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 99:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 100:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 101:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 102:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 103:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 104:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 105:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 106: case 112: case 113:
this.$= $$[$0];
break;
case 107:
this.$="=";
break;
case 108:
this.$="=+";
break;
case 109:
this.$="=-";
break;
case 110:
this.$="=*";
break;
case 111:
this.$="=/";
break;
case 114:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 115:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 116:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 117:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 118:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 119:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 120:
this.$= $$[$0]
break;
case 121:

			console.log("hola1");
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 122:

			console.log("hola");
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 123:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 124:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 125:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 126:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 127:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
	
break;
case 128:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 129:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 130:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 131:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 132:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 133:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 134:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 135:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 136:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 137:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 138:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 139:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 140:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 141:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 142:
 this.$ = new Romper();
break;
case 143:
this.$ = new Continuar();
break;
case 144:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 145:
var a = []; a.push($$[$0]); this.$= a;
break;
case 146:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 147:
this.$="entero";
break;
case 148:
this.$="caracter";
break;
case 149:
this.$="decimal";
break;
case 150:
this.$="booleano";
break;
case 153:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 155:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 157:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 159:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 161:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 163:
this.$="<";
break;
case 164:
this.$=">";
break;
case 165:
this.$="<=";
break;
case 166:
this.$=">=";
break;
case 167:
this.$="!=";
break;
case 168:
this.$="==";
break;
case 169:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 170:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 172:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 173:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 175:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 177:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 178:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 180:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 182:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 183:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 184:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 185:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 186:
 this.$=$$[$0-2];
break;
case 187:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 188:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 189:
this.$=S1;
break;
case 191:
console.log($$[$0]); var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 192:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 193:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i; console.log(i.getNombreFuncion()); console.log(i.getParametros());
break;
case 201:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 202:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 203:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 204:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 205:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 206:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 207:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 208:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 209:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 210:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 211: case 212: case 214: case 216: case 217:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 213: case 215:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], $$[$0]);
			this.$=a;
		
break;
case 218:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 219:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 220:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 221:
 var arreglo = []; var g= arreglo.push($$[$0]); console.log("size "+ g); this.$= arreglo;
break;
case 222:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]); console.log("size "+ g);; this.$= arreglo;
break;
case 224:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 226:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 227:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 229:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 230:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
case 231:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 232:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 233:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 234:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 235:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 238:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1},{1:[3]},{5:[1,8],6:9,7:4,8:5,9:$V0,14:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,10]},{15:[1,11]},{1:[2,1]},o($V2,[2,3]),{11:[1,12]},{16:13,17:[1,14],18:$V3},{12:[1,16]},o($V2,[2,7]),{15:[1,17]},{15:$V4,19:18,20:[1,19],21:20,22:21,23:22,24:23,25:24,26:25,27:26,28:$V5,29:$V6,30:$V7,31:27,32:28,33:29,34:30,35:31,36:$V8,37:33,38:$V9,40:34,43:$Va,44:$Vb,70:$Vc,73:$Vd,74:$Ve,83:46,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk},{13:[1,52]},{16:53,18:$V3},{15:$V4,20:[1,54],21:55,22:21,23:22,24:23,25:24,26:25,27:26,28:$V5,29:$V6,30:$V7,31:27,32:28,33:29,34:30,35:31,36:$V8,37:33,38:$V9,40:34,43:$Va,44:$Vb,70:$Vc,73:$Vd,74:$Ve,83:46,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk},o($V2,[2,10]),o($Vl,[2,11]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),{15:[1,63],31:56,32:57,33:59,34:58,37:60,40:61,43:$Vm,70:$Vc,73:$Vd,74:$Ve,83:46,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk},o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),o($Vl,[2,26]),{35:64,121:$Vf},o($Vl,[2,32]),{15:[1,65]},{15:[1,66]},{39:[1,67]},{10:[1,68]},{10:$Vn,15:$Vo,41:69},o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),{15:[1,71]},{15:[1,72]},{15:[1,73]},{15:[1,74]},o($Vq,[2,105],{71:[1,75]}),o($Vr,[2,147]),o($Vr,[2,148]),o($Vr,[2,149]),o($Vr,[2,150]),{10:[1,76]},o($V2,[2,6]),o($V2,[2,8]),o($V2,[2,9]),o($Vl,[2,12]),o($Vl,[2,21]),o($Vl,[2,27]),o($Vl,[2,28]),o($Vl,[2,29]),o($Vl,[2,31]),{15:[1,77]},{15:[1,78]},{10:$Vn,15:$Vo,41:79},o($Vl,[2,30]),{10:$Vn,13:$Vs,41:80,48:83,71:$Vt,114:$Vu},{10:$Vn,41:85},{15:$Vv,23:86,27:87,28:$V5,29:$V6,30:$V7,40:88,43:$Va,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{12:[1,90]},{18:$Vw,42:91},{12:[1,94],15:$Vv,40:96,45:93,46:95,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{71:[1,97]},{71:[1,98]},{71:[1,99]},{114:[1,100]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:101,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{15:$Vv,40:137,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{10:$Vn,13:$Vs,41:138,48:83,71:$Vt,114:$Vu},{10:$Vn,41:139},{18:$Vw,42:140},{18:$Vw,42:141},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,72:$VO,75:142,76:143,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VP,[2,81]),{13:[1,145],71:[1,146],114:$VQ},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:148,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{18:$Vw,42:149},o($Vl,[2,33]),{15:$Vv,40:150,43:$Vm,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:[1,151]},o($Vr,$Vo),{18:$Vw,42:152},o($Vl,[2,40]),{15:$VR,20:[1,154],31:156,32:163,33:164,34:165,35:162,37:179,40:180,50:153,51:155,52:157,53:158,54:159,55:160,56:161,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,70:$Vc,73:$Vd,74:$Ve,80:$VS,82:198,83:46,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61},{12:[1,200],49:[1,201]},{18:[2,42]},o($V71,[2,47]),{15:[1,202],47:[1,203]},{72:[1,204]},{72:[1,205]},{72:[1,206]},{15:$Vv,31:208,40:180,122:207,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($Vq,[2,104]),o([12,13,15,20,28,29,30,36,38,43,44,49,70,73,74,96,115,121,123,124,125,126,184],[2,152],{128:[1,209]}),o($V81,[2,154],{130:$V91}),o($Va1,[2,156],{132:$Vb1}),o($Vc1,[2,158]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,135:212,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vc1,[2,160]),o($Vc1,[2,162],{137:213,138:[1,216],139:[1,217],140:[1,218],141:[1,219],142:[1,220],143:[1,221],144:$Vd1,146:$Ve1}),o($Vf1,[2,171],{147:$Vg1,149:$Vh1}),o($Vi1,[2,174]),o($Vi1,[2,176],{151:[1,224]}),o($Vj1,[2,179],{78:[1,225],79:[1,226]}),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,153:227,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vk1,[2,181]),o($Vk1,[2,182]),o($Vk1,[2,183]),o($Vk1,[2,184]),o($Vk1,[2,185]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:228,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vk1,[2,187]),o($Vk1,[2,188]),o($Vk1,[2,189]),o($Vk1,[2,190]),o($Vk1,[2,191],{48:229,84:230,10:$Vl1,81:$Vm1,114:$Vu,188:$Vn1}),o($Vk1,[2,194]),o($Vk1,[2,195]),o($Vk1,[2,196]),o($Vk1,[2,197]),o($Vk1,[2,198]),o($Vk1,[2,199]),o($Vk1,[2,200]),{81:[1,234]},{18:$Vo1,178:235,179:236},{10:[1,238]},{10:[1,239]},{10:[1,240]},{49:[1,241]},{18:$Vw,42:242},{18:$Vw,42:243},o($Vl,[2,39]),o($Vl,[2,36]),{13:[1,244]},{13:[1,245]},{15:[1,246]},o($VP,[2,82]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:247,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:248,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{115:[1,249]},o($Vl,[2,37]),{15:[1,250]},{10:$Vn,41:80},o($Vl,[2,38]),{15:$VR,20:[1,251],31:156,32:163,33:164,34:165,35:162,37:179,40:180,51:252,52:157,53:158,54:159,55:160,56:161,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,70:$Vc,73:$Vd,74:$Ve,80:$VS,82:198,83:46,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61},o($Vp1,[2,50]),o($Vq1,[2,51]),o($Vq1,[2,53]),o($Vq1,[2,54]),o($Vq1,[2,55]),o($Vq1,[2,56]),o($Vq1,[2,57]),o($Vq1,[2,58]),o($Vq1,[2,59]),o($Vq1,[2,60]),o($Vq1,[2,61]),o($Vq1,[2,62]),o($Vq1,[2,63]),o($Vq1,[2,64]),o($Vq1,[2,65]),o($Vq1,[2,66]),o($Vq1,[2,67]),o($Vq1,[2,68]),o($Vq1,[2,69]),o($Vq1,[2,70]),o($Vq1,[2,71]),o($Vq1,[2,72]),{13:[1,253],71:[1,255],77:254,78:[1,256],79:[1,257],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[1,262]},{13:[1,263]},{13:[1,264]},{15:[1,265]},{10:[1,266]},{10:[1,267]},{13:[1,268]},{10:$Vx,11:$Vy,13:[1,270],15:$Vz,18:$VA,67:125,75:269,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{13:[1,271]},{10:[1,272]},{10:[1,273]},{10:[1,274]},{18:$Vw,42:275},{10:[1,276]},{18:$Vw,42:277},{10:[1,278]},{15:[1,279]},{10:[1,280]},{10:[1,281]},{10:$Vl1,15:$Vo,48:282,71:[1,285],77:284,78:[1,286],79:[1,287],81:$Vm1,84:283,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$Vu,188:$Vn1},{81:[1,288]},{71:[1,289]},{10:[1,290]},{18:[2,41]},{15:$Vv,40:96,46:291,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($V71,[2,43],{48:292,114:$Vu}),{15:[1,293]},{70:[1,294]},{73:[1,295]},{74:[1,296]},{15:$Vv,31:298,40:180,115:[1,297],123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($Vv1,[2,145]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,129:299,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,131:300,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,133:301,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vc1,[2,159]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,136:302,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,145:303,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,145:304,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vw1,[2,163]),o($Vw1,[2,164]),o($Vw1,[2,165]),o($Vw1,[2,166]),o($Vw1,[2,167]),o($Vw1,[2,168]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,146:$VD,148:305,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,146:$VD,148:306,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,80:$VB,82:131,146:$VD,148:307,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vj1,[2,177]),o($Vj1,[2,178]),o($Vk1,[2,180]),{12:[1,308]},o($Vk1,[2,192],{81:$Vx1,114:$VQ}),o($Vk1,[2,193],{81:$Vy1}),{15:$Vz1,166:311,167:312,168:$VA1,169:$VB1,170:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},{15:[1,323],189:322},{10:$Vx,11:$Vy,12:[1,324],15:$Vz,18:$VA,67:125,75:326,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,177:325,185:$VL,186:$VM,187:$VN},{15:[1,328],67:327},{20:[1,329],49:[1,330]},o($VI1,[2,226]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:326,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,177:331,185:$VL,186:$VM,187:$VN},{15:[1,332]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:333,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:334,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{15:[1,335]},o($Vl,[2,34]),o($Vl,[2,35]),o($VP,[2,80]),o($VP,[2,84]),{10:$Vl1,84:336},{13:[1,337]},{115:[1,338]},o($VJ1,[2,135]),{10:$Vn,41:138},o($Vp1,[2,49]),o($Vq1,[2,52]),o($Vq1,[2,73]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:339,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VK1,$VL1,{76:340,72:$VO}),{13:[2,91]},{13:[2,92]},o($VK1,[2,108]),o($VK1,[2,109]),o($VK1,[2,110]),o($VK1,[2,111]),o($Vq1,[2,74]),o($Vq1,[2,75]),o($Vq1,[2,76]),{13:$Vs,48:83,71:$Vt,114:$Vu},{15:[1,341]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:342,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vq1,[2,142]),{13:[1,343]},o($Vq1,[2,141]),o($Vq1,[2,143]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:344,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:345,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:346,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{103:[1,347]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:348,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{106:[1,349]},{108:[1,350]},{18:$Vw,42:351},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:352,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:353,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{71:$VM1,77:354,81:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$VQ},{81:$Vy1},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:356,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VK1,$VL1,{76:357,72:$VO}),{13:[2,89]},{13:[2,90]},{15:[1,358],67:359},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:360,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{15:[1,361]},o($V71,[2,48]),o($V71,[2,45],{114:$VQ}),o($V71,[2,44],{48:362,114:$Vu}),{10:[1,363]},{10:[1,364]},{10:[1,365]},{13:[1,366]},o($Vv1,[2,146]),o($V81,[2,153],{130:$V91}),o($Va1,[2,155],{132:$Vb1}),o($Vc1,[2,157]),o($Vc1,[2,161],{144:$Vd1,146:$Ve1}),o($Vf1,[2,169],{147:$Vg1,149:$Vh1}),o($Vf1,[2,170],{147:$Vg1,149:$Vh1}),o($Vi1,[2,172]),o($Vi1,[2,173]),o($Vi1,[2,175]),o($Vk1,[2,186]),{15:$Vz1,166:367,167:312,168:$VA1,169:$VB1,170:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},{15:$Vz1,166:368,167:312,168:$VA1,169:$VB1,170:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},o($VN1,[2,201],{81:$VO1}),o($VP1,[2,219]),o($VP1,[2,208],{48:370,84:371,10:$Vl1,114:$Vu}),{10:[1,372]},{10:[1,373]},{10:[1,374]},{10:[1,375]},{10:[1,376]},{10:[1,377]},{10:[1,378]},o($VP1,[2,218]),o([12,13,15,20,28,29,30,36,38,43,44,49,70,71,73,74,78,79,96,115,121,123,124,125,126,128,130,132,138,139,140,141,142,143,144,146,147,149,151,184],[2,235],{188:[1,379]}),o($VQ1,[2,236]),o($VP1,[2,223]),{12:[1,380],49:$VR1},o($VS1,[2,221]),o($Vk1,[2,204]),o($Vk1,[2,205],{48:382,84:383,10:$Vl1,81:$Vm1,114:$Vu}),o($Vk1,[2,225]),{18:$Vo1,179:384},{20:[1,385],49:$VR1},{12:[1,386]},{12:[1,387]},{12:[1,388]},{12:[1,389]},{13:[2,106]},o($VP,[2,83]),o($VJ1,[2,136]),{13:[2,87]},{13:[2,88]},{49:[1,390]},{12:[1,391]},o($Vq1,[2,140]),{12:[1,392]},{12:[1,393]},{12:[1,394]},{10:[1,395]},{49:[1,396]},{10:[1,397]},{96:[1,398]},o($Vq1,[2,132]),{12:[1,399]},{49:[1,400]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:401,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VK1,$VL1),{13:[2,85]},{13:[2,86]},{10:$Vl1,48:406,71:[1,403],77:402,78:[1,404],79:[1,405],81:$Vm1,84:283,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$Vu},{71:[1,408],77:407,78:[1,409],79:[1,410],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[2,103]},{12:[1,411]},o($V71,[2,46],{114:$VQ}),{15:$Vv,40:412,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:$Vv,40:413,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:$Vv,40:414,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($VT1,[2,144]),o($VN1,[2,202],{81:$VO1}),o($VN1,[2,203],{81:$VO1}),{15:$Vz1,167:415,168:$VA1,169:$VB1,170:$VC1,172:$VD1,173:$VE1,174:$VF1,175:$VG1,176:$VH1},o($VP1,[2,209],{114:$VQ}),o($VP1,[2,210]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:416,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:417,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{171:[1,418]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:419,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{12:[1,420]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:421,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:422,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{15:[1,423]},o($VP1,[2,224]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:424,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vk1,[2,206],{81:$Vx1,114:$VQ}),o($Vk1,[2,207],{81:$Vy1}),o($VI1,[2,227]),o($VI1,[2,228]),o($Vk1,[2,232]),o($Vk1,[2,233]),o($Vk1,[2,234]),o([13,15,20,28,29,30,36,38,43,44,70,71,73,74,121,123,124,125,126,184],[2,231]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:425,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{13:[1,426]},{18:[1,427]},{18:[1,428]},{18:$Vw,42:429},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:430,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:431,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:432,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{15:[1,433]},{18:$Vw,42:434},{15:[1,435]},{13:[2,93]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:436,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VK1,$VL1,{76:437,72:$VO}),{13:[2,98]},{13:[2,99]},{71:$VM1,77:438,81:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$VQ},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:439,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($VK1,$VL1,{76:440,72:$VO}),{13:[2,100]},{13:[2,101]},{13:[2,238]},{12:[1,441]},{12:[1,442]},{12:[1,443]},o($VP1,[2,220]),{12:[1,444]},{12:[1,445]},o($VP1,[2,213]),{12:[1,446]},o($VP1,[2,215]),{12:[1,447]},{12:[1,448]},o($VQ1,[2,237]),o($VS1,[2,222]),{12:[1,450],49:[1,449]},o($Vq1,[2,139]),{20:[1,451],89:453,90:$VU1,91:452,92:$VV1},{20:[1,458],94:459,95:$VW1,97:457,98:$VX1,99:456},o($Vq1,[2,127]),{12:[1,462]},{12:[1,463]},{12:[1,464]},{13:[1,465]},o($Vq1,[2,133]),{12:[1,466]},{13:[2,94]},{13:[2,95]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:467,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{13:[2,96]},{13:[2,97]},{13:[1,468]},{13:[1,469]},{13:[1,470]},o($VP1,[2,211]),o($VP1,[2,212]),o($VP1,[2,214]),o($VP1,[2,216]),o($VP1,[2,217]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:471,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{13:[1,472]},o($Vq1,[2,114]),{20:[1,474],89:473,90:$VU1},{20:[1,475],91:476,92:$VV1},{18:$Vw,42:477},{18:$Vw,42:478},{20:[1,480],94:481,95:$VW1,97:479,98:$VX1},{20:[1,482]},o($Vq1,[2,126]),o($VY1,[2,121]),{96:[1,483]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:484,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{13:[1,485]},{18:$Vw,42:486},{13:[1,487]},{109:[1,488]},{13:[1,489]},{13:[2,102]},o($VT1,[2,77]),o($VT1,[2,78]),o($VT1,[2,79]),{12:[1,490]},o($Vq1,[2,138]),{20:[1,491]},o($Vq1,[2,116]),o($Vq1,[2,117]),{20:[1,492]},o([20,90],[2,113]),o([20,92],[2,112]),{20:[1,493]},o($Vq1,[2,124]),o($VY1,[2,122]),o($Vq1,[2,125]),{15:$VR,31:156,32:163,33:164,34:165,35:162,37:179,40:180,50:494,51:155,52:157,53:158,54:159,55:160,56:161,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,70:$Vc,73:$Vd,74:$Ve,80:$VS,82:198,83:46,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61},{96:[1,495]},o($Vq1,[2,128]),o($Vq1,[2,129]),o($Vq1,[2,130]),{96:[1,496]},o($Vq1,[2,134]),{13:[1,497]},o($Vq1,[2,115]),o($Vq1,[2,118]),o($Vq1,[2,123]),{15:$VR,20:[2,120],31:156,32:163,33:164,34:165,35:162,37:179,40:180,51:252,52:157,53:158,54:159,55:160,56:161,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,70:$Vc,73:$Vd,74:$Ve,80:$VS,82:198,83:46,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61},{15:$VR,31:156,32:163,33:164,34:165,35:162,37:179,40:180,50:498,51:155,52:157,53:158,54:159,55:160,56:161,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,70:$Vc,73:$Vd,74:$Ve,80:$VS,82:198,83:46,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:499,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},o($Vq1,[2,137]),o($VY1,[2,119],{83:46,31:156,52:157,53:158,54:159,55:160,56:161,35:162,32:163,33:164,34:165,57:166,58:167,59:168,60:169,61:170,62:171,63:172,64:173,65:174,66:175,67:176,68:177,69:178,37:179,40:180,82:198,51:252,15:$VR,70:$Vc,73:$Vd,74:$Ve,80:$VS,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,184:$Vk,190:$V61}),{13:[1,500]},{110:[1,501]},{96:[1,502]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,67:125,75:503,80:$VB,82:131,127:102,129:103,131:104,133:105,134:$VC,135:107,136:108,145:109,146:$VD,148:110,150:111,152:112,153:114,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:126,162:127,163:128,164:129,165:130,185:$VL,186:$VM,187:$VN},{12:[1,504]},{18:$Vw,42:505},o($Vq1,[2,131])],
defaultActions: {8:[2,1],94:[2,42],200:[2,41],256:[2,91],257:[2,92],286:[2,89],287:[2,90],336:[2,106],339:[2,87],340:[2,88],356:[2,85],357:[2,86],360:[2,103],401:[2,93],404:[2,98],405:[2,99],409:[2,100],410:[2,101],411:[2,238],436:[2,94],437:[2,95],439:[2,96],440:[2,97],467:[2,102]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var Clase = require("./Arbol/Clase");
    var Atributo = require("./Arbol/Atributo.js");
    var Archivo = require("./Arbol/Archivo.js");
    
    var  Acceso = require("./Arbol/Expresion/Acceso.js");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica.js");
    var Booleano = require("./Arbol/Expresion/Booleano.js");
    var Cadena = require("./Arbol/Expresion/Cadena.js");
    var Caracter = require("./Arbol/Expresion/Caracter.js");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena.js");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero.js");
    var Decimal = require("./Arbol/Expresion/Decimal.js");
    var Entero = require("./Arbol/Expresion/Entero.js");
    var Este = require("./Arbol/Expresion/Este.js");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa.js");
    var Instancia = require("./Arbol/Expresion/Instancia.js");
    var  Llamada = require("./Arbol/Expresion/Llamada.js");
    var  Logica = require("./Arbol/Expresion/Logica.js");
    var  Negativo = require("./Arbol/Expresion/Negativo.js");
    var  Not_logica= require("./Arbol/Expresion/Not_logica.js");
    var  Nulo= require("./Arbol/Expresion/Nulo.js");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion.js");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio.js");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo.js");
    var  Relacional= require("./Arbol/Expresion/Relacional.js");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria.js");
    var  t_id= require("./Arbol/Expresion/t_id.js");
    var  Unario= require("./Arbol/Expresion/Unario.js");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero.js");


    var  Constructor = require("./Arbol/Funciones/Constructor.js");
    var  Funcion = require("./Arbol/Funciones/Funcion.js");
    var  Parametro = require("./Arbol/Funciones/Parametro.js");
    var  Principal = require("./Arbol/Funciones/Principal.js");

    var Asignacion = require("./Arbol/Sentencias/Asignacion.js");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo.js");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario.js");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla.js");
    var  Caso= require("./Arbol/Sentencias/Caso.js");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X.js");
    var Concatenar = require("./Arbol/Sentencias/Concatenar.js");
    var  Contador= require("./Arbol/Sentencias/Contador.js");
    var Continuar = require("./Arbol/Sentencias/Continuar.js");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo.js");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero.js");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola.js");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista.js");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila.js");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero.js");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable.js");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero.js");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar.js");
    var  Estructura= require("./Arbol/Sentencias/Estructura.js");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras.js");
    var  Importar= require("./Arbol/Sentencias/Importar.js");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir.js");
    var  Leer_Teclado= require("./Arbol/Sentencias/LeerTeclado.js");
    var  Puntero= require("./Arbol/Sentencias/Puntero.js");
    var  Repetir= require("./Arbol/Sentencias/Repetir.js");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando.js");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras.js");
    var  Retorno= require("./Arbol/Sentencias/Retorno.js");
    var  Romper= require("./Arbol/Sentencias/Romper.js");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona.js");
    var  Si= require("./Arbol/Sentencias/Si.js");
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 184
break;
case 2:return 185
break;
case 3:return 186
break;
case 4:return 187
break;
case 5:return 188
break;
case 6:return 190
break;
case 7:return 176
break;
case 8:return 101
break;
case 9:return 102
break;
case 10:return 103
break;
case 11:return 104
break;
case 12:return 105
break;
case 13:return 106
break;
case 14:return 107
break;
case 15:return 108
break;
case 16:return 109
break;
case 17:return 110
break;
case 18:return 111
break;
case 19:return 112
break;
case 20:return 113
break;
case 21:return 100
break;
case 22:return 95
break;
case 23:return 98
break;
case 24:return 90
break;
case 25:return 92
break;
case 26:return 93
break;
case 27:return 70
break;
case 28:return 73
break;
case 29:return 74
break;
case 30:return 168
break;
case 31:return 174
break;
case 32:return 175
break;
case 33:return 172
break;
case 34:return 173
break;
case 35:return 9
break;
case 36:return 38
break;
case 37:return 39
break;
case 38:return 116
break;
case 39:return 49
break;
case 40:return 183
break;
case 41:return 181
break;
case 42:return 117
break;
case 43:return 118
break;
case 44:return 119
break;
case 45:return 44
break;
case 46:return 72
break;
case 47:return 28
break;
case 48:return 29
break;
case 49:return 30
break;
case 50:return 120
break;
case 51:return 158
break;
case 52:return 158
break;
case 53:'nulo'
break;
case 54:return 138
break;
case 55:return 139
break;
case 56:return 140
break;
case 57:return 141
break;
case 58:return 143
break;
case 59:return 142
break;
case 60:return 17
break;
case 61:return 14
break;
case 62:return 80
break;
case 63:return 47
break;
case 64:return 43
break;
case 65:return 157
break;
case 66:return 157 
break;
case 67:return 121
break;
case 68:return 81
break;
case 69:return 123
break;
case 70:return 124
break;
case 71:return 126
break;
case 72:return 125
break;
case 73:return 85
break;
case 74:return 86
break;
case 75:return 87
break;
case 76:return 88
break;
case 77:return 71
break;
case 78:return 78
break;
case 79:return 79
break;
case 80:return 147
break;
case 81:return 149
break;
case 82:return 146
break;
case 83:return 144
break;
case 84:return 151
break;
case 85:return 10
break;
case 86:return 12
break;
case 87:return 18
break;
case 88:return 20
break;
case 89:return 114
break;
case 90:return 115
break;
case 91:return 128
break;
case 92:return 132
break;
case 93:return 130
break;
case 94:return 134
break;
case 95:return 13
break;
case 96:return 96
break;
case 97:return 11;
break;
case 98:return 15
break;
case 99:return 155
break;
case 100:return 154
break;
case 101:return 156
break;
case 102:return 5
break;
case 103:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}