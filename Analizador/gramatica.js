/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[5,9,14],$V3=[1,15],$V4=[1,35],$V5=[1,38],$V6=[1,39],$V7=[1,40],$V8=[1,31],$V9=[1,36],$Va=[1,34],$Vb=[1,37],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,46],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[15,20,27,28,29,35,37,42,43,71,74,75,121,123,124,125,126,183],$Vm=[1,62],$Vn=[1,61],$Vo=[1,68],$Vp=[2,154],$Vq=[15,42,71,74,75,123,124,125,126,183],$Vr=[12,15,46,48],$Vs=[1,83],$Vt=[1,82],$Vu=[1,85],$Vv=[1,88],$Vw=[1,93],$Vx=[1,120],$Vy=[1,121],$Vz=[1,125],$VA=[1,134],$VB=[1,133],$VC=[1,107],$VD=[1,114],$VE=[1,116],$VF=[1,117],$VG=[1,118],$VH=[1,119],$VI=[1,122],$VJ=[1,123],$VK=[1,124],$VL=[1,135],$VM=[1,136],$VN=[1,137],$VO=[1,145],$VP=[15,20,27,28,29,35,37,42,43,71,74,75,79,93,95,98,100,101,102,104,105,107,111,112,113,115,116,117,118,119,120,121,123,124,125,126,183,189],$VQ=[1,148],$VR=[1,195],$VS=[1,196],$VT=[1,185],$VU=[1,186],$VV=[1,187],$VW=[1,188],$VX=[1,189],$VY=[1,190],$VZ=[1,191],$V_=[1,192],$V$=[1,193],$V01=[1,194],$V11=[1,180],$V21=[1,181],$V31=[1,183],$V41=[1,182],$V51=[1,184],$V61=[1,198],$V71=[12,48],$V81=[12,13,20,48,96,115,128],$V91=[1,212],$Va1=[12,13,20,48,96,115,128,130],$Vb1=[1,213],$Vc1=[12,13,20,48,96,115,128,130,132],$Vd1=[1,216],$Ve1=[1,217],$Vf1=[12,13,20,48,96,115,128,130,132,138,139,140,141,142,143,144,146],$Vg1=[1,224],$Vh1=[1,225],$Vi1=[12,13,20,48,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149],$Vj1=[12,13,20,48,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],$Vk1=[12,13,20,48,81,82,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],$Vl1=[1,235],$Vm1=[1,233],$Vn1=[1,234],$Vo1=[1,239],$Vp1=[15,20,27,28,29,35,37,42,43,71,74,75,79,90,92,93,95,98,100,101,102,103,104,105,106,107,111,112,113,116,117,118,119,120,121,123,124,125,126,183,189],$Vq1=[15,20,71,74,75,79,93,95,98,100,101,102,104,105,107,111,112,113,116,117,118,119,120,121,123,124,125,126,183,189],$Vr1=[1,259],$Vs1=[1,260],$Vt1=[1,261],$Vu1=[1,262],$Vv1=[15,115,123,124,125,126],$Vw1=[10,11,15,18,79,146,154,155,156,157,158,159,160,184,185,186],$Vx1=[1,312],$Vy1=[1,313],$Vz1=[1,316],$VA1=[1,317],$VB1=[1,318],$VC1=[1,319],$VD1=[1,320],$VE1=[1,321],$VF1=[1,322],$VG1=[1,323],$VH1=[1,324],$VI1=[20,48],$VJ1=[12,13,20,48,72,80,81,82,85,86,87,88,96,114,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],$VK1=[10,11,15,18,79,134,146,154,155,156,157,158,159,160,184,185,186],$VL1=[2,110],$VM1=[12,13,20,48,72,81,82,85,86,87,88,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],$VN1=[1,372],$VO1=[12,13,20,48,72,80,81,82,85,86,87,88,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],$VP1=[12,13,20,48,72,81,82,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151,187],$VQ1=[1,384],$VR1=[12,20,48],$VS1=[15,20,27,28,29,35,37,42,43,71,74,75,79,93,95,98,100,101,102,104,105,107,111,112,113,116,117,118,119,120,121,123,124,125,126,183,189],$VT1=[1,461],$VU1=[1,460],$VV1=[1,467],$VW1=[1,466],$VX1=[20,95,98];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INICIO":3,"ARCHIVO":4,"EOF":5,"SENT_ARCHIVO":6,"IMPORTAR":7,"CLASE":8,"importar":9,"abrePar":10,"cadena":11,"cierraPar":12,"puntoComa":13,"clase":14,"id":15,"CUERPO_CLASE":16,"hereda_de":17,"abreLlave":18,"SENTENCIAS_CLASE":19,"cierraLlave":20,"SENTENCIA_CLASE":21,"ATRIBUTO":22,"FUNCION":23,"FUNCION_SOBRE":24,"PRINCIPAL":25,"VISIBILIDAD":26,"publico":27,"protegido":28,"privado":29,"DECLARACION":30,"DECLA_LISTA":31,"DECLA_PILA":32,"DECLA_COLA":33,"ESTRUCTURA":34,"VISIBLIDAD":35,"DECLA_PUNTERO":36,"arroba":37,"sobreescribir":38,"TIPO_DECLARACION":39,"LISTA_PARAMETROS":40,"CUERPO_FUNCION":41,"vacio":42,"principal":43,"PARAMETROS":44,"PARAMETRO":45,"puntero":46,"COL_ARREGLO":47,"coma":48,"SENTENCIAS":49,"SENTENCIA":50,"CONCATENAR":51,"IMPRIMIR":52,"ROMPER":53,"RETORNO":54,"CONTINUAR":55,"SI":56,"SWITCH":57,"REPETIR_MIENTRAS":58,"HACER_MIENTRAS":59,"CICLO_X":60,"REPETIR":61,"REPETIR_CONTANDO":62,"ENCICLAR":63,"CONTADOR":64,"LEER_TECLADO":65,"ACCESO":66,"ASIGNACION":67,"DESTRUIR_PUNTERO":68,"LLAMADA":69,"PARAMETROS_LLAMADA":70,"Lista":71,"igual":72,"nuevo":73,"Pila":74,"Cola":75,"EXPRESION":76,"INSTANCIA":77,"SIMB_IGUAL":78,"este":79,"punto":80,"masMas":81,"menosMenos":82,"VALOR_PUNTERO":83,"CREAR_PUNTERO":84,"masIgual":85,"menosIgual":86,"porIgual":87,"divIgual":88,"SI_FALSO":89,"Es_falso":90,"SI_VERDADERO":91,"Es_verdadero":92,"Si":93,"CASO":94,"Es_igual_a":95,"dosPuntos":96,"DEFECTO":97,"defecto":98,"LISTA_CASOS":99,"Evaluar_si":100,"Repetir_Mientras":101,"hacer":102,"mientras":103,"Ciclo_doble_condicion":104,"Repetir":105,"hasta_que":106,"Repetir_contando":107,"variable":108,"desde":109,"hasta":110,"Enciclar":111,"Contador":112,"Leer_Teclado":113,"abreCor":114,"cierraCor":115,"concatenar":116,"imprimir":117,"retorno":118,"romper":119,"continuar":120,"estructura":121,"LISTA_DECLARACIONES":122,"t_entero":123,"t_caracter":124,"t_decimal":125,"t_booleano":126,"LOGICA":127,"or":128,"XOR":129,"xor":130,"AND":131,"and":132,"NOT":133,"not":134,"REL":135,"ARITMETICA":136,"SIMB_REL":137,"menor":138,"mayor":139,"menorIgual":140,"mayorIgual":141,"distintoA":142,"igualIgual":143,"mas":144,"MUL":145,"menos":146,"por":147,"POT":148,"division":149,"UNARIO":150,"potencia":151,"NEG":152,"VALOR":153,"entero":154,"decimal":155,"caracter":156,"booleano":157,"nulo":158,"CONVERTIR_CADENA":159,"CONVERTIR_ENTERO":160,"ESTE":161,"CUERPO_ARREGLO":162,"OBTENER_DIRECCION":163,"RESERVAR_MEMORIA":164,"OBTENER_TAMANIO":165,"ATRI":166,"ATRI_":167,"insertar":168,"Apilar":169,"Desapilar":170,"Encolar":171,"Desencolar":172,"obtener":173,"buscar":174,"tamanio":175,"LISTA_EXPRESIONES":176,"LISTA_CUERPO_ARREGLO":177,"ELEMENTO_FILA":178,"CONVERTIR_A_CADENA":179,"convertirACadena":180,"CONVERTIR_A_ENTERO":181,"convertirAEntero":182,"crearPuntero":183,"obtenerDireccion":184,"reservarMemoria":185,"consultarTamanio":186,"flecha":187,"COMPLE_PUNTERO":188,"destruirPuntero":189,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"importar",10:"abrePar",11:"cadena",12:"cierraPar",13:"puntoComa",14:"clase",15:"id",17:"hereda_de",18:"abreLlave",20:"cierraLlave",27:"publico",28:"protegido",29:"privado",35:"VISIBLIDAD",37:"arroba",38:"sobreescribir",42:"vacio",43:"principal",46:"puntero",48:"coma",71:"Lista",72:"igual",73:"nuevo",74:"Pila",75:"Cola",79:"este",80:"punto",81:"masMas",82:"menosMenos",85:"masIgual",86:"menosIgual",87:"porIgual",88:"divIgual",90:"Es_falso",92:"Es_verdadero",93:"Si",95:"Es_igual_a",96:"dosPuntos",98:"defecto",100:"Evaluar_si",101:"Repetir_Mientras",102:"hacer",103:"mientras",104:"Ciclo_doble_condicion",105:"Repetir",106:"hasta_que",107:"Repetir_contando",108:"variable",109:"desde",110:"hasta",111:"Enciclar",112:"Contador",113:"Leer_Teclado",114:"abreCor",115:"cierraCor",116:"concatenar",117:"imprimir",118:"retorno",119:"romper",120:"continuar",121:"estructura",123:"t_entero",124:"t_caracter",125:"t_decimal",126:"t_booleano",128:"or",130:"xor",132:"and",134:"not",138:"menor",139:"mayor",140:"menorIgual",141:"mayorIgual",142:"distintoA",143:"igualIgual",144:"mas",146:"menos",147:"por",149:"division",151:"potencia",154:"entero",155:"decimal",156:"caracter",157:"booleano",158:"nulo",159:"CONVERTIR_CADENA",160:"CONVERTIR_ENTERO",168:"insertar",169:"Apilar",170:"Desapilar",171:"Encolar",172:"Desencolar",173:"obtener",174:"buscar",175:"tamanio",180:"convertirACadena",182:"convertirAEntero",183:"crearPuntero",184:"obtenerDireccion",185:"reservarMemoria",186:"consultarTamanio",187:"flecha",189:"destruirPuntero"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[7,5],[8,3],[8,5],[16,3],[16,2],[19,1],[19,2],[21,1],[21,1],[21,1],[21,1],[26,1],[26,1],[26,1],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,2],[22,2],[22,2],[22,3],[22,2],[24,3],[23,5],[23,5],[23,4],[23,4],[23,4],[23,3],[25,4],[40,3],[40,2],[45,2],[45,3],[45,3],[45,4],[44,1],[44,3],[41,3],[41,2],[49,1],[49,2],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[50,2],[50,2],[50,2],[69,2],[31,9],[32,9],[33,9],[30,5],[30,3],[30,4],[30,6],[30,5],[67,3],[67,3],[67,4],[67,4],[67,3],[67,3],[67,5],[67,5],[67,5],[67,5],[67,6],[67,6],[67,2],[67,2],[67,2],[67,2],[67,4],[67,4],[67,4],[67,4],[67,3],[36,3],[36,1],[77,3],[78,1],[78,1],[78,1],[78,1],[78,1],[89,2],[91,2],[56,6],[56,8],[56,7],[56,7],[56,8],[94,4],[97,3],[99,1],[99,2],[57,8],[57,7],[57,7],[57,6],[58,5],[59,7],[60,7],[61,7],[62,15],[63,3],[64,5],[65,7],[47,3],[47,4],[51,9],[51,7],[52,5],[54,3],[54,2],[53,2],[55,2],[34,6],[122,1],[122,2],[39,1],[39,1],[39,1],[39,1],[39,1],[76,1],[127,3],[127,1],[129,3],[129,1],[131,3],[131,1],[133,2],[133,1],[135,3],[135,1],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[136,3],[136,3],[136,1],[145,3],[145,3],[145,1],[148,3],[148,1],[150,2],[150,2],[150,1],[152,2],[152,1],[153,1],[153,1],[153,1],[153,1],[153,3],[153,1],[153,1],[153,1],[153,1],[153,1],[153,2],[153,2],[153,1],[153,1],[153,1],[153,1],[153,1],[153,1],[153,1],[66,3],[66,4],[66,4],[161,3],[161,3],[161,4],[161,4],[167,1],[167,2],[167,2],[167,4],[167,4],[167,3],[167,4],[167,3],[167,4],[167,4],[167,1],[166,1],[166,3],[176,1],[176,3],[70,2],[70,3],[162,3],[177,1],[177,3],[178,3],[179,5],[181,5],[84,6],[163,4],[164,4],[165,4],[83,3],[188,1],[188,3],[68,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		var a = new Archivo();
		a.setValores($$[$0-1]);
		console.log("llegue hasta aqui");
		return a;
	
break;
case 2:

			var a =[];
			a.push($$[$0]);
			this.$=a;
		
break;
case 3: case 51:

			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;
		
break;
case 4: case 5: case 13: case 14: case 15: case 16: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 154: case 155: case 157: case 159: case 161: case 163: case 165: case 174: case 177: case 179: case 182: case 184: case 193: case 197: case 198: case 199: case 200: case 201: case 202: case 203:
this.$=$$[$0];
break;
case 6:

		var a = new Importar();
		a.setValores($$[$0-2]);
		this.$=a;
	
break;
case 7:

			var a = new Clase();
			a.setValores($$[$0-1],"",$$[$0]);
			this.$=a;
		
break;
case 8:

			var a = new Clase();
			a.setValores($$[$0-3],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 9: case 48: case 231:
this.$= $$[$0-1];
break;
case 10: case 41:
this.$=[];
break;
case 11:

			
			this.$=[];
			this.$.push($$[$0]);
				/*for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
			
		
break;
case 12:

			this.$=$$[$0-1];
			this.$.push($$[$0]);
			

		/*	for(var i=0; i<this.$.length;i++){
				var t =this.$[i];
				if(t instanceof Atributo){
					console.log("Atributo--> "+ t.getVisibilidad());
				}
				if(t instanceof Funcion){
					console.log("Funcion-->" + t.getVisibilidad() +" "+ t.getNombreFuncion());
				}


			}*/
		
break;
case 17:
this.$="publico";
break;
case 18:
this.$="protegido";
break;
case 19:
this.$="privado";
break;
case 20: case 26: case 27: case 28: case 29:

			var a = new Atributo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 21: case 22: case 23: case 24: case 25:

			var a = new Atributo();
			a.setValores("publico",$$[$0]);
			this.$=a;
		
break;
case 30:

			var a = new Atributo();
			a.setValores($$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 31:

			var a = new Atributo();
			a.setValores("publico",$$[$0-1]);
			this.$=a;
		
break;
case 32:

		var a = $$[$0];
		a.setSobreEscrita(true);
		this.$=a;
	
break;
case 33:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 34:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores($$[$0-4],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 35:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico",$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 36:

			var a = new Funcion();
			//function(visib, tipo, nombre,para,sent) 
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 37:

			var a = new Funcion();
			a.setValores($$[$0-3],"vacio",$$[$0-2],$$[$0-1],$$[$0]);
			a.cambiarAConstructor();
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 38:

			var a = new Funcion();
			a.cambiarAConstructor();
			a.setValores("publico","vacio",$$[$0-2],$$[$0-1],$$[$0]);
			//var a = new Constructor();
			//function(visib, nombre,para,sent) 
			//a.setValores("publico",$$[$0-2],$$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 39:

		var a = new Principal();
		a.setValores($$[$0]);
		this.$=a;
	
break;
case 40: case 72: case 73: case 74: case 75: case 76: case 228:
this.$=$$[$0-1];
break;
case 42:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-1],1,idA);
			this.$=a;
		
break;
case 43:

			var idA= new t_id();
		    idA.setValorId($$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],2,idA);
			this.$=a;
		
break;
case 44:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-2],1,b);
			this.$=a;
		
break;
case 45:

			var b = new PosArreglo();
			b.setValores($$[$0-1],$$[$0]);
			var a = new Parametro();
			a.setValores($$[$0-3],2,b);
			this.$=a;
		
break;
case 46: case 50: case 239:

			var a = [];
			a.push($$[$0]);
			this.$=a;
		
break;
case 47: case 240:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;
		
break;
case 49: case 226:
this.$= [];
break;
case 77: case 196:
var i = new Llamada(); i.setValoresLlamada($$[$0-1], $$[$0]); this.$= i;
break;
case 78:

		var a = new DeclaLista();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 79:

		var a = new DeclaPila();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 80:

		var a = new DeclaCola();
		a.setValores($$[$0-7],$$[$0-2]);
		this.$=a;
	
break;
case 81:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var asigna = new Asignacion(); asigna.setValores($$[$0-3],$$[$0-2],$$[$0-1],1);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,1);
		this.$= asigDec;
	
break;
case 82:

			var a = new DeclaVariable(); 
			a.setValores($$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 83:

			var a = new DeclaArreglo(); 
			a.setValores($$[$0-3], $$[$0-2], $$[$0-1]); 
			this.$=a;
		
break;
case 84:

		var decla = new  DeclaArreglo(); decla.setValores($$[$0-5],$$[$0-4], $$[$0-3]);
		var idA= new t_id();
		idA.setValorId($$[$0-4]);
		var asigna = new AsignacionArreglo(); asigna.setValores($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],17);	 //setValores = function(elemento,dimensiones,igual,valor,tipo)
		//console.dir(asigna);
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,asigna,2);
		this.$= asigDec;
	
break;
case 85:

		var decla = new  DeclaVariable(); decla.setValores($$[$0-4],$$[$0-3]);
		var a = new Asignacion(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],2);	
		var asigDec= new AsignaDecla(); asigDec.setValores(decla,a,3);
		this.$= asigDec;
	
break;
case 86:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],1); this.$=a;
break;
case 87:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],2); this.$=a;
break;
case 88:
var a = new AsignacionArreglo(); a.setValores($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],7); this.$=a;
break;
case 90:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],3); this.$=a;
break;
case 91:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],4); this.$=a;
break;
case 92:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],8); this.$=a;
break;
case 93:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],9); this.$=a;
break;
case 94:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],10); this.$=a;
break;
case 95:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],11); this.$=a;
break;
case 96:
var a = new AsignacionArreglo(); a.setValores($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],14); this.$=a;
break;
case 98:

			 var b = new t_id();
			 b.setValorId($$[$0-1]);
			 var a = new AsignacionUnario(); 
			 a.setValores(b,"++",5);
			 this.$=a;
		 
break;
case 99:

			 var b = new t_id();
			 b.setValorId($$[$0-1]);
			 var a = new AsignacionUnario(); 
			 a.setValores(b,"--",5);
			 this.$=a;
		 
break;
case 100:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",6); this.$=a; 
break;
case 101:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",6); this.$=a; 
break;
case 102:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",12); this.$=a; 
break;
case 103:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",12); this.$=a; 
break;
case 104:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"++",13); this.$=a; 
break;
case 105:
var a = new AsignacionUnario(); a.setValores($$[$0-1],"--",13); this.$=a; 
break;
case 106:
 var a = new Asignacion(); a.setValores($$[$0-2],$$[$0-1],$$[$0],15); this.$=a;
break;
case 107:

			var a = new DeclaAsignaPuntero();
			a.setValores($$[$0-2],$$[$0]);
			this.$=a;
		
break;
case 108:

			var a = new DeclaPuntero();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 109:

		var nodoI = new Instancia();
		nodoI.setValores($$[$0-1],$$[$0]);
		this.$ = nodoI;
	
break;
case 110:
this.$="=";
break;
case 111:
this.$="+=";
break;
case 112:
this.$="-=";
break;
case 113:
this.$="*=";
break;
case 114:
this.$="/=";
break;
case 115: case 116:
this.$= $$[$0];
break;
case 117:

			var a = [];
			var b = [];
			var c = new Si();
			c.setValores($$[$0-3],a,b);
			this.$=c;
		
break;
case 118:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=c;
		
break;
case 119:

			var b = [];
			var c = new Si();
			c.setValores($$[$0-4],$$[$0-1],b);
			this.$=c;
		
break;
case 120:

			var a = [];
			var c = new Si();
			c.setValores($$[$0-4],a,$$[$0-1]);
			this.$=c;
		
break;
case 121:

			var c = new Si();
			c.setValores($$[$0-5],$$[$0-1],$$[$0-2]);
			this.$=c;
		
break;
case 122:

		var a = new Caso();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 123:
this.$= $$[$0]
break;
case 124:

			
			var a = []; 
			a.push($$[$0]);
			this.$=a;
		
break;
case 125:

			
			var a = $$[$0-1];
			a.push($$[$0]);
			this.$=a;

		
break;
case 126:

			var a = new Selecciona();
			a.setValores($$[$0-5],$$[$0-2],$$[$0-1]);
			this.$=a;
		
break;
case 127:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],$$[$0-1],c);
			this.$=a;
		
break;
case 128:

			var a = new Selecciona();
			var c= [];
			a.setValores($$[$0-4],c,$$[$0-1]);
			this.$=a;
		
break;
case 129:

			var a = new Selecciona();
			var c= [];
		 	var b = [];
			a.setValores($$[$0-3],b,c);
			this.$=a;
		
break;
case 130:

		var a = new Repetir_Mientras();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 131:

		var a = new Hacer_Mientras();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;	
	
break;
case 132:

		var a = new Ciclo_X();
		a.setValores($$[$0-4],$$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 133:

		var a = new Repetir();
		a.setValores($$[$0-5],$$[$0-2]);
		this.$=a;
	
break;
case 134:

		var a = new DeclaVariable();
		a.setValores("entero",$$[$0-10]);
		var rep = new Repetir_Contando();
		rep.setValores(a,$$[$0-6], $$[$0-2],$$[$0]);
		this.$= rep;	
	
break;
case 135:

		var a = new Enciclar();
		a.setValores($$[$0-1],$$[$0]);
		this.$=a;
	
break;
case 136:

		var a = new Contador();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 137:

		var a = new LeerTeclado();
		a.setValores($$[$0-4],$$[$0-2]);
		this.$=a;
	
break;
case 138:
var a = []; a.push($$[$0-1]); this.$=a;
break;
case 139:
var a =$$[$0-3]; a.push($$[$0-1]); this.$=a;
break;
case 140:

			var a = new Concatenar();
			a.setValores($$[$0-6],$$[$0-4],$$[$0-2],1);
			this.$=a;
		
break;
case 141:

			var a = new Concatenar();
			a.setValores($$[$0-4],$$[$0-2],null,2);
			this.$=a;
		
break;
case 142:

		var a = new Imprimir();
		a.setExpresion($$[$0-2]);
		this.$=a;
	
break;
case 143:

		var a = new Retorno();
		a.setExpresion($$[$0-1]);
		this.$=a;
	
break;
case 144:

		var a = new Retorno();
		a.setExpresion(null);
		this.$=a;
	
break;
case 145:
 this.$ = new Romper();
break;
case 146:
this.$ = new Continuar();
break;
case 147:

	var a = new Estructura();
	a.setValores($$[$0-4],$$[$0-2]);
 	this.$=a;

break;
case 148:
var a = []; a.push($$[$0]); this.$= a;
break;
case 149:
var a = $$[$0-1]; a.push($$[$0]); this.$=a;
break;
case 150:
this.$="entero";
break;
case 151:
this.$="caracter";
break;
case 152:
this.$="decimal";
break;
case 153:
this.$="booleano";
break;
case 156:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"||"); this.$=a;
break;
case 158:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"??"); this.$=a;
break;
case 160:
var a = new Logica(); a.setValores($$[$0-2],$$[$0],"&&"); this.$=a;
break;
case 162:
 var a = new Not_logica(); a.setExpresion($$[$0]); this.$= a;
break;
case 164:
var a = new Relacional(); a.setValores($$[$0-2],$$[$0],$$[$0-1]); this.$= a;
break;
case 166:
this.$="<";
break;
case 167:
this.$=">";
break;
case 168:
this.$="<=";
break;
case 169:
this.$=">=";
break;
case 170:
this.$="!=";
break;
case 171:
this.$="==";
break;
case 172:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"+"); this.$=a;
break;
case 173:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"-"); this.$=a;
break;
case 175:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"*"); this.$=a;
break;
case 176:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"/"); this.$=a;
break;
case 178:
var a = new Aritmetica(); a.setValores($$[$0-2],$$[$0],"^"); this.$=a;
break;
case 180:
var a = new Unario(); a.setValores($$[$0-1],"++"); this.$=a;
break;
case 181:
var a = new Unario(); a.setValores($$[$0-1],"--"); this.$=a;
break;
case 183:
 var a = new Negativo(); a.setExpresion($$[$0]); this.$=a;
break;
case 185:
var num = new Entero(); num.setNumero($$[$0]); this.$= num;
break;
case 186:
var num = new Decimal(); num.setNumero($$[$0]); this.$=num;
break;
case 187:
var car= new Caracter(); car.setValorCaracter($$[$0]); this.$=car;
break;
case 188:
var bol= new Booleano(); bol.setValorBooleano($$[$0]); this.$=bol;
break;
case 189:
 this.$=$$[$0-1];
break;
case 190:
var n = new Cadena(); n.setCadena($$[$0]); this.$=n;
break;
case 191:
var n = new Nulo(); n.setNulo(); this.$=n;
break;
case 192:
this.$=S1;
break;
case 194:
 var idNuevo = new t_id(); idNuevo.setValorId($$[$0]); this.$= idNuevo;
break;
case 195:
var i = new PosArreglo(); i.setValores($$[$0-1], $$[$0]); this.$=i;
break;
case 204:

			var b = new t_id();
			b.setValorId($$[$0-2]);	
			var a = new Acceso();
			a.setValores(b,$$[$0]);
			this.$=a;
		
break;
case 205:

			var a = new PosArreglo();
			a.setValores($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 206:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-3],$$[$0-2]);
			var b = new Acceso();
			b.setValores(a,$$[$0]);
			this.$=b;
		
break;
case 207:

			var a = new Este();
			a.setValores($$[$0]);
			this.$=a;
		
break;
case 208:

			var a = new t_id();
			a.setValorId($$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 209:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			var b = new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 210:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			var b= new Este();
			b.setValores(a);
			this.$=b;
		
break;
case 211:

			var a = new t_id();
			a.setValorId($$[$0]);
			this.$=a;
		
break;
case 212:

			var a = new PosArreglo();
			a.setValores($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 213:

			var a = new Llamada();
			a.setValoresLlamada($$[$0-1],$$[$0]);
			this.$=a;
		
break;
case 214: case 215: case 217: case 219: case 220:

			var a = new FuncionNativa();
			a.setValores($$[$0-3], $$[$0-1]);
			this.$=a;
		
break;
case 216: case 218:

			var a = new FuncionNativa();
			a.setValores($$[$0-2], null);
			this.$=a;
		
break;
case 221:

			var a = new FuncionNativa();
			a.setValores($$[$0], null);
			this.$=a;
		
break;
case 222:

			var a = [];
			a.push($$[$0]);
			this.$=a;

		
break;
case 223:

			var a = $$[$0-2];
			a.push($$[$0]);
			this.$=a;

		
break;
case 224:
 var arreglo = []; var g= arreglo.push($$[$0]); this.$= arreglo;
break;
case 225:
var arreglo = $$[$0-2]; var g= arreglo.push($$[$0]);  this.$= arreglo;
break;
case 227:
this.$=$$[$0-1]; console.log($$[$0-1]);
break;
case 229:
var arreglo = []; arreglo.push($$[$0]); this.$= arreglo;
break;
case 230:
var arreglo= $$[$0-2]; arreglo.push($$[$0]); this.$=arreglo;
break;
case 232:
var a = new convertirCadena(); a.setExpresionCadena($$[$0-2]); this.$= a;
break;
case 233:
var a = new convertirEntero(); a.setExpresionEntero($$[$0-2]); this.$=a;
break;
case 234:

		var a = new Puntero();
		a.setValores($$[$0-3],$$[$0-1]);
		this.$=a;
	
break;
case 235:

		var a = new obtenerDireccion();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 236:

		var a = new ReservarMemoria();
		a.setValores($$[$0-1]);
		this.$=a;
	
break;
case 237:

		var a = new ObtenerTamanio();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
case 238:

		var a = new ValorPuntero();
		a.setValores($$[$0-2],$$[$0]);
		this.$=a;
	
break;
case 241:

		var a = new destruirPuntero();
		a.setValores($$[$0-1]);
		this.$=a;
	
	
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,14:$V1},{1:[3]},{5:[1,8],6:9,7:4,8:5,9:$V0,14:$V1},o($V2,[2,2]),o($V2,[2,4]),o($V2,[2,5]),{10:[1,10]},{15:[1,11]},{1:[2,1]},o($V2,[2,3]),{11:[1,12]},{16:13,17:[1,14],18:$V3},{12:[1,16]},o($V2,[2,7]),{15:[1,17]},{15:$V4,19:18,20:[1,19],21:20,22:21,23:22,24:23,25:24,26:25,27:$V5,28:$V6,29:$V7,30:26,31:27,32:28,33:29,34:30,35:$V8,36:32,37:$V9,39:33,42:$Va,43:$Vb,71:$Vc,74:$Vd,75:$Ve,84:45,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk},{13:[1,51]},{16:52,18:$V3},{15:$V4,20:[1,53],21:54,22:21,23:22,24:23,25:24,26:25,27:$V5,28:$V6,29:$V7,30:26,31:27,32:28,33:29,34:30,35:$V8,36:32,37:$V9,39:33,42:$Va,43:$Vb,71:$Vc,74:$Vd,75:$Ve,84:45,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk},o($V2,[2,10]),o($Vl,[2,11]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),{15:$Vm,30:55,31:56,32:58,33:57,36:59,39:60,42:$Vn,71:$Vc,74:$Vd,75:$Ve,84:45,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk},o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),{34:63,121:$Vf},{13:[1,64]},{15:[1,65]},{15:[1,66]},{10:$Vo,15:$Vp,40:67},{38:[1,69]},{10:[1,70]},o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),{15:[1,71]},{15:[1,72]},{15:[1,73]},{15:[1,74]},{13:[2,108],72:[1,75]},o($Vr,[2,150]),o($Vr,[2,151]),o($Vr,[2,152]),o($Vr,[2,153]),{10:[1,76]},o($V2,[2,6]),o($V2,[2,8]),o($V2,[2,9]),o($Vl,[2,12]),o($Vl,[2,20]),o($Vl,[2,26]),o($Vl,[2,27]),o($Vl,[2,28]),{13:[1,77]},{15:[1,78]},{15:[1,79]},{10:$Vo,15:$Vp,40:80},o($Vl,[2,29]),o($Vl,[2,31]),{10:$Vo,13:$Vs,40:81,47:84,72:$Vt,114:$Vu},{10:$Vo,40:86},{18:$Vv,41:87},{12:[1,90],15:$Vw,39:92,44:89,45:91,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:$V4,23:94,26:95,27:$V5,28:$V6,29:$V7,39:96,42:$Va,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{12:[1,97]},{72:[1,98]},{72:[1,99]},{72:[1,100]},{114:[1,101]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:102,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{15:$Vw,39:138,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($Vl,[2,30]),{10:$Vo,13:$Vs,40:139,47:84,72:$Vt,114:$Vu},{10:$Vo,40:140},{18:$Vv,41:141},{18:$Vv,41:142},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,73:$VO,76:143,77:144,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VP,[2,82]),{13:[1,146],72:[1,147],114:$VQ},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:149,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{18:$Vv,41:150},o($Vl,[2,38]),{15:$VR,20:[1,152],30:154,31:161,32:162,33:163,34:160,36:177,39:179,49:151,50:153,51:155,52:156,53:157,54:158,55:159,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,69:178,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:197,84:45,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61},{12:[1,199],48:[1,200]},{18:[2,41]},o($V71,[2,46]),{15:[1,201],46:[1,202]},o($Vr,$Vp),o($Vl,[2,32]),{15:$Vm,39:203,42:$Vn,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:[1,204]},{18:$Vv,41:205},{73:[1,206]},{73:[1,207]},{73:[1,208]},{15:$Vw,30:210,39:179,122:209,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{13:[2,107]},o([12,13,20,48,96,115],[2,155],{128:[1,211]}),o($V81,[2,157],{130:$V91}),o($Va1,[2,159],{132:$Vb1}),o($Vc1,[2,161]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,135:214,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vc1,[2,163]),o($Vc1,[2,165],{137:215,138:[1,218],139:[1,219],140:[1,220],141:[1,221],142:[1,222],143:[1,223],144:$Vd1,146:$Ve1}),o($Vf1,[2,174],{147:$Vg1,149:$Vh1}),o($Vi1,[2,177]),o($Vi1,[2,179],{151:[1,226]}),o($Vj1,[2,182],{81:[1,227],82:[1,228]}),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,153:229,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vk1,[2,184]),o($Vk1,[2,185]),o($Vk1,[2,186]),o($Vk1,[2,187]),o($Vk1,[2,188]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:230,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vk1,[2,190]),o($Vk1,[2,191]),o($Vk1,[2,192]),o($Vk1,[2,193]),o($Vk1,[2,194],{47:231,70:232,10:$Vl1,80:$Vm1,114:$Vu,187:$Vn1}),o($Vk1,[2,197]),o($Vk1,[2,198]),o($Vk1,[2,199]),o($Vk1,[2,200]),o($Vk1,[2,201]),o($Vk1,[2,202]),o($Vk1,[2,203]),{80:[1,236]},{18:$Vo1,177:237,178:238},{10:[1,240]},{10:[1,241]},{10:[1,242]},{48:[1,243]},{18:$Vv,41:244},{18:$Vv,41:245},o($Vl,[2,37]),o($Vl,[2,35]),{13:[1,246]},{13:[1,247]},{15:[1,248]},o($VP,[2,83]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:249,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:250,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{115:[1,251]},o($Vl,[2,36]),{15:$VR,20:[1,252],30:154,31:161,32:162,33:163,34:160,36:177,39:179,50:253,51:155,52:156,53:157,54:158,55:159,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,69:178,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:197,84:45,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61},o($Vp1,[2,49]),o($Vq1,[2,50]),o($Vq1,[2,52]),o($Vq1,[2,53]),o($Vq1,[2,54]),o($Vq1,[2,55]),o($Vq1,[2,56]),o($Vq1,[2,57]),o($Vq1,[2,58]),o($Vq1,[2,59]),o($Vq1,[2,60]),o($Vq1,[2,61]),o($Vq1,[2,62]),o($Vq1,[2,63]),o($Vq1,[2,64]),o($Vq1,[2,65]),o($Vq1,[2,66]),o($Vq1,[2,67]),o($Vq1,[2,68]),o($Vq1,[2,69]),o($Vq1,[2,70]),o($Vq1,[2,71]),{13:[1,254],72:[1,256],78:255,81:[1,257],82:[1,258],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[1,263]},{13:[1,264]},{13:[1,265]},{13:[1,266]},{15:[1,267]},{10:[1,268]},{10:[1,269]},{13:[1,270]},{10:$Vx,11:$Vy,13:[1,272],15:$Vz,18:$VA,66:126,76:271,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{13:[1,273]},{10:[1,274]},{10:[1,275]},{10:[1,276]},{18:$Vv,41:277},{10:[1,278]},{18:$Vv,41:279},{10:[1,280]},{15:[1,281]},{10:[1,282]},{10:[1,283]},{10:$Vl1,15:$Vp,47:284,70:285,72:[1,287],78:286,80:$Vm1,81:[1,288],82:[1,289],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$Vu,187:$Vn1},{80:[1,290]},{72:[1,291]},{10:[1,292]},{18:[2,40]},{15:$Vw,39:92,45:293,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($V71,[2,42],{47:294,114:$Vu}),{15:[1,295]},{15:[1,296]},{10:$Vo,40:81},o($Vl,[2,39]),{71:[1,297]},{74:[1,298]},{75:[1,299]},{15:$Vw,30:301,39:179,115:[1,300],123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($Vv1,[2,148]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,129:302,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,131:303,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,133:304,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vc1,[2,162]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,136:305,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,145:306,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,145:307,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vw1,[2,166]),o($Vw1,[2,167]),o($Vw1,[2,168]),o($Vw1,[2,169]),o($Vw1,[2,170]),o($Vw1,[2,171]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,146:$VD,148:308,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,146:$VD,148:309,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,79:$VB,83:132,146:$VD,148:310,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vj1,[2,180]),o($Vj1,[2,181]),o($Vk1,[2,183]),{12:[1,311]},o($Vk1,[2,195],{80:$Vx1,114:$VQ}),o($Vk1,[2,196],{80:$Vy1}),{15:$Vz1,166:314,167:315,168:$VA1,169:$VB1,170:$VC1,171:$VD1,172:$VE1,173:$VF1,174:$VG1,175:$VH1},{15:[1,326],188:325},{10:$Vx,11:$Vy,12:[1,327],15:$Vz,18:$VA,66:126,76:329,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,176:328,184:$VL,185:$VM,186:$VN},{15:[1,331],66:330},{20:[1,332],48:[1,333]},o($VI1,[2,229]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:329,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,176:334,184:$VL,185:$VM,186:$VN},{15:[1,335]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:336,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:337,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{15:[1,338]},o($Vl,[2,33]),o($Vl,[2,34]),o($VP,[2,81]),o($VP,[2,85]),{10:$Vl1,70:339},{13:[1,340]},{115:[1,341]},o($VJ1,[2,138]),o($Vp1,[2,48]),o($Vq1,[2,51]),o($Vq1,[2,72]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:342,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:343,73:$VO}),{13:[2,100]},{13:[2,101]},o($VK1,[2,111]),o($VK1,[2,112]),o($VK1,[2,113]),o($VK1,[2,114]),o($Vq1,[2,73]),o($Vq1,[2,74]),o($Vq1,[2,75]),o($Vq1,[2,76]),{13:$Vs,47:84,72:$Vt,114:$Vu},{15:[1,344]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:345,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vq1,[2,145]),{13:[1,346]},o($Vq1,[2,144]),o($Vq1,[2,146]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:347,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:348,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:349,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{103:[1,350]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:351,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{106:[1,352]},{108:[1,353]},{18:$Vv,41:354},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:355,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:356,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{72:[1,358],78:357,80:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$VQ},{13:[2,77],80:$Vy1},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:359,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:360,73:$VO}),{13:[2,98]},{13:[2,99]},{15:[1,361],66:362},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:363,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{15:[1,364]},o($V71,[2,47]),o($V71,[2,44],{114:$VQ}),o($V71,[2,43],{47:365,114:$Vu}),{10:$Vo,40:139},{10:[1,366]},{10:[1,367]},{10:[1,368]},{13:[1,369]},o($Vv1,[2,149]),o($V81,[2,156],{130:$V91}),o($Va1,[2,158],{132:$Vb1}),o($Vc1,[2,160]),o($Vc1,[2,164],{144:$Vd1,146:$Ve1}),o($Vf1,[2,172],{147:$Vg1,149:$Vh1}),o($Vf1,[2,173],{147:$Vg1,149:$Vh1}),o($Vi1,[2,175]),o($Vi1,[2,176]),o($Vi1,[2,178]),o($Vk1,[2,189]),{15:$Vz1,166:370,167:315,168:$VA1,169:$VB1,170:$VC1,171:$VD1,172:$VE1,173:$VF1,174:$VG1,175:$VH1},{15:$Vz1,166:371,167:315,168:$VA1,169:$VB1,170:$VC1,171:$VD1,172:$VE1,173:$VF1,174:$VG1,175:$VH1},o($VM1,[2,204],{80:$VN1}),o($VO1,[2,222]),o($VO1,[2,211],{47:373,70:374,10:$Vl1,114:$Vu}),{10:[1,375]},{10:[1,376]},{10:[1,377]},{10:[1,378]},{10:[1,379]},{10:[1,380]},{10:[1,381]},o($VO1,[2,221]),o([12,13,20,48,72,81,82,96,115,128,130,132,138,139,140,141,142,143,144,146,147,149,151],[2,238],{187:[1,382]}),o($VP1,[2,239]),o($VO1,[2,226]),{12:[1,383],48:$VQ1},o($VR1,[2,224]),o($Vk1,[2,207]),o($Vk1,[2,208],{47:385,70:386,10:$Vl1,80:$Vm1,114:$Vu}),o($Vk1,[2,228]),{18:$Vo1,178:387},{20:[1,388],48:$VQ1},{12:[1,389]},{12:[1,390]},{12:[1,391]},{12:[1,392]},{13:[2,109]},o($VP,[2,84]),o($VJ1,[2,139]),{13:[2,90]},{13:[2,91]},{48:[1,393]},{12:[1,394]},o($Vq1,[2,143]),{12:[1,395]},{12:[1,396]},{12:[1,397]},{10:[1,398]},{48:[1,399]},{10:[1,400]},{96:[1,401]},o($Vq1,[2,135]),{12:[1,402]},{48:[1,403]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:404,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:405,73:$VO}),{13:[2,86]},{13:[2,87]},{10:$Vl1,47:408,70:411,72:[1,407],78:406,80:$Vm1,81:[1,409],82:[1,410],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$Vu},{72:[1,413],78:412,81:[1,414],82:[1,415],85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1},{13:[2,106]},{12:[1,416]},o($V71,[2,45],{114:$VQ}),{15:$Vw,39:417,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:$Vw,39:418,123:$Vg,124:$Vh,125:$Vi,126:$Vj},{15:$Vw,39:419,123:$Vg,124:$Vh,125:$Vi,126:$Vj},o($VS1,[2,147]),o($VM1,[2,205],{80:$VN1}),o($VM1,[2,206],{80:$VN1}),{15:$Vz1,167:420,168:$VA1,169:$VB1,170:$VC1,171:$VD1,172:$VE1,173:$VF1,174:$VG1,175:$VH1},o($VO1,[2,212],{114:$VQ}),o($VO1,[2,213]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:421,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:422,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{12:[1,423]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:424,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{12:[1,425]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:426,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:427,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{15:[1,428]},o($VO1,[2,227]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:429,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vk1,[2,209],{80:$Vx1,114:$VQ}),o($Vk1,[2,210],{80:$Vy1}),o($VI1,[2,230]),o($VI1,[2,231]),o($Vk1,[2,235]),o($Vk1,[2,236]),o($Vk1,[2,237]),o([13,72],[2,234]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:430,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{13:[1,431]},{18:[1,432]},{18:[1,433]},{18:$Vv,41:434},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:435,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:436,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:437,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{15:[1,438]},{18:$Vv,41:439},{15:[1,440]},{13:[2,88]},{13:[2,89]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:441,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:442,73:$VO}),{72:[1,444],78:443,80:$Vx1,85:$Vr1,86:$Vs1,87:$Vt1,88:$Vu1,114:$VQ},{13:[2,102]},{13:[2,103]},{80:$Vy1},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:445,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:446,73:$VO}),{13:[2,104]},{13:[2,105]},{13:[2,241]},{12:[1,447]},{12:[1,448]},{12:[1,449]},o($VO1,[2,223]),{12:[1,450]},{12:[1,451]},o($VO1,[2,216]),{12:[1,452]},o($VO1,[2,218]),{12:[1,453]},{12:[1,454]},o($VP1,[2,240]),o($VR1,[2,225]),{12:[1,456],48:[1,455]},o($Vq1,[2,142]),{20:[1,457],89:459,90:$VT1,91:458,92:$VU1},{20:[1,464],94:465,95:$VV1,97:463,98:$VW1,99:462},o($Vq1,[2,130]),{12:[1,468]},{12:[1,469]},{12:[1,470]},{13:[1,471]},o($Vq1,[2,136]),{12:[1,472]},{13:[2,92]},{13:[2,93]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:473,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($VK1,$VL1,{77:474,73:$VO}),{13:[2,94]},{13:[2,95]},{13:[1,475]},{13:[1,476]},{13:[1,477]},o($VO1,[2,214]),o($VO1,[2,215]),o($VO1,[2,217]),o($VO1,[2,219]),o($VO1,[2,220]),{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:478,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{13:[1,479]},o($Vq1,[2,117]),{20:[1,481],89:480,90:$VT1},{20:[1,482],91:483,92:$VU1},{18:$Vv,41:484},{18:$Vv,41:485},{20:[1,487],94:488,95:$VV1,97:486,98:$VW1},{20:[1,489]},o($Vq1,[2,129]),o($VX1,[2,124]),{96:[1,490]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:491,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{13:[1,492]},{18:$Vv,41:493},{13:[1,494]},{109:[1,495]},{13:[1,496]},{13:[2,96]},{13:[2,97]},o($VS1,[2,78]),o($VS1,[2,79]),o($VS1,[2,80]),{12:[1,497]},o($Vq1,[2,141]),{20:[1,498]},o($Vq1,[2,119]),o($Vq1,[2,120]),{20:[1,499]},o([20,90],[2,116]),o([20,92],[2,115]),{20:[1,500]},o($Vq1,[2,127]),o($VX1,[2,125]),o($Vq1,[2,128]),{15:$VR,30:154,31:161,32:162,33:163,34:160,36:177,39:179,49:501,50:153,51:155,52:156,53:157,54:158,55:159,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,69:178,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:197,84:45,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61},{96:[1,502]},o($Vq1,[2,131]),o($Vq1,[2,132]),o($Vq1,[2,133]),{96:[1,503]},o($Vq1,[2,137]),{13:[1,504]},o($Vq1,[2,118]),o($Vq1,[2,121]),o($Vq1,[2,126]),{15:$VR,20:[2,123],30:154,31:161,32:162,33:163,34:160,36:177,39:179,50:253,51:155,52:156,53:157,54:158,55:159,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,69:178,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:197,84:45,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61},{15:$VR,30:154,31:161,32:162,33:163,34:160,36:177,39:179,49:505,50:153,51:155,52:156,53:157,54:158,55:159,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,69:178,71:$Vc,74:$Vd,75:$Ve,79:$VS,83:197,84:45,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:506,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},o($Vq1,[2,140]),o($VX1,[2,122],{84:45,30:154,51:155,52:156,53:157,54:158,55:159,34:160,31:161,32:162,33:163,56:164,57:165,58:166,59:167,60:168,61:169,62:170,63:171,64:172,65:173,66:174,67:175,68:176,36:177,69:178,39:179,83:197,50:253,15:$VR,71:$Vc,74:$Vd,75:$Ve,79:$VS,93:$VT,100:$VU,101:$VV,102:$VW,104:$VX,105:$VY,107:$VZ,111:$V_,112:$V$,113:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$Vf,123:$Vg,124:$Vh,125:$Vi,126:$Vj,183:$Vk,189:$V61}),{13:[1,507]},{110:[1,508]},{96:[1,509]},{10:$Vx,11:$Vy,15:$Vz,18:$VA,66:126,76:510,79:$VB,83:132,127:103,129:104,131:105,133:106,134:$VC,135:108,136:109,145:110,146:$VD,148:111,150:112,152:113,153:115,154:$VE,155:$VF,156:$VG,157:$VH,158:$VI,159:$VJ,160:$VK,161:127,162:128,163:129,164:130,165:131,184:$VL,185:$VM,186:$VN},{12:[1,511]},{18:$Vv,41:512},o($Vq1,[2,134])],
defaultActions: {8:[2,1],90:[2,41],102:[2,107],199:[2,40],257:[2,100],258:[2,101],288:[2,98],289:[2,99],339:[2,109],342:[2,90],343:[2,91],359:[2,86],360:[2,87],363:[2,106],404:[2,88],405:[2,89],409:[2,102],410:[2,103],414:[2,104],415:[2,105],416:[2,241],441:[2,92],442:[2,93],445:[2,94],446:[2,95],473:[2,96],474:[2,97]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	var listaPrueba =[];
	var Clase = require("./Arbol/Clase");
	var arreglin = require("./Arbol/arreglo");
    var Atributo = require("./Arbol/Atributo");
    var Archivo = require("./Arbol/Archivo");
    
    var  Acceso = require("./Arbol/Expresion/Acceso");
    var Aritmetica = require("./Arbol/Expresion/Aritmetica");
    var Booleano = require("./Arbol/Expresion/Booleano");
    var Cadena = require("./Arbol/Expresion/Cadena");
    var Caracter = require("./Arbol/Expresion/Caracter");
    var convertirCadena = require("./Arbol/Expresion/convertirCadena");
    var convertirEntero = require("./Arbol/Expresion/convertirEntero");
    var Decimal = require("./Arbol/Expresion/Decimal");
    var Entero = require("./Arbol/Expresion/Entero");
    var Este = require("./Arbol/Expresion/Este");
    var FuncionNativa = require("./Arbol/Expresion/FuncionNativa");
    var Instancia = require("./Arbol/Expresion/Instancia");
    var  Llamada = require("./Arbol/Expresion/Llamada");
    var  Logica = require("./Arbol/Expresion/Logica");
    var  Negativo = require("./Arbol/Expresion/Negativo");
    var  Not_logica= require("./Arbol/Expresion/Not_logica");
    var  Nulo= require("./Arbol/Expresion/Nulo");
    var  obtenerDireccion= require("./Arbol/Expresion/obtenerDireccion");
    var  ObtenerTamanio= require("./Arbol/Expresion/ObtenerTamanio");
    var  PosArreglo= require("./Arbol/Expresion/PosArreglo");
    var  Relacional= require("./Arbol/Expresion/Relacional");
    var  ReservarMemoria= require("./Arbol/Expresion/ReservarMemoria");
    var  t_id= require("./Arbol/Expresion/t_id");
    var  Unario= require("./Arbol/Expresion/Unario");
    var  ValorPuntero= require("./Arbol/Expresion/ValorPuntero");


    var  Constructor = require("./Arbol/Funciones/Constructor");
    var  Funcion = require("./Arbol/Funciones/Funcion");
    var  Parametro = require("./Arbol/Funciones/Parametro");
    var  Principal = require("./Arbol/Funciones/Principal");

    var Asignacion = require("./Arbol/Sentencias/Asignacion");
    var  AsignacionArreglo= require("./Arbol/Sentencias/AsignacionArreglo");
    var AsignacionUnario = require("./Arbol/Sentencias/AsignacionUnario");
    var AsignaDecla = require("./Arbol/Sentencias/AsignaDecla");
    var  Caso= require("./Arbol/Sentencias/Caso");
    var  Ciclo_X= require("./Arbol/Sentencias/Ciclo_X");
    var Concatenar = require("./Arbol/Sentencias/Concatenar");
    var  Contador= require("./Arbol/Sentencias/Contador");
    var Continuar = require("./Arbol/Sentencias/Continuar");
    var  DeclaArreglo= require("./Arbol/Sentencias/DeclaArreglo");
    var  DeclaAsignaPuntero= require("./Arbol/Sentencias/DeclaAsignaPuntero");
    var  DeclaCola= require("./Arbol/Sentencias/DeclaCola");
    var  DeclaLista= require("./Arbol/Sentencias/DeclaLista");
    var DeclaPila = require("./Arbol/Sentencias/DeclaPila");
    var  DeclaPuntero = require("./Arbol/Sentencias/DeclaPuntero");
    var  DeclaVariable= require("./Arbol/Sentencias/DeclaVariable");
    var  destruirPuntero= require("./Arbol/Sentencias/destruirPuntero");
    var  Enciclar= require("./Arbol/Sentencias/Enciclar");
    var  Estructura= require("./Arbol/Sentencias/Estructura");
    var  Hacer_Mientras= require("./Arbol/Sentencias/Hacer_Mientras");
    var  Importar= require("./Arbol/Sentencias/Importar");
    var  Imprimir= require("./Arbol/Sentencias/Imprimir");
    var  Leer_Teclado= require("./Arbol/Sentencias/LeerTeclado");
    var  Puntero= require("./Arbol/Sentencias/Puntero");
    var  Repetir= require("./Arbol/Sentencias/Repetir");
    var  Repetir_Contando= require("./Arbol/Sentencias/Repetir_Contando");
    var  Repetir_Mientras= require("./Arbol/Sentencias/Repetir_Mientras");
    var  Retorno= require("./Arbol/Sentencias/Retorno");
    var  Romper= require("./Arbol/Sentencias/Romper");
    var  Selecciona= require("./Arbol/Sentencias/Selecciona");
    var  Si= require("./Arbol/Sentencias/Si");

 var errores = require("./Errores/listaErrores");

    function errorSintactico(valor, linea){
        var er = new errores();
        er.insertarErrorPos("Sintactico", "Ha ocurrido un error "+ valor,linea);
    }

    function errosLexico (valor, linea){
        var er= new errores();
        er.insertarErrorPos("Lexico", "Ha ocurrido un error "+valor, linea);
    }


	 
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 88
break;
case 4:return 149
break;
case 5:return 183
break;
case 6:return 184
break;
case 7:return 185
break;
case 8:return 186
break;
case 9:return 187
break;
case 10:return 189
break;
case 11:return 175
break;
case 12:return 101
break;
case 13:return 102
break;
case 14:return 103
break;
case 15:return 104
break;
case 16:return 105
break;
case 17:return 106
break;
case 18:return 107
break;
case 19:return 108
break;
case 20:return 109
break;
case 21:return 110
break;
case 22:return 111
break;
case 23:return 112
break;
case 24:return 113
break;
case 25:return 100
break;
case 26:return 95
break;
case 27:return 98
break;
case 28:return 90
break;
case 29:return 92
break;
case 30:return 93
break;
case 31:return 71
break;
case 32:return 74
break;
case 33:return 75
break;
case 34:return 168
break;
case 35:return 173
break;
case 36:return 174
break;
case 37:return 171
break;
case 38:return 172
break;
case 39:return 170
break;
case 40:return 169
break;
case 41:return 9
break;
case 42:return 37
break;
case 43:return 38
break;
case 44:return 116
break;
case 45:return 48
break;
case 46:return 182
break;
case 47:return 180
break;
case 48:return 117
break;
case 49:return 118
break;
case 50:return 119
break;
case 51:return 43
break;
case 52:return 73
break;
case 53:return 27
break;
case 54:return 28
break;
case 55:return 29
break;
case 56:return 120
break;
case 57:return 158
break;
case 58:return 158
break;
case 59:'nulo'
break;
case 60:return 140
break;
case 61:return 141
break;
case 62:return 143
break;
case 63:return 142
break;
case 64:return 138
break;
case 65:return 139
break;
case 66:return 17
break;
case 67:return 14
break;
case 68:return 79
break;
case 69:return 46
break;
case 70:return 42
break;
case 71:return 157
break;
case 72:return 157 
break;
case 73:return 121
break;
case 74:return 80
break;
case 75:return 123
break;
case 76:return 124
break;
case 77:return 126
break;
case 78:return 125
break;
case 79:return 85
break;
case 80:return 86
break;
case 81:return 87
break;
case 82:return 72
break;
case 83:return 81
break;
case 84:return 82
break;
case 85:return 147
break;
case 86:return 146
break;
case 87:return 144
break;
case 88:return 151
break;
case 89:return 10
break;
case 90:return 12
break;
case 91:return 18
break;
case 92:return 20
break;
case 93:return 114
break;
case 94:return 115
break;
case 95:return 128
break;
case 96:return 132
break;
case 97:return 130
break;
case 98:return 134
break;
case 99:return 13
break;
case 100:return 96
break;
case 101:return 11;
break;
case 102:return 15
break;
case 103:return 155
break;
case 104:return 154
break;
case 105:return 156
break;
case 106:return 5
break;
case 107:errosLexico(yy_.yytext,yy_.yylineno);   return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:crearPuntero\b)/i,/^(?:obtenerDireccion\b)/i,/^(?:reservarMemoria\b)/i,/^(?:consultarTamnio\b)/i,/^(?:->)/i,/^(?:destruirPuntero\b)/i,/^(?:tamanio\b)/i,/^(?:Repetir_Mientras\b)/i,/^(?:hacer\b)/i,/^(?:mientras\b)/i,/^(?:Ciclo_doble_condicion\b)/i,/^(?:Repetir\b)/i,/^(?:hasta_que\b)/i,/^(?:Repetir_contando\b)/i,/^(?:variable\b)/i,/^(?:desde\b)/i,/^(?:hasta\b)/i,/^(?:Enciclar\b)/i,/^(?:Contador\b)/i,/^(?:Leer_Teclado\b)/i,/^(?:Evaluar_si\b)/i,/^(?:Es_igual_a\b)/i,/^(?:defecto\b)/i,/^(?:Es_falso\b)/i,/^(?:Es_verdadero\b)/i,/^(?:Si\b)/i,/^(?:Lista\b)/i,/^(?:Pila\b)/i,/^(?:Cola\b)/i,/^(?:insertar\b)/i,/^(?:obtener\b)/i,/^(?:buscar\b)/i,/^(?:Encolar\b)/i,/^(?:Desencolar\b)/i,/^(?:desapilar\b)/i,/^(?:apilar\b)/i,/^(?:importar\b)/i,/^(?:@)/i,/^(?:Sobreescribir\b)/i,/^(?:concatenar\b)/i,/^(?:,)/i,/^(?:convertirAEntero\b)/i,/^(?:convertirACadena\b)/i,/^(?:imprimir\b)/i,/^(?:retorno\b)/i,/^(?:romper\b)/i,/^(?:principal\b)/i,/^(?:nuevo\b)/i,/^(?:publico\b)/i,/^(?:protegido\b)/i,/^(?:privado\b)/i,/^(?:continuar\b)/i,/^(?:Nada\b)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:hereda_de\b)/i,/^(?:clase\b)/i,/^(?:este\b)/i,/^(?:puntero\b)/i,/^(?:vacio\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:estructura\b)/i,/^(?:\.)/i,/^(?:entero\b)/i,/^(?:caracter\b)/i,/^(?:booleano\b)/i,/^(?:decimal\b)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}