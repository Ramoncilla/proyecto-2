/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lecciones = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,27],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,15],$V9=[7,14,16,18,20,23,29,31],$Va=[1,40],$Vb=[1,73],$Vc=[1,74],$Vd=[1,41],$Ve=[1,44],$Vf=[1,45],$Vg=[1,42],$Vh=[1,43],$Vi=[1,39],$Vj=[1,38],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,64],$VD=[1,65],$VE=[1,66],$VF=[1,67],$VG=[1,68],$VH=[1,69],$VI=[1,70],$VJ=[1,71],$VK=[1,72],$VL=[1,75],$VM=[1,76],$VN=[1,77],$VO=[1,78],$VP=[1,79],$VQ=[1,80],$VR=[1,81],$VS=[1,82],$VT=[1,83],$VU=[1,84],$VV=[1,85],$VW=[1,86],$VX=[1,87],$VY=[7,8,11,12,14,16,18,20,23,24,25,27,29,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"ARCHIVO_LECCIONES":3,"LECCIONES":4,"EOF":5,"TITULO":6,"titulo":7,"abrellave":8,"abreSentencia":9,"TEXTO":10,"cierraSentencia":11,"cierraLlave":12,"DESCRIPCION":13,"descripcion":14,"TAREA":15,"tarea":16,"RESULTADO":17,"resultado":18,"TIPO_LECCION":19,"tipo":20,"tipoLeccion":21,"EJEMPLO":22,"ejemplo":23,"gcoach":24,"acoach":25,"LECCION":26,"abreLeccion":27,"VALORES_LECCION":28,"cierraLeccion":29,"VALOR_LECCION":30,"EJEMPLO2":31,"ELEMENTO_TEXTO":32,"divIgual":33,"division":34,"flecha":35,"arroba":36,"coma":37,"nulo":38,"menorIgual":39,"mayorIgual":40,"igualIgual":41,"distintoA":42,"menor":43,"mayor":44,"punto":45,"masIgual":46,"menosIgual":47,"porIgual":48,"igual":49,"masMas":50,"menosMenos":51,"por":52,"menos":53,"mas":54,"potencia":55,"abrePar":56,"cierraPar":57,"abreCor":58,"cierraCor":59,"or":60,"and":61,"xor":62,"not":63,"puntoComa":64,"dosPuntos":65,"cadena":66,"id":67,"decimal":68,"entero":69,"caracter":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"titulo",8:"abrellave",9:"abreSentencia",11:"cierraSentencia",12:"cierraLlave",14:"descripcion",16:"tarea",18:"resultado",20:"tipo",23:"ejemplo",24:"gcoach",25:"acoach",27:"abreLeccion",29:"cierraLeccion",31:"EJEMPLO2",33:"divIgual",34:"division",35:"flecha",36:"arroba",37:"coma",38:"nulo",39:"menorIgual",40:"mayorIgual",41:"igualIgual",42:"distintoA",43:"menor",44:"mayor",45:"punto",46:"masIgual",47:"menosIgual",48:"porIgual",49:"igual",50:"masMas",51:"menosMenos",52:"por",53:"menos",54:"mas",55:"potencia",56:"abrePar",57:"cierraPar",58:"abreCor",59:"cierraCor",60:"or",61:"and",62:"xor",63:"not",64:"puntoComa",65:"dosPuntos",66:"cadena",67:"id",68:"decimal",69:"entero",70:"caracter"},
productions_: [0,[3,2],[6,6],[13,6],[15,6],[17,6],[19,6],[22,6],[21,1],[21,1],[4,1],[4,2],[26,3],[28,1],[28,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[10,1],[10,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	console.dir($$[$0-1]);
	return $$[$0-1];
	
break;
case 2:
this.$ = new tituloLeccion($$[$0-2]);
break;
case 3:
this.$ = new descripcionLeccion($$[$0-2]);
break;
case 4:
this.$ = new tareaLeccion($$[$0-2]); 
break;
case 5:
this.$ = new resultadoLeccion($$[$0-2]); 
break;
case 6:
this.$ = new tipoLeccion($$[$0-2]); 
break;
case 7:
this.$ = new ejemploLeccion($$[$0-2]); 
break;
case 8: case 9: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73:
this.$=$$[$0];
break;
case 10:

					console.dir($$[$0]);
					this.$ =new listaLecciones(); 
					this.$.saveLesson($$[$0]);
				
break;
case 11:

				this.$= $$[$0-1];
				this.$.saveLesson($$[$0]);
			
break;
case 12:
this.$= $$[$0-1];
break;
case 13:

					console.dir($$[$0]);
					this.$ = new leccion(); 
					this.$.insertarValor($$[$0]);
				
break;
case 14:

				console.dir($$[$0]);
				this.$ = $$[$0-1];
				this.$.insertarValor($$[$0]);
			
break;
case 22:
this.$ = $$[$0];
break;
case 23:
this.$ = $$[$0-1]+" "+$$[$0];
break;
}
},
table: [{3:1,4:2,26:3,27:$V0},{1:[3]},{5:[1,5],26:6,27:$V0},o($V1,[2,10]),{6:9,7:$V2,13:10,14:$V3,15:11,16:$V4,17:12,18:$V5,19:13,20:$V6,22:14,23:$V7,28:7,30:8,31:$V8},{1:[2,1]},o($V1,[2,11]),{6:9,7:$V2,13:10,14:$V3,15:11,16:$V4,17:12,18:$V5,19:13,20:$V6,22:14,23:$V7,29:[1,22],30:23,31:$V8},o($V9,[2,13]),o($V9,[2,15]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),o($V9,[2,19]),o($V9,[2,20]),o($V9,[2,21]),{8:[1,24]},{8:[1,25]},{8:[1,26]},{8:[1,27]},{8:[1,28]},{8:[1,29]},o($V1,[2,12]),o($V9,[2,14]),{9:[1,30]},{9:[1,31]},{9:[1,32]},{9:[1,33]},{9:[1,34]},{9:[1,35]},{7:$Va,8:$Vb,10:36,12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:37,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,10:88,12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:37,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,10:89,12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:37,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,10:90,12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:37,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{21:91,24:[1,92],25:[1,93]},{7:$Va,8:$Vb,10:94,12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:37,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,11:[1,95],12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:96,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},o($VY,[2,22]),o($VY,[2,24]),o($VY,[2,25]),o($VY,[2,26]),o($VY,[2,27]),o($VY,[2,28]),o($VY,[2,29]),o($VY,[2,30]),o($VY,[2,31]),o($VY,[2,32]),o($VY,[2,33]),o($VY,[2,34]),o($VY,[2,35]),o($VY,[2,36]),o($VY,[2,37]),o($VY,[2,38]),o($VY,[2,39]),o($VY,[2,40]),o($VY,[2,41]),o($VY,[2,42]),o($VY,[2,43]),o($VY,[2,44]),o($VY,[2,45]),o($VY,[2,46]),o($VY,[2,47]),o($VY,[2,48]),o($VY,[2,49]),o($VY,[2,50]),o($VY,[2,51]),o($VY,[2,52]),o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,55]),o($VY,[2,56]),o($VY,[2,57]),o($VY,[2,58]),o($VY,[2,59]),o($VY,[2,60]),o($VY,[2,61]),o($VY,[2,62]),o($VY,[2,63]),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),o($VY,[2,70]),o($VY,[2,71]),o($VY,[2,72]),o($VY,[2,73]),{7:$Va,8:$Vb,11:[1,97],12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:96,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,11:[1,98],12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:96,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{7:$Va,8:$Vb,11:[1,99],12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:96,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{11:[1,100]},{11:[2,8]},{11:[2,9]},{7:$Va,8:$Vb,11:[1,101],12:$Vc,14:$Vd,16:$Ve,18:$Vf,20:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,29:$Vl,32:96,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,67:$VU,68:$VV,69:$VW,70:$VX},{12:[1,102]},o($VY,[2,23]),{12:[1,103]},{12:[1,104]},{12:[1,105]},{12:[1,106]},{12:[1,107]},o($V9,[2,2]),o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7])],
defaultActions: {5:[2,1],92:[2,8],93:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	
	var descripcionLeccion = require("./ArbolLecciones/descripcionLeccion");
    var ejemploLeccion = require("./ArbolLecciones/ejemploLeccion");
    var resultadoLeccion = require("./ArbolLecciones/resultadoLeccion");
    var tareaLeccion = require("./ArbolLecciones/tareaLeccion");
    var tipoLeccion = require("./ArbolLecciones/tipoLeccion");
    var tituloLeccion = require("./ArbolLecciones/titulo");
    var leccion= require("./Leccion");
    var listaLecciones = require("./listaLecciones");
   
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 9
break;
case 4:return 11
break;
case 5:return 25
break;
case 6:return 24
break;
case 7:return 7
break;
case 8:return 14
break;
case 9:return 20
break;
case 10:return 23
break;
case 11:return 16
break;
case 12:return 18
break;
case 13:return 27
break;
case 14:return 29
break;
case 15:return 33
break;
case 16:return 34
break;
case 17:return 35
break;
case 18:return 36
break;
case 19:return 37
break;
case 20:return 38
break;
case 21:'nulo'
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 43
break;
case 27:return 44
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 47
break;
case 31:return 48
break;
case 32:return 49
break;
case 33:return 50
break;
case 34:return 51	       
break;
case 35:return 52
break;
case 36:return 53
break;
case 37:return 54
break;
case 38:return 55
break;
case 39:return 56
break;
case 40:return 57
break;
case 41:return 8
break;
case 42:return 12
break;
case 43:return 58
break;
case 44:return 59
break;
case 45:return 60
break;
case 46:return 61
break;
case 47:return 62
break;
case 48:return 63
break;
case 49:return 64
break;
case 50:return 65
break;
case 51:return 66;
break;
case 52:return 67
break;
case 53:return 68
break;
case 54:return 69
break;
case 55:return 70
break;
case 56:return 5
break;
case 57:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:a-coach\b)/i,/^(?:g-coach\b)/i,/^(?:titulo\b)/i,/^(?:descripcion\b)/i,/^(?:tipo\b)/i,/^(?:ejemplo\b)/i,/^(?:tarea\b)/i,/^(?:resultado\b)/i,/^(?:\{%)/i,/^(?:%\})/i,/^(?:\/=)/i,/^(?:\/)/i,/^(?:->)/i,/^(?:@)/i,/^(?:,)/i,/^(?:\{'\\0'\})/i,/^(?:\{"\\0"\}return\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\.)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\?\?)/i,/^(?:!)/i,/^(?:;)/i,/^(?::)/i,/^(?:"(\\.|[^"])*")/i,/^(?:(([a-zA-Z_])(([a-zA-Z_])|([0-9]))*))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+))/i,/^(?:('([0-9]|[a-zA-Z])'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = lecciones;
exports.Parser = lecciones.Parser;
exports.parse = function () { return lecciones.parse.apply(lecciones, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}