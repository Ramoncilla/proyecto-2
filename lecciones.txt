[
	{
		"titulo": "Estructuras",
		"descripcion": "Lista de estructuras",
		"tipo": "A-Coach",
		"ejemplo": "estructura Persona [ caracter nombre [ 25 ] ; entero edad ; Persona amigo ; ] ; clase estruct { principal ( ) { crearPuntero ( Persona , p3 ) = reservarMemoria ( consultartamanio ( Persona ) ) ; ; raiz -> nombre = \"Calificacion Calificacion Calificacion\" ; raiz -> edad = 15 ; raiz -> amigo = nada ; crearPuntero ( Persona , p2 ) = reservarMemoria ( consultartamanio ( Persona ) ) ; ; raiz -> nombre = \"Calificacion Calificacion\" ; raiz -> edad = 10 ; raiz -> amigo = p3 ; crearPuntero ( Persona , raiz ) = reservarMemoria ( consultartamanio ( Persona ) ) ; ; raiz -> nombre = \"Calificacion \" ; raiz -> edad = 5 ; raiz -> amigo = p2 ; imprimir ( \"<-------------- Listado De Personas ---------------> \" ) ; Persona temp = raiz ; caracter salida [ 50 ] ; Repetir_Mientras ( temp != nada ) { imprimir ( \"Datos de: --------------------------------> \" ) ; Concatenar ( salida , \"Nombre: \" ) ; Concatenar ( salida , temp -> nombre ) ; imprimir ( salida ) ; salida = \"\" ; Concatenar ( salida , \"Edad: #E\" , p -> edad ) ; imprimir ( salida ) ; salida = \"\" ; imprimir ( \"<-------------- Amigo ---------------> \" ) ; temp = temp -> amigo ; } } }",
		"tarea": "Realizar un Ejemplo de Estructura , que reciba un numero y un enlace a otra estructura , cada parametro es una estructura , deberan estar enlazadas , debera de impirmir en consola el cada valor de la estructura . al finalizar debera de retornar Terminado .",
		"resultado": "EDD ( 1 , 2 , 3 , 4 ) = \"Terminado\"",
		"tipoLeccion": 1
	},
	{
		"titulo": "If Anidado",
		"descripcion": "Creacion de SI anidados es decir , sentencuas Si dentro de otras .",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { entero x_1 = 15 ; booleano b_1 = verdadero ; booleano b_2 = falso ; caracter s [ 5 ] = { 'H' , 'o' , 'l' , 'a' } ; decimal d = 25.123456788 ; Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si Si ( verdadero ) Es_verdadero { Si ( ( b_1 == verdadero && b_2 == falso ) || ( b_1 == verdadero && b_2 == verdadero ) ) Es_verdadero { Si ( x_1 >= 10 && x_1 <= 25 ) Es_verdadero { Si ( d > 25.123456787 && d < 25.123456789 ) Es_verdadero { Si ( s [ 2 ] == 'l' ) Es_verdadero { imprimir ( \"Salida Correcta -- Verdadero...\" ) ; } Es_falso { imprimir ( \"ERROR...\" ) ; } Fin - si } Es_falso { imprimir ( \"ERROR...\" ) ; } Fin - si } Es_falso { imprimir ( \"ERROR...\" ) ; } Fin - si } Es_falso { imprimir ( \"ERROR...\" ) ; } Fin - si } Es_falso { imprimir ( \"ERROR...\" ) ; } Fin - si } }",
		"tarea": "Realizar Una sentencia SI anidada de dos o mas if debera de retornar veerdadero",
		"resultado": "Si_Anidado ( verdadero , falso , ( verdadero && Falso ) ) = verdadero",
		"tipoLeccion": 2
	},
	{
		"titulo": "While Anidado",
		"descripcion": "Sentenca de control anidada",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { entero x = 0 ; decimal d = 5.123456789 ; Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si Repetir_Mientras ( verdadero ) { Repetir_Mientras ( x < 10 ) { Repetir_Mientras ( d > 0 ) { caracter print [ 50 ] ; caracter printB [ 50 ] ; Concatenar ( print , \"Salida X: #E \" , x ) ; Concatenar ( printB , \"---  D: #D \" , e ) ; Imprimir ( Concatenar ( print , printB ) ) ; d -- ; } d = 5.123456789 ; x ++ ; } romper ; } } }",
		"tarea": "realizar una sentencia ciclo anidada , y hacer uso del Ciclo_doble_condicion",
		"resultado": "WhileAnidado ( 5 ) = 1 ;",
		"tipoLeccion": 2
	},
	{
		"titulo": "Break_Ciclo_Anidado - Sentencias de Flujo",
		"descripcion": "Uso de while , for y break",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { ENTERO x = 0 ; ENTERO y = 0 ; ENTERO z = 0 ; Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si Repetir_Mientras ( x < 5 ) { y = 0 ; hacer { hacer ( z = 0 ; z < 5 ; z ++ ) { si ( z == 3 ) Es_verdadero { imprimir ( \"Salida X:\" ) ; imprimir ( convertirAcadena ( x ) ) ; imprimir ( \"------ Y:\" ) ; imprimir ( convertirAcadena ( y ) ) ; imprimir ( \"------ Z:\" ) ; imprimir ( convertirAcadena ( z ) ) ; romper ; } Fin - si } si ( y == 2 ) Es_verdadero { imprimir ( \"Salida X:\" ) ; imprimir ( convertirAcadena ( x ) ) ; imprimir ( \"------ Y:\" ) ; imprimir ( convertirAcadena ( y ) ) ; imprimir ( \"------ Z:\" ) ; imprimir ( convertirAcadena ( z ) ) ; romper ; } Fin - si y ++ ; } mientras ( y < 5 ) ; si ( x == 1 ) Es_verdadero { imprimir ( \"Terminado Salida X:\" ) ; imprimir ( convertirAcadena ( x ) ) ; imprimir ( \"------ Y:\" ) ; imprimir ( convertirAcadena ( y ) ) ; imprimir ( \"------ Z:\" ) ; imprimir ( convertirAcadena ( z ) ) ; romper ; } Fin - si x ++ ; } } }",
		"tarea": "realizar un ciclo de doble condicion que se detenga , y retorne el valor donde se quedo . Hacer uso de Ciclo_doble_condicion",
		"resultado": "ciclo ( 10 , verdadero ) = 5",
		"tipoLeccion": 2
	},
	{
		"titulo": "If_Condicion",
		"descripcion": "funcionamiento de la sentencia de contro SI",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si si ( ! ( falso || falso ) && ( verdadero || verdadero ) && ( falso || verdadero ) ) Es_verdadero { IMprimiR ( \"Salida Verdadera....\" ) ; } Es_falso { IMPRIMIR ( \"ERROR...\" ) ; } Fin - si } }",
		"tarea": "realizar una sentencia de control y retorne verdadero al ingresar a un if",
		"resultado": "SentenciaIf ( verdadero , falso , falso , verdadero ) = true",
		"tipoLeccion": 2
	},
	{
		"titulo": "For_Anidado",
		"descripcion": "sentencia de control for anidadas",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si Repetir_contando ( variable : a ; desde : 0 ; hasta : 4 ) { Repetir_contando ( variable : b ; desde : 0 ; hasta : a ) { imprimir ( \"Salida A: \" ) ; imprimir ( convertirAcadena ( a ) ) ; imprimir ( \"---  B: \" ) ; imprimir ( convertirAcadena ( b ) ) ; } } } }",
		"tarea": "realizar un ciclo cotador que al finalizar retorne verdadero",
		"resultado": "ciclo_For ( 10 ) = verdadero",
		"tipoLeccion": 2
	},
	{
		"titulo": "Funcion Imprimir",
		"descripcion": "funcionamiento del metodo imprimri del lenguaje",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si entero a = 10 ; decimal d = 10.123456789 ; booleano b = true ; caracter c [ 20 ] = \"Salida \" ; caracter cadena [ 50 ] = \"\" ; Concatenar ( cadena , \"Salida Entero ---> #E  NUMERO\" , a ) ; imprimir ( cadena ) ; Concatenar ( cadena , \"Salida Decimal ---> #D DECIMAL\" , d ) ; imprimir ( cadena ) ; Concatenar ( cadena , \"Salida Booleano ---> #B BOLEANO\" , b ) ; imprimir ( cadena ) ; Concatenar ( cadena , \"Salida Cadena ---> \" ) ; imprimir ( cadena ) ; imprimir ( c ) ; } }",
		"tarea": "",
		"resultado": "",
		"tipoLeccion": 2
	},
	{
		"titulo": "Sentencia Switch",
		"descripcion": "funcionamiento de la sentencia switch",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { entero a = convertirANumero ( 'C' ) ; Si ( - 1 == a ) Es_verdadero { Retorno ; } Fin - Si Evaluar_si ( a ) { Es_igual_a 1 : IMPRIMIR ( \"Se introdujo NUMERO 1\" ) ; romper ; Es_igual_a 2 : IMPRIMIR ( \"Se introdujo NUMERO 2\" ) ; romper ; Es_igual_a 3 : IMPRIMIR ( \"Se introdujo NUMERO 3\" ) ; romper ; Es_igual_a 4 : IMPRIMIR ( \"Se introdujo NUMERO 4\" ) ; romper ; Es_igual_a 5 : IMPRIMIR ( \"Se introdujo NUMERO 5\" ) ; romper ; Es_igual_a A : IMPRIMIR ( \"Se introdujo letra C\" ) ; romper ; Es_igual_a F : IMPRIMIR ( \"Se introdujo letra F\" ) ; romper ; Es_igual_a G : IMPRIMIR ( \"Se introdujo letra P\" ) ; romper ; Es_igual_a a : IMPRIMIR ( \"Se introdujo letra a\" ) ; romper ; defecto : IMPRIMIR ( \"ERROR...\" ) ; } } }",
		"tarea": "realizar un ejemplo de switch y al momento de entrar retorno el reesulado 5",
		"resultado": "switch ( '5' ) = 5",
		"tipoLeccion": 2
	},
	{
		"titulo": "Sentencia Switch 2",
		"descripcion": "funcionamiento de la sentencia switch",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { caracter a = 'C' ; Si ( - 1 == a ) Es_verdadero { Retorno ; } Fin - Si Evaluar_si ( a ) { Es_igual_a 1 : IMPRIMIR ( \"Se introdujo NUMERO 1\" ) ; romper ; Es_igual_a 2 : IMPRIMIR ( \"Se introdujo NUMERO 2\" ) ; romper ; Es_igual_a 3 : IMPRIMIR ( \"Se introdujo NUMERO 3\" ) ; romper ; Es_igual_a 4 : IMPRIMIR ( \"Se introdujo NUMERO 4\" ) ; romper ; Es_igual_a 5 : IMPRIMIR ( \"Se introdujo NUMERO 5\" ) ; romper ; Es_igual_a 'C' : IMPRIMIR ( \"Se introdujo letra C\" ) ; romper ; Es_igual_a 'F' : IMPRIMIR ( \"Se introdujo letra F\" ) ; romper ; Es_igual_a 'G' : IMPRIMIR ( \"Se introdujo letra P\" ) ; romper ; Es_igual_a 'a' : IMPRIMIR ( \"Se introdujo letra a\" ) ; romper ; defecto : IMPRIMIR ( \"ERROR...\" ) ; } } }",
		"tarea": "realizar un ejemplo de switch y al momento de entrar retorno el reesulado 5",
		"resultado": "switch ( '5' ) = 5",
		"tipoLeccion": 2
	},
	{
		"titulo": "sentencia if else",
		"descripcion": "funcionamiento de la sentencia de contro if else",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { Si ( - 1 != - 1 ) Es_verdadero { Retorno ; } Fin - Si si ( ! ( VERDADERO && falso ) && ( falso ) && ! ( falso ) && ( falso || VERDADERO ) ) Es_verdadero { IMprimir ( \"ERROR...\" ) ; } Es_falso { si ( ! ( VERDADERO && falso ) && ( VERDADERO ) && ! ( falso ) && ( falso || VERDADERO ) ) Es_verdadero { IMprimir ( \"Salida Verdadera...\" ) ; } Es_falso { IMprimir ( \"ERROR...\" ) ; } Fin - si } Fin - si } }",
		"tarea": "realizar una sentencia de control if else , al momento de compara ambos resultados retornar false",
		"resultado": "sentencia ( verdadero , falso , verdadero , falso , falso ) = falso",
		"tipoLeccion": 2
	},
	{
		"titulo": "entrada desde el teclado",
		"descripcion": "funcionamiento de entrada por teclado",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { caracter nombre [ 15 ] = \"\" ; Leer_Teclado ( \"Por favor ingrese su nombre\" , nombre ) ; imprimir ( concatenar ( \"Bienvenido \" , nombre ) ) ; entero edad ; Leer_Teclado ( \"Por favor ingrese su edad\" , edad ) ; caracter salida [ 50 ] = \"\" ; concatenar ( salida , \"Saludos en 10 años usted tendrá #E años. \" , ( edad + 10 ) ) ; } }",
		"tarea": "realizar un ejemplo que reciba desde el teclado un texto y sea igual al valor retornado",
		"resultado": "entrada ( ) = \"Hola 65\"",
		"tipoLeccion": 2
	},
	{
		"titulo": "Funcionamiento de operadores",
		"descripcion": "descripcion del funcionamiento de varios operadores del lenguaje",
		"tipo": "G-Coach",
		"ejemplo": "clase Ejemplo_If_Anidado { principal ( ) { entero a = 10 + 20 + 25 + 35 + 9 + ( ( verdadero || falso ) && ( ! falso ) && ( falso ?? falso ) ) + 'd' ; decimal d = ( 1.1 + 1.3 + 1.6 ) * 0.1013 ; decimal div = 10 / 0 ; caracter salida [ 50 ] ; concatenar ( salida , \"Operaciones Enteros --> #E ENTEROS #E\" , a ) ; imprimir ( salida ) ; salida = \"\" ; concatenar ( salida , \"Operaciones Enteros --> #D DECIMAL #D\" , d ) ; imprimir ( salida ) ; salida = \"\" ; concatenar ( salida , \"Division 0 --> #D \" , div ) ; imprimir ( salida ) ; } }",
		"tarea": "impirmir en la consola y retornar le total de los numero",
		"resultado": "salida ( 10 , verdadero , falso , 20 , 25 , 24 , 15 , 5 ) = 100",
		"tipoLeccion": 2
	},
	{
		"titulo": "Leccion de Sumas ",
		"descripcion": "lecciona calificaicon",
		"tipo": "g-coach",
		"ejemplo": "clase ejemplo{\n\nentero suma(entero a, entero b){\nretorno a^b;\n}\n\n}",
		"tarea": "crear una fucnio que se llame suma y que reronr la suma de los numeros ",
		"resultado": "suma(10,25)=1000",
		"tipoLeccion": "2"
	},
	{
		"titulo": "kkkkkk EJemplo",
		"descripcion": "fdfgfd",
		"tipo": "g-coach",
		"ejemplo": "clase a{\n\nentero multiplicacion(entero a, entero b){\n    retorno a*b;\n}\n\n}\n\n\n",
		"tarea": "gdsgdfgfd",
		"resultado": "multiplicacion(10,10)=1000",
		"tipoLeccion": "2"
	},
	{
		"titulo": "nfkdsfdfdsfdsfds",
		"descripcion": "dfgfdgf",
		"tipo": "g-coach",
		"ejemplo": "clase calificacion{\n\n\nentero potencia(entero a, entero b){\n   retorno a^b;\n}\n\n}",
		"tarea": "sdgdfgtshthyh",
		"resultado": "potencia(10,3)=1000",
		"tipoLeccion": "2"
	},
	{
		"titulo": "dsdgfdg pruebaa",
		"descripcion": "dfsg",
		"tipo": "g-coach",
		"ejemplo": "clase calificacion{\n\n\nentero potencia(entero a, entero b){\n   retorno (a^b);\n}\n\n}",
		"tarea": "sfdsfdsf",
		"resultado": "potencia(10,3) = 1000",
		"tipoLeccion": "2"
	},
	{
		"titulo": "nombre lecciones",
		"descripcion": "dsvdffdgfdfdgfdgf",
		"tipo": "g-coach",
		"ejemplo": "clase ejemplo{\n\nentero ingreso(entero a){\n\nlista l = nuevo lista(entero);\nl.insertar(a);\nentero b = l.obtener(0);\n\nretorno b;\n}\n\n\n}\n\n",
		"tarea": "drgrehtrht",
		"resultado": "ingreso(10)=10",
		"tipoLeccion": "2"
	}
]